
motorCONTROL_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c8c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  20001c8c  20001c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20001cb8  20001cb8  00009cb8  2**2
                  ALLOC
  3 .stack        00003000  20001d48  20001d48  00009cb8  2**0
                  ALLOC
  4 .comment      000000d7  00000000  00000000  00009cb8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00009d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000066f  00000000  00000000  00009e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004db2  00000000  00000000  0000a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a6e  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015a2  00000000  00000000  0000fcce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004dc  00000000  00000000  00011270  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001df6  00000000  00000000  0001174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000eaa  00000000  00000000  00013542  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00025037  00000000  00000000  000143ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00039423  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000058  00000000  00000000  00039448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000ef1 	.word	0x20000ef1
2000006c:	20000f21 	.word	0x20000f21
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	2000152d 	.word	0x2000152d
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20001c8c 	.word	0x20001c8c
20000450:	20001c8c 	.word	0x20001c8c
20000454:	20001c8c 	.word	0x20001c8c
20000458:	20001cb8 	.word	0x20001cb8
2000045c:	00000000 	.word	0x00000000
20000460:	20001cb8 	.word	0x20001cb8
20000464:	20001d48 	.word	0x20001d48
20000468:	20001b41 	.word	0x20001b41
2000046c:	200006c1 	.word	0x200006c1

20000470 <__do_global_dtors_aux>:
20000470:	f641 43b8 	movw	r3, #7352	; 0x1cb8
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f641 408c 	movw	r0, #7308	; 0x1c8c
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <update_encoder_vals>:
int left_encoder_val = 0;
int right_encoder_val = 0;
int left_rotating = 0;
int right_rotating = 0;

void update_encoder_vals( void ){
200004a0:	b480      	push	{r7}
200004a2:	af00      	add	r7, sp, #0

	prev_left_encoder_val = left_encoder_val;
200004a4:	f641 43e4 	movw	r3, #7396	; 0x1ce4
200004a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004ac:	681a      	ldr	r2, [r3, #0]
200004ae:	f641 43d4 	movw	r3, #7380	; 0x1cd4
200004b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004b6:	601a      	str	r2, [r3, #0]
	prev_right_encoder_val = right_encoder_val;
200004b8:	f641 43e8 	movw	r3, #7400	; 0x1ce8
200004bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c0:	681a      	ldr	r2, [r3, #0]
200004c2:	f641 43d8 	movw	r3, #7384	; 0x1cd8
200004c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004ca:	601a      	str	r2, [r3, #0]

	if(*ENCODERS == 1 || *ENCODERS == 3)
200004cc:	f641 4398 	movw	r3, #7320	; 0x1c98
200004d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004d4:	681b      	ldr	r3, [r3, #0]
200004d6:	681b      	ldr	r3, [r3, #0]
200004d8:	2b01      	cmp	r3, #1
200004da:	d007      	beq.n	200004ec <update_encoder_vals+0x4c>
200004dc:	f641 4398 	movw	r3, #7320	; 0x1c98
200004e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004e4:	681b      	ldr	r3, [r3, #0]
200004e6:	681b      	ldr	r3, [r3, #0]
200004e8:	2b03      	cmp	r3, #3
200004ea:	d107      	bne.n	200004fc <update_encoder_vals+0x5c>
		left_encoder_val = 1;
200004ec:	f641 43e4 	movw	r3, #7396	; 0x1ce4
200004f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004f4:	f04f 0201 	mov.w	r2, #1
200004f8:	601a      	str	r2, [r3, #0]
void update_encoder_vals( void ){

	prev_left_encoder_val = left_encoder_val;
	prev_right_encoder_val = right_encoder_val;

	if(*ENCODERS == 1 || *ENCODERS == 3)
200004fa:	e006      	b.n	2000050a <update_encoder_vals+0x6a>
		left_encoder_val = 1;
	else
		left_encoder_val = 0;
200004fc:	f641 43e4 	movw	r3, #7396	; 0x1ce4
20000500:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000504:	f04f 0200 	mov.w	r2, #0
20000508:	601a      	str	r2, [r3, #0]

	if(*ENCODERS == 2 || *ENCODERS == 3)
2000050a:	f641 4398 	movw	r3, #7320	; 0x1c98
2000050e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000512:	681b      	ldr	r3, [r3, #0]
20000514:	681b      	ldr	r3, [r3, #0]
20000516:	2b02      	cmp	r3, #2
20000518:	d007      	beq.n	2000052a <update_encoder_vals+0x8a>
2000051a:	f641 4398 	movw	r3, #7320	; 0x1c98
2000051e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000522:	681b      	ldr	r3, [r3, #0]
20000524:	681b      	ldr	r3, [r3, #0]
20000526:	2b03      	cmp	r3, #3
20000528:	d107      	bne.n	2000053a <update_encoder_vals+0x9a>
		right_encoder_val = 1;
2000052a:	f641 43e8 	movw	r3, #7400	; 0x1ce8
2000052e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000532:	f04f 0201 	mov.w	r2, #1
20000536:	601a      	str	r2, [r3, #0]
	if(*ENCODERS == 1 || *ENCODERS == 3)
		left_encoder_val = 1;
	else
		left_encoder_val = 0;

	if(*ENCODERS == 2 || *ENCODERS == 3)
20000538:	e006      	b.n	20000548 <update_encoder_vals+0xa8>
		right_encoder_val = 1;
	else
		right_encoder_val = 0;
2000053a:	f641 43e8 	movw	r3, #7400	; 0x1ce8
2000053e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000542:	f04f 0200 	mov.w	r2, #0
20000546:	601a      	str	r2, [r3, #0]

	// increment totals only when encoder is rotating
	if((prev_left_encoder_val == 0 && left_encoder_val == 1) || (prev_left_encoder_val == 1 && left_encoder_val == 0)){
20000548:	f641 43d4 	movw	r3, #7380	; 0x1cd4
2000054c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000550:	681b      	ldr	r3, [r3, #0]
20000552:	2b00      	cmp	r3, #0
20000554:	d106      	bne.n	20000564 <update_encoder_vals+0xc4>
20000556:	f641 43e4 	movw	r3, #7396	; 0x1ce4
2000055a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000055e:	681b      	ldr	r3, [r3, #0]
20000560:	2b01      	cmp	r3, #1
20000562:	d00d      	beq.n	20000580 <update_encoder_vals+0xe0>
20000564:	f641 43d4 	movw	r3, #7380	; 0x1cd4
20000568:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000056c:	681b      	ldr	r3, [r3, #0]
2000056e:	2b01      	cmp	r3, #1
20000570:	d119      	bne.n	200005a6 <update_encoder_vals+0x106>
20000572:	f641 43e4 	movw	r3, #7396	; 0x1ce4
20000576:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000057a:	681b      	ldr	r3, [r3, #0]
2000057c:	2b00      	cmp	r3, #0
2000057e:	d112      	bne.n	200005a6 <update_encoder_vals+0x106>
		left_wheel_tot += 1;
20000580:	f641 43dc 	movw	r3, #7388	; 0x1cdc
20000584:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000588:	681b      	ldr	r3, [r3, #0]
2000058a:	f103 0201 	add.w	r2, r3, #1
2000058e:	f641 43dc 	movw	r3, #7388	; 0x1cdc
20000592:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000596:	601a      	str	r2, [r3, #0]
		left_rotating = 1;
20000598:	f641 43ec 	movw	r3, #7404	; 0x1cec
2000059c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005a0:	f04f 0201 	mov.w	r2, #1
200005a4:	601a      	str	r2, [r3, #0]
	else{
		//do nothing
		//left_rotating = 0;
	}

	if((prev_right_encoder_val == 0 && right_encoder_val == 1) || (prev_right_encoder_val == 1 && right_encoder_val == 0)){
200005a6:	f641 43d8 	movw	r3, #7384	; 0x1cd8
200005aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ae:	681b      	ldr	r3, [r3, #0]
200005b0:	2b00      	cmp	r3, #0
200005b2:	d106      	bne.n	200005c2 <update_encoder_vals+0x122>
200005b4:	f641 43e8 	movw	r3, #7400	; 0x1ce8
200005b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005bc:	681b      	ldr	r3, [r3, #0]
200005be:	2b01      	cmp	r3, #1
200005c0:	d00d      	beq.n	200005de <update_encoder_vals+0x13e>
200005c2:	f641 43d8 	movw	r3, #7384	; 0x1cd8
200005c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005ca:	681b      	ldr	r3, [r3, #0]
200005cc:	2b01      	cmp	r3, #1
200005ce:	d119      	bne.n	20000604 <update_encoder_vals+0x164>
200005d0:	f641 43e8 	movw	r3, #7400	; 0x1ce8
200005d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005d8:	681b      	ldr	r3, [r3, #0]
200005da:	2b00      	cmp	r3, #0
200005dc:	d112      	bne.n	20000604 <update_encoder_vals+0x164>
		right_wheel_tot += 1;
200005de:	f641 43e0 	movw	r3, #7392	; 0x1ce0
200005e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005e6:	681b      	ldr	r3, [r3, #0]
200005e8:	f103 0201 	add.w	r2, r3, #1
200005ec:	f641 43e0 	movw	r3, #7392	; 0x1ce0
200005f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005f4:	601a      	str	r2, [r3, #0]
		right_rotating = 1;
200005f6:	f641 43f0 	movw	r3, #7408	; 0x1cf0
200005fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005fe:	f04f 0201 	mov.w	r2, #1
20000602:	601a      	str	r2, [r3, #0]
	}
	else{
		//do nothing
		//right_rotating = 0;
	}
}
20000604:	46bd      	mov	sp, r7
20000606:	bc80      	pop	{r7}
20000608:	4770      	bx	lr
2000060a:	bf00      	nop

2000060c <uart1_rx_handler>:
	left_wheel_direction = rx_buff[4];
	mode = rx_buff[5];
}*/

void uart1_rx_handler( mss_uart_instance_t * this_uart )
{
2000060c:	b580      	push	{r7, lr}
2000060e:	b086      	sub	sp, #24
20000610:	af00      	add	r7, sp, #0
20000612:	6078      	str	r0, [r7, #4]
	uint8_t rx_buff[8] = {0xFF,0xFF, 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
20000614:	f641 3394 	movw	r3, #7060	; 0x1b94
20000618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000061c:	f107 020c 	add.w	r2, r7, #12
20000620:	e893 0003 	ldmia.w	r3, {r0, r1}
20000624:	e882 0003 	stmia.w	r2, {r0, r1}
	uint8_t rx_size = MSS_UART_get_rx( this_uart, rx_buff, sizeof(rx_buff) );
20000628:	f107 030c 	add.w	r3, r7, #12
2000062c:	6878      	ldr	r0, [r7, #4]
2000062e:	4619      	mov	r1, r3
20000630:	f04f 0208 	mov.w	r2, #8
20000634:	f000 fab0 	bl	20000b98 <MSS_UART_get_rx>
20000638:	4603      	mov	r3, r0
2000063a:	75fb      	strb	r3, [r7, #23]
	//process_rx_data(rx_buff, rx_size );

	prev_right_duty_cycle = right_duty_cycle;
2000063c:	f641 43c8 	movw	r3, #7368	; 0x1cc8
20000640:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000644:	681a      	ldr	r2, [r3, #0]
20000646:	f641 43cc 	movw	r3, #7372	; 0x1ccc
2000064a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000064e:	601a      	str	r2, [r3, #0]
	prev_left_duty_cycle = left_duty_cycle;
20000650:	f641 43c4 	movw	r3, #7364	; 0x1cc4
20000654:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000658:	681a      	ldr	r2, [r3, #0]
2000065a:	f641 43d0 	movw	r3, #7376	; 0x1cd0
2000065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000662:	601a      	str	r2, [r3, #0]

	right_duty_cycle = rx_buff[1];
20000664:	7b7b      	ldrb	r3, [r7, #13]
20000666:	4618      	mov	r0, r3
20000668:	f001 f89c 	bl	200017a4 <__aeabi_ui2f>
2000066c:	4602      	mov	r2, r0
2000066e:	f641 43c8 	movw	r3, #7368	; 0x1cc8
20000672:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000676:	601a      	str	r2, [r3, #0]
	right_wheel_direction = rx_buff[2];
20000678:	7bbb      	ldrb	r3, [r7, #14]
2000067a:	461a      	mov	r2, r3
2000067c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
20000680:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000684:	601a      	str	r2, [r3, #0]
	left_duty_cycle = rx_buff[3];
20000686:	7bfb      	ldrb	r3, [r7, #15]
20000688:	4618      	mov	r0, r3
2000068a:	f001 f88b 	bl	200017a4 <__aeabi_ui2f>
2000068e:	4602      	mov	r2, r0
20000690:	f641 43c4 	movw	r3, #7364	; 0x1cc4
20000694:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000698:	601a      	str	r2, [r3, #0]
	left_wheel_direction = rx_buff[4];
2000069a:	7c3b      	ldrb	r3, [r7, #16]
2000069c:	461a      	mov	r2, r3
2000069e:	f641 43c0 	movw	r3, #7360	; 0x1cc0
200006a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006a6:	601a      	str	r2, [r3, #0]
	mode = rx_buff[5];
200006a8:	7c7b      	ldrb	r3, [r7, #17]
200006aa:	461a      	mov	r2, r3
200006ac:	f641 439c 	movw	r3, #7324	; 0x1c9c
200006b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006b4:	601a      	str	r2, [r3, #0]
}
200006b6:	f107 0718 	add.w	r7, r7, #24
200006ba:	46bd      	mov	sp, r7
200006bc:	bd80      	pop	{r7, pc}
200006be:	bf00      	nop

200006c0 <main>:

int main()
{
200006c0:	b590      	push	{r4, r7, lr}
200006c2:	b099      	sub	sp, #100	; 0x64
200006c4:	af00      	add	r7, sp, #0


	float previous_error = 0;
200006c6:	4bad      	ldr	r3, [pc, #692]	; (2000097c <main+0x2bc>)
200006c8:	627b      	str	r3, [r7, #36]	; 0x24
	float current_error = 0;
200006ca:	4bac      	ldr	r3, [pc, #688]	; (2000097c <main+0x2bc>)
200006cc:	62bb      	str	r3, [r7, #40]	; 0x28
	float total_error = 0;
200006ce:	4bab      	ldr	r3, [pc, #684]	; (2000097c <main+0x2bc>)
200006d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	float correction_duty = 0.0;
200006d2:	4baa      	ldr	r3, [pc, #680]	; (2000097c <main+0x2bc>)
200006d4:	633b      	str	r3, [r7, #48]	; 0x30

	float percent_diff = 0.0;
200006d6:	4ba9      	ldr	r3, [pc, #676]	; (2000097c <main+0x2bc>)
200006d8:	637b      	str	r3, [r7, #52]	; 0x34

	int reset_value = 1000;
200006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200006de:	63bb      	str	r3, [r7, #56]	; 0x38

	int LEFT_PWM = 0;
200006e0:	f04f 0300 	mov.w	r3, #0
200006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int RIGHT_PWM = 0;
200006e6:	f04f 0300 	mov.w	r3, #0
200006ea:	643b      	str	r3, [r7, #64]	; 0x40

	int newLEFT_PWM = 0;
200006ec:	f04f 0300 	mov.w	r3, #0
200006f0:	647b      	str	r3, [r7, #68]	; 0x44
	int newRIGHT_PWM = 0;
200006f2:	f04f 0300 	mov.w	r3, #0
200006f6:	64bb      	str	r3, [r7, #72]	; 0x48


	int begin = 1;
200006f8:	f04f 0301 	mov.w	r3, #1
200006fc:	64fb      	str	r3, [r7, #76]	; 0x4c


	uint32_t counter = 0;
200006fe:	f04f 0300 	mov.w	r3, #0
20000702:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t gpio_inputs = 0;
20000704:	f04f 0300 	mov.w	r3, #0
20000708:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t count[8] = {0};
2000070a:	f107 0304 	add.w	r3, r7, #4
2000070e:	f04f 0200 	mov.w	r2, #0
20000712:	601a      	str	r2, [r3, #0]
20000714:	f103 0304 	add.w	r3, r3, #4
20000718:	f04f 0200 	mov.w	r2, #0
2000071c:	601a      	str	r2, [r3, #0]
2000071e:	f103 0304 	add.w	r3, r3, #4
20000722:	f04f 0200 	mov.w	r2, #0
20000726:	601a      	str	r2, [r3, #0]
20000728:	f103 0304 	add.w	r3, r3, #4
2000072c:	f04f 0200 	mov.w	r2, #0
20000730:	601a      	str	r2, [r3, #0]
20000732:	f103 0304 	add.w	r3, r3, #4
20000736:	f04f 0200 	mov.w	r2, #0
2000073a:	601a      	str	r2, [r3, #0]
2000073c:	f103 0304 	add.w	r3, r3, #4
20000740:	f04f 0200 	mov.w	r2, #0
20000744:	601a      	str	r2, [r3, #0]
20000746:	f103 0304 	add.w	r3, r3, #4
2000074a:	f04f 0200 	mov.w	r2, #0
2000074e:	601a      	str	r2, [r3, #0]
20000750:	f103 0304 	add.w	r3, r3, #4
20000754:	f04f 0200 	mov.w	r2, #0
20000758:	601a      	str	r2, [r3, #0]
2000075a:	f103 0304 	add.w	r3, r3, #4
	int max = 0;
2000075e:	f04f 0300 	mov.w	r3, #0
20000762:	65bb      	str	r3, [r7, #88]	; 0x58
	int max_index = 0;
20000764:	f04f 0300 	mov.w	r3, #0
20000768:	65fb      	str	r3, [r7, #92]	; 0x5c

	MSS_GPIO_init();
2000076a:	f000 fdf1 	bl	20001350 <MSS_GPIO_init>
	MSS_GPIO_config(MSS_GPIO_0, MSS_GPIO_INOUT_MODE);
2000076e:	f04f 0000 	mov.w	r0, #0
20000772:	f04f 0103 	mov.w	r1, #3
20000776:	f000 fe1b 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INOUT_MODE);
2000077a:	f04f 0001 	mov.w	r0, #1
2000077e:	f04f 0103 	mov.w	r1, #3
20000782:	f000 fe15 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_2, MSS_GPIO_INOUT_MODE);
20000786:	f04f 0002 	mov.w	r0, #2
2000078a:	f04f 0103 	mov.w	r1, #3
2000078e:	f000 fe0f 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_3, MSS_GPIO_INOUT_MODE);
20000792:	f04f 0003 	mov.w	r0, #3
20000796:	f04f 0103 	mov.w	r1, #3
2000079a:	f000 fe09 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_4, MSS_GPIO_INOUT_MODE);
2000079e:	f04f 0004 	mov.w	r0, #4
200007a2:	f04f 0103 	mov.w	r1, #3
200007a6:	f000 fe03 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_5, MSS_GPIO_INOUT_MODE);
200007aa:	f04f 0005 	mov.w	r0, #5
200007ae:	f04f 0103 	mov.w	r1, #3
200007b2:	f000 fdfd 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_6, MSS_GPIO_INOUT_MODE);
200007b6:	f04f 0006 	mov.w	r0, #6
200007ba:	f04f 0103 	mov.w	r1, #3
200007be:	f000 fdf7 	bl	200013b0 <MSS_GPIO_config>
	MSS_GPIO_config(MSS_GPIO_7, MSS_GPIO_INOUT_MODE);
200007c2:	f04f 0007 	mov.w	r0, #7
200007c6:	f04f 0103 	mov.w	r1, #3
200007ca:	f000 fdf1 	bl	200013b0 <MSS_GPIO_config>

	MSS_UART_init(&g_mss_uart1, MSS_UART_9600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200007ce:	f641 40f4 	movw	r0, #7412	; 0x1cf4
200007d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
200007da:	f04f 0203 	mov.w	r2, #3
200007de:	f000 fd0f 	bl	20001200 <MSS_UART_init>
	MSS_UART_set_rx_handler( &g_mss_uart1, uart1_rx_handler, MSS_UART_FIFO_EIGHT_BYTES );
200007e2:	f641 40f4 	movw	r0, #7412	; 0x1cf4
200007e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007ea:	f240 610d 	movw	r1, #1549	; 0x60d
200007ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
200007f2:	f04f 0280 	mov.w	r2, #128	; 0x80
200007f6:	f000 fb0d 	bl	20000e14 <MSS_UART_set_rx_handler>
200007fa:	e000      	b.n	200007fe <main+0x13e>
//		else
//		{
//			*RIGHT_MOTOR = 0;
//			*LEFT_MOTOR = 0;
//		}
	}
200007fc:	bf00      	nop
//				left_wheel_tot = 0;
//			if(prev_right_duty_cycle != right_duty_cycle)
//				right_wheel_tot = 0;
//		}

		if(mode == 1)
200007fe:	f641 439c 	movw	r3, #7324	; 0x1c9c
20000802:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000806:	681b      	ldr	r3, [r3, #0]
20000808:	2b01      	cmp	r3, #1
2000080a:	d1f7      	bne.n	200007fc <main+0x13c>
		{
			right_duty_cycle = 50;
2000080c:	f641 43c8 	movw	r3, #7368	; 0x1cc8
20000810:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000814:	4a5a      	ldr	r2, [pc, #360]	; (20000980 <main+0x2c0>)
20000816:	601a      	str	r2, [r3, #0]
			left_duty_cycle = 50;
20000818:	f641 43c4 	movw	r3, #7364	; 0x1cc4
2000081c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000820:	4a57      	ldr	r2, [pc, #348]	; (20000980 <main+0x2c0>)
20000822:	601a      	str	r2, [r3, #0]

			update_encoder_vals();
20000824:	f7ff fe3c 	bl	200004a0 <update_encoder_vals>
//			percent_diff = left_duty_cycle/right_duty_cycle;
//			previous_error = current_error;
//			current_error = right_wheel_tot*(percent_diff) - left_wheel_tot;

//			percent_diff = left_duty_cycle/right_duty_cycle;
			previous_error = current_error;
20000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000082a:	627b      	str	r3, [r7, #36]	; 0x24

			current_error = ((float)right_wheel_tot)*left_duty_cycle - ((float)left_wheel_tot)*right_duty_cycle;
2000082c:	f641 43e0 	movw	r3, #7392	; 0x1ce0
20000830:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000834:	681b      	ldr	r3, [r3, #0]
20000836:	4618      	mov	r0, r3
20000838:	f000 ffb8 	bl	200017ac <__aeabi_i2f>
2000083c:	4602      	mov	r2, r0
2000083e:	f641 43c4 	movw	r3, #7364	; 0x1cc4
20000842:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000846:	681b      	ldr	r3, [r3, #0]
20000848:	4610      	mov	r0, r2
2000084a:	4619      	mov	r1, r3
2000084c:	f001 f802 	bl	20001854 <__aeabi_fmul>
20000850:	4603      	mov	r3, r0
20000852:	461c      	mov	r4, r3
20000854:	f641 43dc 	movw	r3, #7388	; 0x1cdc
20000858:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000085c:	681b      	ldr	r3, [r3, #0]
2000085e:	4618      	mov	r0, r3
20000860:	f000 ffa4 	bl	200017ac <__aeabi_i2f>
20000864:	4602      	mov	r2, r0
20000866:	f641 43c8 	movw	r3, #7368	; 0x1cc8
2000086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000086e:	681b      	ldr	r3, [r3, #0]
20000870:	4610      	mov	r0, r2
20000872:	4619      	mov	r1, r3
20000874:	f000 ffee 	bl	20001854 <__aeabi_fmul>
20000878:	4603      	mov	r3, r0
2000087a:	4620      	mov	r0, r4
2000087c:	4619      	mov	r1, r3
2000087e:	f000 fedf 	bl	20001640 <__aeabi_fsub>
20000882:	4603      	mov	r3, r0
20000884:	62bb      	str	r3, [r7, #40]	; 0x28
//			printf("right: %x\n\r", right_wheel_tot);
//			printf("left: %x\n\r", left_wheel_tot);
//			printf("current_error: %f\n\r", current_error);

			// only accumulate error when wheels are rotating
			if(left_rotating == 1 || right_rotating == 1)
20000886:	f641 43ec 	movw	r3, #7404	; 0x1cec
2000088a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000088e:	681b      	ldr	r3, [r3, #0]
20000890:	2b01      	cmp	r3, #1
20000892:	d006      	beq.n	200008a2 <main+0x1e2>
20000894:	f641 43f0 	movw	r3, #7408	; 0x1cf0
20000898:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	2b01      	cmp	r3, #1
200008a0:	d105      	bne.n	200008ae <main+0x1ee>
				total_error += current_error;
200008a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200008a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
200008a6:	f000 fecd 	bl	20001644 <__addsf3>
200008aa:	4603      	mov	r3, r0
200008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			// PID calculations
//			correction_duty = Kp*current_error/20.0 + Ki*total_error/20.0 + Kd*(current_error-previous_error)/20.0;

			newLEFT_PWM = PERIOD*(left_duty_cycle/100) ;
200008ae:	f641 3390 	movw	r3, #7056	; 0x1b90
200008b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b6:	681b      	ldr	r3, [r3, #0]
200008b8:	4618      	mov	r0, r3
200008ba:	f000 ff77 	bl	200017ac <__aeabi_i2f>
200008be:	4604      	mov	r4, r0
200008c0:	f641 43c4 	movw	r3, #7364	; 0x1cc4
200008c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008c8:	681b      	ldr	r3, [r3, #0]
200008ca:	4618      	mov	r0, r3
200008cc:	492d      	ldr	r1, [pc, #180]	; (20000984 <main+0x2c4>)
200008ce:	f001 f875 	bl	200019bc <__aeabi_fdiv>
200008d2:	4603      	mov	r3, r0
200008d4:	4620      	mov	r0, r4
200008d6:	4619      	mov	r1, r3
200008d8:	f000 ffbc 	bl	20001854 <__aeabi_fmul>
200008dc:	4603      	mov	r3, r0
200008de:	4618      	mov	r0, r3
200008e0:	f001 f908 	bl	20001af4 <__aeabi_f2iz>
200008e4:	4603      	mov	r3, r0
200008e6:	647b      	str	r3, [r7, #68]	; 0x44
			newRIGHT_PWM = PERIOD*(right_duty_cycle/100);
200008e8:	f641 3390 	movw	r3, #7056	; 0x1b90
200008ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008f0:	681b      	ldr	r3, [r3, #0]
200008f2:	4618      	mov	r0, r3
200008f4:	f000 ff5a 	bl	200017ac <__aeabi_i2f>
200008f8:	4604      	mov	r4, r0
200008fa:	f641 43c8 	movw	r3, #7368	; 0x1cc8
200008fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000902:	681b      	ldr	r3, [r3, #0]
20000904:	4618      	mov	r0, r3
20000906:	491f      	ldr	r1, [pc, #124]	; (20000984 <main+0x2c4>)
20000908:	f001 f858 	bl	200019bc <__aeabi_fdiv>
2000090c:	4603      	mov	r3, r0
2000090e:	4620      	mov	r0, r4
20000910:	4619      	mov	r1, r3
20000912:	f000 ff9f 	bl	20001854 <__aeabi_fmul>
20000916:	4603      	mov	r3, r0
20000918:	4618      	mov	r0, r3
2000091a:	f001 f8eb 	bl	20001af4 <__aeabi_f2iz>
2000091e:	4603      	mov	r3, r0
20000920:	64bb      	str	r3, [r7, #72]	; 0x48

			newLEFT_PWM -= current_error;
20000922:	6c78      	ldr	r0, [r7, #68]	; 0x44
20000924:	f000 ff42 	bl	200017ac <__aeabi_i2f>
20000928:	4603      	mov	r3, r0
2000092a:	4618      	mov	r0, r3
2000092c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2000092e:	f000 fe87 	bl	20001640 <__aeabi_fsub>
20000932:	4603      	mov	r3, r0
20000934:	4618      	mov	r0, r3
20000936:	f001 f8dd 	bl	20001af4 <__aeabi_f2iz>
2000093a:	4603      	mov	r3, r0
2000093c:	647b      	str	r3, [r7, #68]	; 0x44
			newRIGHT_PWM += current_error;
2000093e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
20000940:	f000 ff34 	bl	200017ac <__aeabi_i2f>
20000944:	4603      	mov	r3, r0
20000946:	4618      	mov	r0, r3
20000948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
2000094a:	f000 fe7b 	bl	20001644 <__addsf3>
2000094e:	4603      	mov	r3, r0
20000950:	4618      	mov	r0, r3
20000952:	f001 f8cf 	bl	20001af4 <__aeabi_f2iz>
20000956:	4603      	mov	r3, r0
20000958:	64bb      	str	r3, [r7, #72]	; 0x48
//
//			LEFT_PWM -= current_error;
//			RIGHT_PWM += current_error;

			//temp bypass
			*RIGHT_MOTOR = newRIGHT_PWM;
2000095a:	f641 4394 	movw	r3, #7316	; 0x1c94
2000095e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000962:	681b      	ldr	r3, [r3, #0]
20000964:	6cba      	ldr	r2, [r7, #72]	; 0x48
20000966:	601a      	str	r2, [r3, #0]
			*LEFT_MOTOR = newLEFT_PWM;
20000968:	f641 4390 	movw	r3, #7312	; 0x1c90
2000096c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000970:	681b      	ldr	r3, [r3, #0]
20000972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
20000974:	601a      	str	r2, [r3, #0]
			continue;
20000976:	bf00      	nop
//		else
//		{
//			*RIGHT_MOTOR = 0;
//			*LEFT_MOTOR = 0;
//		}
	}
20000978:	e741      	b.n	200007fe <main+0x13e>
2000097a:	bf00      	nop
2000097c:	00000000 	.word	0x00000000
20000980:	42480000 	.word	0x42480000
20000984:	42c80000 	.word	0x42c80000

20000988 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000988:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000098c:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000990:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000994:	4298      	cmp	r0, r3
20000996:	d006      	beq.n	200009a6 <MSS_UART_polled_tx+0x1e>
20000998:	f641 43f4 	movw	r3, #7412	; 0x1cf4
2000099c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009a0:	4298      	cmp	r0, r3
200009a2:	d000      	beq.n	200009a6 <MSS_UART_polled_tx+0x1e>
200009a4:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
200009a6:	b901      	cbnz	r1, 200009aa <MSS_UART_polled_tx+0x22>
200009a8:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
200009aa:	b902      	cbnz	r2, 200009ae <MSS_UART_polled_tx+0x26>
200009ac:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
200009ae:	f641 531c 	movw	r3, #7452	; 0x1d1c
200009b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b6:	4298      	cmp	r0, r3
200009b8:	d005      	beq.n	200009c6 <MSS_UART_polled_tx+0x3e>
200009ba:	f641 43f4 	movw	r3, #7412	; 0x1cf4
200009be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009c2:	4298      	cmp	r0, r3
200009c4:	d133      	bne.n	20000a2e <MSS_UART_polled_tx+0xa6>
200009c6:	1e13      	subs	r3, r2, #0
200009c8:	bf18      	it	ne
200009ca:	2301      	movne	r3, #1
200009cc:	2900      	cmp	r1, #0
200009ce:	bf0c      	ite	eq
200009d0:	2300      	moveq	r3, #0
200009d2:	f003 0301 	andne.w	r3, r3, #1
200009d6:	2b00      	cmp	r3, #0
200009d8:	d029      	beq.n	20000a2e <MSS_UART_polled_tx+0xa6>
200009da:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200009de:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
200009e0:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
200009e4:	6803      	ldr	r3, [r0, #0]
200009e6:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
200009e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
200009ec:	ea43 0c0c 	orr.w	ip, r3, ip
200009f0:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
200009f4:	f013 0f20 	tst.w	r3, #32
200009f8:	d017      	beq.n	20000a2a <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
200009fa:	2a0f      	cmp	r2, #15
200009fc:	d904      	bls.n	20000a08 <MSS_UART_polled_tx+0x80>
200009fe:	4656      	mov	r6, sl
20000a00:	46bc      	mov	ip, r7
20000a02:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000a04:	440f      	add	r7, r1
20000a06:	e004      	b.n	20000a12 <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000a08:	b90a      	cbnz	r2, 20000a0e <MSS_UART_polled_tx+0x86>
20000a0a:	4643      	mov	r3, r8
20000a0c:	e00b      	b.n	20000a26 <MSS_UART_polled_tx+0x9e>
20000a0e:	4616      	mov	r6, r2
20000a10:	e7f6      	b.n	20000a00 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000a12:	6804      	ldr	r4, [r0, #0]
20000a14:	5cfd      	ldrb	r5, [r7, r3]
20000a16:	7025      	strb	r5, [r4, #0]
20000a18:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000a1c:	f103 0301 	add.w	r3, r3, #1
20000a20:	429e      	cmp	r6, r3
20000a22:	d8f6      	bhi.n	20000a12 <MSS_UART_polled_tx+0x8a>
20000a24:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
20000a26:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
20000a2a:	2a00      	cmp	r2, #0
20000a2c:	d1da      	bne.n	200009e4 <MSS_UART_polled_tx+0x5c>
    }
}
20000a2e:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
20000a32:	4770      	bx	lr

20000a34 <MSS_UART_polled_tx_string>:
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
20000a34:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t char_idx = 0U;
    uint32_t fill_size;
    uint_fast8_t data_byte;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000a36:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a3e:	4298      	cmp	r0, r3
20000a40:	d006      	beq.n	20000a50 <MSS_UART_polled_tx_string+0x1c>
20000a42:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a4a:	4298      	cmp	r0, r3
20000a4c:	d000      	beq.n	20000a50 <MSS_UART_polled_tx_string+0x1c>
20000a4e:	be00      	bkpt	0x0000
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );
20000a50:	b901      	cbnz	r1, 20000a54 <MSS_UART_polled_tx_string+0x20>
20000a52:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000a54:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a5c:	4298      	cmp	r0, r3
20000a5e:	d005      	beq.n	20000a6c <MSS_UART_polled_tx_string+0x38>
20000a60:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a68:	4298      	cmp	r0, r3
20000a6a:	d128      	bne.n	20000abe <MSS_UART_polled_tx_string+0x8a>
20000a6c:	b339      	cbz	r1, 20000abe <MSS_UART_polled_tx_string+0x8a>
          ( p_sz_string != ( (uint8_t *)0 ) ) )
    {
        /* Get the first data byte from the input buffer */
        data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000a6e:	780d      	ldrb	r5, [r1, #0]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
20000a70:	b32d      	cbz	r5, 20000abe <MSS_UART_polled_tx_string+0x8a>
20000a72:	f04f 0c00 	mov.w	ip, #0

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
20000a76:	4666      	mov	r6, ip
         */
        while ( 0U != data_byte )
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
20000a78:	6804      	ldr	r4, [r0, #0]
20000a7a:	7d23      	ldrb	r3, [r4, #20]
                this_uart->status |= status;
20000a7c:	7a82      	ldrb	r2, [r0, #10]
20000a7e:	ea43 0202 	orr.w	r2, r3, r2
20000a82:	7282      	strb	r2, [r0, #10]
            } while ( !( status & MSS_UART_THRE ) );
20000a84:	f013 0f20 	tst.w	r3, #32
20000a88:	d0f7      	beq.n	20000a7a <MSS_UART_polled_tx_string+0x46>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
20000a8a:	b1c5      	cbz	r5, 20000abe <MSS_UART_polled_tx_string+0x8a>
20000a8c:	4633      	mov	r3, r6
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000a8e:	eb01 070c 	add.w	r7, r1, ip
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
20000a92:	6802      	ldr	r2, [r0, #0]
20000a94:	b2ed      	uxtb	r5, r5
20000a96:	7015      	strb	r5, [r2, #0]
                ++fill_size;
20000a98:	f103 0301 	add.w	r3, r3, #1
20000a9c:	eb03 040c 	add.w	r4, r3, ip
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000aa0:	5cfd      	ldrb	r5, [r7, r3]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
20000aa2:	2b0f      	cmp	r3, #15
20000aa4:	bf8c      	ite	hi
20000aa6:	2200      	movhi	r2, #0
20000aa8:	2201      	movls	r2, #1
20000aaa:	2d00      	cmp	r5, #0
20000aac:	bf0c      	ite	eq
20000aae:	2200      	moveq	r2, #0
20000ab0:	f002 0201 	andne.w	r2, r2, #1
20000ab4:	2a00      	cmp	r2, #0
20000ab6:	d1ec      	bne.n	20000a92 <MSS_UART_polled_tx_string+0x5e>

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
20000ab8:	b10d      	cbz	r5, 20000abe <MSS_UART_polled_tx_string+0x8a>
20000aba:	46a4      	mov	ip, r4
20000abc:	e7dc      	b.n	20000a78 <MSS_UART_polled_tx_string+0x44>
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
            }
        }
    }
}
20000abe:	bcf0      	pop	{r4, r5, r6, r7}
20000ac0:	4770      	bx	lr
20000ac2:	bf00      	nop

20000ac4 <MSS_UART_irq_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000ac4:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000ac6:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ace:	4298      	cmp	r0, r3
20000ad0:	d006      	beq.n	20000ae0 <MSS_UART_irq_tx+0x1c>
20000ad2:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ada:	4298      	cmp	r0, r3
20000adc:	d000      	beq.n	20000ae0 <MSS_UART_irq_tx+0x1c>
20000ade:	be00      	bkpt	0x0000
    ASSERT( pbuff != ((uint8_t *)0) );
20000ae0:	b901      	cbnz	r1, 20000ae4 <MSS_UART_irq_tx+0x20>
20000ae2:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000ae4:	b90a      	cbnz	r2, 20000aea <MSS_UART_irq_tx+0x26>
20000ae6:	be00      	bkpt	0x0000
20000ae8:	e036      	b.n	20000b58 <MSS_UART_irq_tx+0x94>

    if ( ( tx_size > 0U ) && ( pbuff != ((uint8_t *)0) ) &&
20000aea:	2900      	cmp	r1, #0
20000aec:	d034      	beq.n	20000b58 <MSS_UART_irq_tx+0x94>
       ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) )
20000aee:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af6:	4298      	cmp	r0, r3
20000af8:	d005      	beq.n	20000b06 <MSS_UART_irq_tx+0x42>
20000afa:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b02:	4298      	cmp	r0, r3
20000b04:	d128      	bne.n	20000b58 <MSS_UART_irq_tx+0x94>
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
20000b06:	60c1      	str	r1, [r0, #12]
        this_uart->tx_buff_size = tx_size;
20000b08:	6102      	str	r2, [r0, #16]
        this_uart->tx_idx = (uint16_t)0;
20000b0a:	f04f 0300 	mov.w	r3, #0
20000b0e:	6143      	str	r3, [r0, #20]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000b10:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000b12:	b219      	sxth	r1, r3
20000b14:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000b18:	f003 031f 	and.w	r3, r3, #31
20000b1c:	f04f 0201 	mov.w	r2, #1
20000b20:	fa02 f403 	lsl.w	r4, r2, r3
20000b24:	f24e 1300 	movw	r3, #57600	; 0xe100
20000b28:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000b2c:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000b30:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
20000b34:	f640 516d 	movw	r1, #3437	; 0xd6d
20000b38:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000b3c:	6201      	str	r1, [r0, #32]

        /* enables TX interrupt */
        this_uart->hw_reg_bit->IER_ETBEI = (uint32_t)1;
20000b3e:	6841      	ldr	r1, [r0, #4]
20000b40:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000b44:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000b46:	b208      	sxth	r0, r1
20000b48:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000b4c:	f001 011f 	and.w	r1, r1, #31
20000b50:	fa02 f201 	lsl.w	r2, r2, r1
20000b54:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000b58:	bc10      	pop	{r4}
20000b5a:	4770      	bx	lr

20000b5c <MSS_UART_tx_complete>:
)
{
    int8_t ret_value = 0;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000b5c:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b64:	4298      	cmp	r0, r3
20000b66:	d009      	beq.n	20000b7c <MSS_UART_tx_complete+0x20>
20000b68:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b70:	4298      	cmp	r0, r3
20000b72:	d003      	beq.n	20000b7c <MSS_UART_tx_complete+0x20>
20000b74:	be00      	bkpt	0x0000
20000b76:	f04f 0000 	mov.w	r0, #0
20000b7a:	4770      	bx	lr

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000b7c:	6803      	ldr	r3, [r0, #0]
20000b7e:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000b80:	7a82      	ldrb	r2, [r0, #10]
20000b82:	ea43 0202 	orr.w	r2, r3, r2
20000b86:	7282      	strb	r2, [r0, #10]

        if ( ( TX_COMPLETE == this_uart->tx_buff_size ) &&
20000b88:	6902      	ldr	r2, [r0, #16]
20000b8a:	b112      	cbz	r2, 20000b92 <MSS_UART_tx_complete+0x36>
20000b8c:	f04f 0000 	mov.w	r0, #0
20000b90:	4770      	bx	lr
20000b92:	f3c3 1080 	ubfx	r0, r3, #6, #1
        {
            ret_value = (int8_t)1;
        }
    }
    return ret_value;
}
20000b96:	4770      	bx	lr

20000b98 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20000b98:	b410      	push	{r4}
20000b9a:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000b9c:	f641 501c 	movw	r0, #7452	; 0x1d1c
20000ba0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ba4:	4283      	cmp	r3, r0
20000ba6:	d006      	beq.n	20000bb6 <MSS_UART_get_rx+0x1e>
20000ba8:	f641 40f4 	movw	r0, #7412	; 0x1cf4
20000bac:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bb0:	4283      	cmp	r3, r0
20000bb2:	d000      	beq.n	20000bb6 <MSS_UART_get_rx+0x1e>
20000bb4:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
20000bb6:	b901      	cbnz	r1, 20000bba <MSS_UART_get_rx+0x22>
20000bb8:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
20000bba:	b902      	cbnz	r2, 20000bbe <MSS_UART_get_rx+0x26>
20000bbc:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000bbe:	f641 501c 	movw	r0, #7452	; 0x1d1c
20000bc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bc6:	4283      	cmp	r3, r0
20000bc8:	d005      	beq.n	20000bd6 <MSS_UART_get_rx+0x3e>
20000bca:	f641 40f4 	movw	r0, #7412	; 0x1cf4
20000bce:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bd2:	4283      	cmp	r3, r0
20000bd4:	d12a      	bne.n	20000c2c <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
20000bd6:	1e10      	subs	r0, r2, #0
20000bd8:	bf18      	it	ne
20000bda:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000bdc:	2900      	cmp	r1, #0
20000bde:	bf0c      	ite	eq
20000be0:	2400      	moveq	r4, #0
20000be2:	f000 0401 	andne.w	r4, r0, #1
20000be6:	b30c      	cbz	r4, 20000c2c <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20000be8:	681c      	ldr	r4, [r3, #0]
20000bea:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20000bee:	7a9c      	ldrb	r4, [r3, #10]
20000bf0:	ea4c 0404 	orr.w	r4, ip, r4
20000bf4:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000bf6:	ea1c 0f00 	tst.w	ip, r0
20000bfa:	d017      	beq.n	20000c2c <MSS_UART_get_rx+0x94>
20000bfc:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20000c00:	681c      	ldr	r4, [r3, #0]
20000c02:	f894 c000 	ldrb.w	ip, [r4]
20000c06:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
20000c0a:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
20000c0e:	681c      	ldr	r4, [r3, #0]
20000c10:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
20000c14:	7a9c      	ldrb	r4, [r3, #10]
20000c16:	ea4c 0404 	orr.w	r4, ip, r4
20000c1a:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000c1c:	4282      	cmp	r2, r0
20000c1e:	bf94      	ite	ls
20000c20:	2400      	movls	r4, #0
20000c22:	f00c 0401 	andhi.w	r4, ip, #1
20000c26:	2c00      	cmp	r4, #0
20000c28:	d1ea      	bne.n	20000c00 <MSS_UART_get_rx+0x68>
20000c2a:	e001      	b.n	20000c30 <MSS_UART_get_rx+0x98>
20000c2c:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
20000c30:	bc10      	pop	{r4}
20000c32:	4770      	bx	lr

20000c34 <MSS_UART_enable_irq>:
MSS_UART_enable_irq
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
20000c34:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c36:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3e:	4298      	cmp	r0, r3
20000c40:	d007      	beq.n	20000c52 <MSS_UART_enable_irq+0x1e>
20000c42:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c4a:	4298      	cmp	r0, r3
20000c4c:	d001      	beq.n	20000c52 <MSS_UART_enable_irq+0x1e>
20000c4e:	be00      	bkpt	0x0000
20000c50:	e022      	b.n	20000c98 <MSS_UART_enable_irq+0x64>

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000c52:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000c54:	fa0f fc83 	sxth.w	ip, r3
20000c58:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
20000c5c:	f003 031f 	and.w	r3, r3, #31
20000c60:	f04f 0201 	mov.w	r2, #1
20000c64:	fa02 f403 	lsl.w	r4, r2, r3
20000c68:	f24e 1300 	movw	r3, #57600	; 0xe100
20000c6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000c70:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
20000c74:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER |= irq_mask;
20000c78:	6804      	ldr	r4, [r0, #0]
20000c7a:	f894 c004 	ldrb.w	ip, [r4, #4]
20000c7e:	ea41 010c 	orr.w	r1, r1, ip
20000c82:	7121      	strb	r1, [r4, #4]

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000c84:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000c86:	b208      	sxth	r0, r1
20000c88:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000c8c:	f001 011f 	and.w	r1, r1, #31
20000c90:	fa02 f201 	lsl.w	r2, r2, r1
20000c94:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000c98:	bc10      	pop	{r4}
20000c9a:	4770      	bx	lr

20000c9c <MSS_UART_disable_irq>:
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c9c:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca4:	4298      	cmp	r0, r3
20000ca6:	d007      	beq.n	20000cb8 <MSS_UART_disable_irq+0x1c>
20000ca8:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb0:	4298      	cmp	r0, r3
20000cb2:	d001      	beq.n	20000cb8 <MSS_UART_disable_irq+0x1c>
20000cb4:	be00      	bkpt	0x0000
20000cb6:	4770      	bx	lr
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER &= ( (uint8_t)~irq_mask );
20000cb8:	6803      	ldr	r3, [r0, #0]
20000cba:	791a      	ldrb	r2, [r3, #4]
20000cbc:	ea22 0201 	bic.w	r2, r2, r1
20000cc0:	711a      	strb	r2, [r3, #4]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000cc2:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000cc4:	b218      	sxth	r0, r3
20000cc6:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000cca:	f003 031f 	and.w	r3, r3, #31
20000cce:	f04f 0201 	mov.w	r2, #1
20000cd2:	fa02 f203 	lsl.w	r2, r2, r3
20000cd6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000cda:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000cde:	f100 0c60 	add.w	ip, r0, #96	; 0x60
20000ce2:	f843 202c 	str.w	r2, [r3, ip, lsl #2]

        if( irq_mask == IIRF_MASK )
20000ce6:	290f      	cmp	r1, #15
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000ce8:	bf01      	itttt	eq
20000cea:	f24e 1300 	movweq	r3, #57600	; 0xe100
20000cee:	f2ce 0300 	movteq	r3, #57344	; 0xe000
20000cf2:	3020      	addeq	r0, #32
20000cf4:	f843 2020 	streq.w	r2, [r3, r0, lsl #2]
20000cf8:	4770      	bx	lr
20000cfa:	bf00      	nop

20000cfc <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000cfc:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000cfe:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d06:	4298      	cmp	r0, r3
20000d08:	d007      	beq.n	20000d1a <MSS_UART_isr+0x1e>
20000d0a:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d12:	4298      	cmp	r0, r3
20000d14:	d001      	beq.n	20000d1a <MSS_UART_isr+0x1e>
20000d16:	be00      	bkpt	0x0000
20000d18:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000d1a:	6803      	ldr	r3, [r0, #0]
20000d1c:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
20000d1e:	f003 030f 	and.w	r3, r3, #15
20000d22:	2b0c      	cmp	r3, #12
20000d24:	d820      	bhi.n	20000d68 <MSS_UART_isr+0x6c>
20000d26:	e8df f003 	tbb	[pc, r3]
20000d2a:	1f07      	.short	0x1f07
20000d2c:	1f131f0d 	.word	0x1f131f0d
20000d30:	1f1f1f19 	.word	0x1f1f1f19
20000d34:	1f1f      	.short	0x1f1f
20000d36:	13          	.byte	0x13
20000d37:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000d38:	6a43      	ldr	r3, [r0, #36]	; 0x24
20000d3a:	b90b      	cbnz	r3, 20000d40 <MSS_UART_isr+0x44>
20000d3c:	be00      	bkpt	0x0000
20000d3e:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000d40:	4798      	blx	r3
20000d42:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000d44:	6a03      	ldr	r3, [r0, #32]
20000d46:	b90b      	cbnz	r3, 20000d4c <MSS_UART_isr+0x50>
20000d48:	be00      	bkpt	0x0000
20000d4a:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
20000d4c:	4798      	blx	r3
20000d4e:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000d50:	69c3      	ldr	r3, [r0, #28]
20000d52:	b90b      	cbnz	r3, 20000d58 <MSS_UART_isr+0x5c>
20000d54:	be00      	bkpt	0x0000
20000d56:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
20000d58:	4798      	blx	r3
20000d5a:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000d5c:	6983      	ldr	r3, [r0, #24]
20000d5e:	b90b      	cbnz	r3, 20000d64 <MSS_UART_isr+0x68>
20000d60:	be00      	bkpt	0x0000
20000d62:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
20000d64:	4798      	blx	r3
20000d66:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000d68:	be00      	bkpt	0x0000
20000d6a:	bd08      	pop	{r3, pc}

20000d6c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000d6c:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d6e:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d76:	4298      	cmp	r0, r3
20000d78:	d006      	beq.n	20000d88 <default_tx_handler+0x1c>
20000d7a:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d82:	4298      	cmp	r0, r3
20000d84:	d000      	beq.n	20000d88 <default_tx_handler+0x1c>
20000d86:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20000d88:	68c2      	ldr	r2, [r0, #12]
20000d8a:	b902      	cbnz	r2, 20000d8e <default_tx_handler+0x22>
20000d8c:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20000d8e:	6901      	ldr	r1, [r0, #16]
20000d90:	b901      	cbnz	r1, 20000d94 <default_tx_handler+0x28>
20000d92:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000d94:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9c:	4298      	cmp	r0, r3
20000d9e:	d005      	beq.n	20000dac <default_tx_handler+0x40>
20000da0:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000da8:	4298      	cmp	r0, r3
20000daa:	d130      	bne.n	20000e0e <default_tx_handler+0xa2>
20000dac:	2a00      	cmp	r2, #0
20000dae:	d02e      	beq.n	20000e0e <default_tx_handler+0xa2>
20000db0:	2900      	cmp	r1, #0
20000db2:	d02c      	beq.n	20000e0e <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000db4:	6803      	ldr	r3, [r0, #0]
20000db6:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000db8:	7a82      	ldrb	r2, [r0, #10]
20000dba:	ea43 0202 	orr.w	r2, r3, r2
20000dbe:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20000dc0:	f013 0f20 	tst.w	r3, #32
20000dc4:	d01a      	beq.n	20000dfc <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20000dc6:	6902      	ldr	r2, [r0, #16]
20000dc8:	6943      	ldr	r3, [r0, #20]
20000dca:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20000dce:	2b0f      	cmp	r3, #15
20000dd0:	d904      	bls.n	20000ddc <default_tx_handler+0x70>
20000dd2:	f04f 0c10 	mov.w	ip, #16
20000dd6:	f04f 0300 	mov.w	r3, #0
20000dda:	e002      	b.n	20000de2 <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000ddc:	b173      	cbz	r3, 20000dfc <default_tx_handler+0x90>
20000dde:	469c      	mov	ip, r3
20000de0:	e7f9      	b.n	20000dd6 <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20000de2:	6802      	ldr	r2, [r0, #0]
20000de4:	68c4      	ldr	r4, [r0, #12]
20000de6:	6941      	ldr	r1, [r0, #20]
20000de8:	5c61      	ldrb	r1, [r4, r1]
20000dea:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
20000dec:	6942      	ldr	r2, [r0, #20]
20000dee:	f102 0201 	add.w	r2, r2, #1
20000df2:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000df4:	f103 0301 	add.w	r3, r3, #1
20000df8:	4563      	cmp	r3, ip
20000dfa:	d3f2      	bcc.n	20000de2 <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20000dfc:	6942      	ldr	r2, [r0, #20]
20000dfe:	6903      	ldr	r3, [r0, #16]
20000e00:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20000e02:	bf01      	itttt	eq
20000e04:	2300      	moveq	r3, #0
20000e06:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20000e08:	6842      	ldreq	r2, [r0, #4]
20000e0a:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
20000e0e:	bc10      	pop	{r4}
20000e10:	4770      	bx	lr
20000e12:	bf00      	nop

20000e14 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20000e14:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e16:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1e:	4298      	cmp	r0, r3
20000e20:	d006      	beq.n	20000e30 <MSS_UART_set_rx_handler+0x1c>
20000e22:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2a:	4298      	cmp	r0, r3
20000e2c:	d000      	beq.n	20000e30 <MSS_UART_set_rx_handler+0x1c>
20000e2e:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20000e30:	b901      	cbnz	r1, 20000e34 <MSS_UART_set_rx_handler+0x20>
20000e32:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
20000e34:	2ac0      	cmp	r2, #192	; 0xc0
20000e36:	d900      	bls.n	20000e3a <MSS_UART_set_rx_handler+0x26>
20000e38:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000e3a:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e42:	4298      	cmp	r0, r3
20000e44:	d005      	beq.n	20000e52 <MSS_UART_set_rx_handler+0x3e>
20000e46:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e4e:	4298      	cmp	r0, r3
20000e50:	d12f      	bne.n	20000eb2 <MSS_UART_set_rx_handler+0x9e>
20000e52:	2ac0      	cmp	r2, #192	; 0xc0
20000e54:	bf8c      	ite	hi
20000e56:	2300      	movhi	r3, #0
20000e58:	2301      	movls	r3, #1
20000e5a:	2900      	cmp	r1, #0
20000e5c:	bf0c      	ite	eq
20000e5e:	2300      	moveq	r3, #0
20000e60:	f003 0301 	andne.w	r3, r3, #1
20000e64:	b32b      	cbz	r3, 20000eb2 <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
20000e66:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
20000e68:	6803      	ldr	r3, [r0, #0]
20000e6a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
20000e6e:	f042 020a 	orr.w	r2, r2, #10
20000e72:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000e74:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000e76:	b219      	sxth	r1, r3
20000e78:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000e7c:	f003 031f 	and.w	r3, r3, #31
20000e80:	f04f 0201 	mov.w	r2, #1
20000e84:	fa02 f403 	lsl.w	r4, r2, r3
20000e88:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e8c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e90:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000e94:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20000e98:	6841      	ldr	r1, [r0, #4]
20000e9a:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000e9e:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000ea0:	b208      	sxth	r0, r1
20000ea2:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000ea6:	f001 011f 	and.w	r1, r1, #31
20000eaa:	fa02 f201 	lsl.w	r2, r2, r1
20000eae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000eb2:	bc10      	pop	{r4}
20000eb4:	4770      	bx	lr
20000eb6:	bf00      	nop

20000eb8 <MSS_UART_set_loopback>:
(
    mss_uart_instance_t *   this_uart,
    mss_uart_loopback_t     loopback
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000eb8:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec0:	4298      	cmp	r0, r3
20000ec2:	d007      	beq.n	20000ed4 <MSS_UART_set_loopback+0x1c>
20000ec4:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ecc:	4298      	cmp	r0, r3
20000ece:	d001      	beq.n	20000ed4 <MSS_UART_set_loopback+0x1c>
20000ed0:	be00      	bkpt	0x0000
20000ed2:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        if ( loopback == MSS_UART_LOOPBACK_OFF )
20000ed4:	b929      	cbnz	r1, 20000ee2 <MSS_UART_set_loopback+0x2a>
        {
            this_uart->hw_reg_bit->MCR_LOOP = 0U;
20000ed6:	6843      	ldr	r3, [r0, #4]
20000ed8:	f04f 0200 	mov.w	r2, #0
20000edc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000ee0:	4770      	bx	lr
        }
        else
        {
            this_uart->hw_reg_bit->MCR_LOOP = 1U;
20000ee2:	6843      	ldr	r3, [r0, #4]
20000ee4:	f04f 0201 	mov.w	r2, #1
20000ee8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000eec:	4770      	bx	lr
20000eee:	bf00      	nop

20000ef0 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000ef0:	4668      	mov	r0, sp
20000ef2:	f020 0107 	bic.w	r1, r0, #7
20000ef6:	468d      	mov	sp, r1
20000ef8:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
20000efa:	f641 501c 	movw	r0, #7452	; 0x1d1c
20000efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f02:	f7ff fefb 	bl	20000cfc <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000f06:	f24e 1300 	movw	r3, #57600	; 0xe100
20000f0a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000f12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
20000f16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000f1a:	4685      	mov	sp, r0
20000f1c:	4770      	bx	lr
20000f1e:	bf00      	nop

20000f20 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000f20:	4668      	mov	r0, sp
20000f22:	f020 0107 	bic.w	r1, r0, #7
20000f26:	468d      	mov	sp, r1
20000f28:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
20000f2a:	f641 40f4 	movw	r0, #7412	; 0x1cf4
20000f2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f32:	f7ff fee3 	bl	20000cfc <MSS_UART_isr>
20000f36:	f24e 1300 	movw	r3, #57600	; 0xe100
20000f3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
20000f42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
20000f46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000f4a:	4685      	mov	sp, r0
20000f4c:	4770      	bx	lr
20000f4e:	bf00      	nop

20000f50 <MSS_UART_set_rxstatus_handler>:
MSS_UART_set_rxstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000f50:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000f52:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f5a:	4298      	cmp	r0, r3
20000f5c:	d006      	beq.n	20000f6c <MSS_UART_set_rxstatus_handler+0x1c>
20000f5e:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f66:	4298      	cmp	r0, r3
20000f68:	d000      	beq.n	20000f6c <MSS_UART_set_rxstatus_handler+0x1c>
20000f6a:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000f6c:	b901      	cbnz	r1, 20000f70 <MSS_UART_set_rxstatus_handler+0x20>
20000f6e:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000f70:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f78:	4298      	cmp	r0, r3
20000f7a:	d005      	beq.n	20000f88 <MSS_UART_set_rxstatus_handler+0x38>
20000f7c:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f84:	4298      	cmp	r0, r3
20000f86:	d120      	bne.n	20000fca <MSS_UART_set_rxstatus_handler+0x7a>
20000f88:	b1f9      	cbz	r1, 20000fca <MSS_UART_set_rxstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->linests_handler = handler;
20000f8a:	6181      	str	r1, [r0, #24]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000f8c:	8903      	ldrh	r3, [r0, #8]
20000f8e:	b219      	sxth	r1, r3
20000f90:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000f94:	f003 031f 	and.w	r3, r3, #31
20000f98:	f04f 0201 	mov.w	r2, #1
20000f9c:	fa02 f403 	lsl.w	r4, r2, r3
20000fa0:	f24e 1300 	movw	r3, #57600	; 0xe100
20000fa4:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000fa8:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000fac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receiver line status interrupt. */
        this_uart->hw_reg_bit->IER_ELSI = 1U;
20000fb0:	6841      	ldr	r1, [r0, #4]
20000fb2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000fb6:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000fb8:	b208      	sxth	r0, r1
20000fba:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000fbe:	f001 011f 	and.w	r1, r1, #31
20000fc2:	fa02 f201 	lsl.w	r2, r2, r1
20000fc6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000fca:	bc10      	pop	{r4}
20000fcc:	4770      	bx	lr
20000fce:	bf00      	nop

20000fd0 <MSS_UART_set_tx_handler>:
MSS_UART_set_tx_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000fd0:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000fd2:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fda:	4298      	cmp	r0, r3
20000fdc:	d006      	beq.n	20000fec <MSS_UART_set_tx_handler+0x1c>
20000fde:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20000fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fe6:	4298      	cmp	r0, r3
20000fe8:	d000      	beq.n	20000fec <MSS_UART_set_tx_handler+0x1c>
20000fea:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000fec:	b901      	cbnz	r1, 20000ff0 <MSS_UART_set_tx_handler+0x20>
20000fee:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000ff0:	f641 531c 	movw	r3, #7452	; 0x1d1c
20000ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ff8:	4298      	cmp	r0, r3
20000ffa:	d005      	beq.n	20001008 <MSS_UART_set_tx_handler+0x38>
20000ffc:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20001000:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001004:	4298      	cmp	r0, r3
20001006:	d124      	bne.n	20001052 <MSS_UART_set_tx_handler+0x82>
20001008:	b319      	cbz	r1, 20001052 <MSS_UART_set_tx_handler+0x82>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->tx_handler = handler;
2000100a:	6201      	str	r1, [r0, #32]

        /* Make TX buffer info invalid */
        this_uart->tx_buffer = (const uint8_t *)0;
2000100c:	f04f 0300 	mov.w	r3, #0
20001010:	60c3      	str	r3, [r0, #12]
        this_uart->tx_buff_size = 0U;
20001012:	6103      	str	r3, [r0, #16]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20001014:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001016:	b219      	sxth	r1, r3
20001018:	ea4f 1151 	mov.w	r1, r1, lsr #5
2000101c:	f003 031f 	and.w	r3, r3, #31
20001020:	f04f 0201 	mov.w	r2, #1
20001024:	fa02 f403 	lsl.w	r4, r2, r3
20001028:	f24e 1300 	movw	r3, #57600	; 0xe100
2000102c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001030:	f101 0160 	add.w	r1, r1, #96	; 0x60
20001034:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable transmitter holding register Empty interrupt. */
        this_uart->hw_reg_bit->IER_ETBEI = 1U;
20001038:	6841      	ldr	r1, [r0, #4]
2000103a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
2000103e:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001040:	b208      	sxth	r0, r1
20001042:	ea4f 1050 	mov.w	r0, r0, lsr #5
20001046:	f001 011f 	and.w	r1, r1, #31
2000104a:	fa02 f201 	lsl.w	r2, r2, r1
2000104e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20001052:	bc10      	pop	{r4}
20001054:	4770      	bx	lr
20001056:	bf00      	nop

20001058 <MSS_UART_set_modemstatus_handler>:
MSS_UART_set_modemstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20001058:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000105a:	f641 531c 	movw	r3, #7452	; 0x1d1c
2000105e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001062:	4298      	cmp	r0, r3
20001064:	d006      	beq.n	20001074 <MSS_UART_set_modemstatus_handler+0x1c>
20001066:	f641 43f4 	movw	r3, #7412	; 0x1cf4
2000106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000106e:	4298      	cmp	r0, r3
20001070:	d000      	beq.n	20001074 <MSS_UART_set_modemstatus_handler+0x1c>
20001072:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20001074:	b901      	cbnz	r1, 20001078 <MSS_UART_set_modemstatus_handler+0x20>
20001076:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001078:	f641 531c 	movw	r3, #7452	; 0x1d1c
2000107c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001080:	4298      	cmp	r0, r3
20001082:	d005      	beq.n	20001090 <MSS_UART_set_modemstatus_handler+0x38>
20001084:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20001088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000108c:	4298      	cmp	r0, r3
2000108e:	d120      	bne.n	200010d2 <MSS_UART_set_modemstatus_handler+0x7a>
20001090:	b1f9      	cbz	r1, 200010d2 <MSS_UART_set_modemstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->modemsts_handler = handler;
20001092:	6241      	str	r1, [r0, #36]	; 0x24

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20001094:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001096:	b219      	sxth	r1, r3
20001098:	ea4f 1151 	mov.w	r1, r1, lsr #5
2000109c:	f003 031f 	and.w	r3, r3, #31
200010a0:	f04f 0201 	mov.w	r2, #1
200010a4:	fa02 f403 	lsl.w	r4, r2, r3
200010a8:	f24e 1300 	movw	r3, #57600	; 0xe100
200010ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
200010b0:	f101 0160 	add.w	r1, r1, #96	; 0x60
200010b4:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable modem status interrupt. */
        this_uart->hw_reg_bit->IER_EDSSI = 1U;
200010b8:	6841      	ldr	r1, [r0, #4]
200010ba:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
200010be:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200010c0:	b208      	sxth	r0, r1
200010c2:	ea4f 1050 	mov.w	r0, r0, lsr #5
200010c6:	f001 011f 	and.w	r1, r1, #31
200010ca:	fa02 f201 	lsl.w	r2, r2, r1
200010ce:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
200010d2:	bc10      	pop	{r4}
200010d4:	4770      	bx	lr
200010d6:	bf00      	nop

200010d8 <MSS_UART_fill_tx_fifo>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
200010d8:	b410      	push	{r4}
200010da:	4603      	mov	r3, r0
    uint8_t status = 0U;
    size_t size_sent = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200010dc:	f641 501c 	movw	r0, #7452	; 0x1d1c
200010e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200010e4:	4283      	cmp	r3, r0
200010e6:	d006      	beq.n	200010f6 <MSS_UART_fill_tx_fifo+0x1e>
200010e8:	f641 40f4 	movw	r0, #7412	; 0x1cf4
200010ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
200010f0:	4283      	cmp	r3, r0
200010f2:	d000      	beq.n	200010f6 <MSS_UART_fill_tx_fifo+0x1e>
200010f4:	be00      	bkpt	0x0000
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
200010f6:	b901      	cbnz	r1, 200010fa <MSS_UART_fill_tx_fifo+0x22>
200010f8:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0 );
200010fa:	b902      	cbnz	r2, 200010fe <MSS_UART_fill_tx_fifo+0x26>
200010fc:	be00      	bkpt	0x0000

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
200010fe:	f641 501c 	movw	r0, #7452	; 0x1d1c
20001102:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001106:	4283      	cmp	r3, r0
20001108:	d005      	beq.n	20001116 <MSS_UART_fill_tx_fifo+0x3e>
2000110a:	f641 40f4 	movw	r0, #7412	; 0x1cf4
2000110e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001112:	4283      	cmp	r3, r0
20001114:	d126      	bne.n	20001164 <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
20001116:	1e10      	subs	r0, r2, #0
20001118:	bf18      	it	ne
2000111a:	2001      	movne	r0, #1
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
    ASSERT( tx_size > 0 );

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
2000111c:	2900      	cmp	r1, #0
2000111e:	bf0c      	ite	eq
20001120:	2400      	moveq	r4, #0
20001122:	f000 0401 	andne.w	r4, r0, #1
20001126:	b1ec      	cbz	r4, 20001164 <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
    {
        status = this_uart->hw_reg->LSR;
20001128:	681c      	ldr	r4, [r3, #0]
2000112a:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
2000112e:	7a9c      	ldrb	r4, [r3, #10]
20001130:	ea4c 0404 	orr.w	r4, ip, r4
20001134:	729c      	strb	r4, [r3, #10]

        if( status & MSS_UART_THRE )
20001136:	f01c 0f20 	tst.w	ip, #32
2000113a:	d013      	beq.n	20001164 <MSS_UART_fill_tx_fifo+0x8c>
        {
            uint32_t fill_size = TX_FIFO_SIZE;

            if ( tx_size < TX_FIFO_SIZE )
2000113c:	2a0f      	cmp	r2, #15
2000113e:	d904      	bls.n	2000114a <MSS_UART_fill_tx_fifo+0x72>
20001140:	f04f 0410 	mov.w	r4, #16
20001144:	f04f 0000 	mov.w	r0, #0
20001148:	e002      	b.n	20001150 <MSS_UART_fill_tx_fifo+0x78>
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
2000114a:	b158      	cbz	r0, 20001164 <MSS_UART_fill_tx_fifo+0x8c>
2000114c:	4614      	mov	r4, r2
2000114e:	e7f9      	b.n	20001144 <MSS_UART_fill_tx_fifo+0x6c>
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
20001150:	681a      	ldr	r2, [r3, #0]
20001152:	f811 c000 	ldrb.w	ip, [r1, r0]
20001156:	f882 c000 	strb.w	ip, [r2]
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
2000115a:	f100 0001 	add.w	r0, r0, #1
2000115e:	42a0      	cmp	r0, r4
20001160:	d3f6      	bcc.n	20001150 <MSS_UART_fill_tx_fifo+0x78>
20001162:	e001      	b.n	20001168 <MSS_UART_fill_tx_fifo+0x90>
20001164:	f04f 0000 	mov.w	r0, #0
                this_uart->hw_reg->THR = tx_buffer[size_sent];
            }
        }
    }
    return size_sent;
}
20001168:	bc10      	pop	{r4}
2000116a:	4770      	bx	lr

2000116c <MSS_UART_get_rx_status>:
uint8_t
MSS_UART_get_rx_status
(
    mss_uart_instance_t * this_uart
)
{
2000116c:	4602      	mov	r2, r0
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000116e:	f641 531c 	movw	r3, #7452	; 0x1d1c
20001172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001176:	4298      	cmp	r0, r3
20001178:	d009      	beq.n	2000118e <MSS_UART_get_rx_status+0x22>
2000117a:	f641 43f4 	movw	r3, #7412	; 0x1cf4
2000117e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001182:	4298      	cmp	r0, r3
20001184:	d003      	beq.n	2000118e <MSS_UART_get_rx_status+0x22>
20001186:	be00      	bkpt	0x0000
20001188:	f04f 00ff 	mov.w	r0, #255	; 0xff
2000118c:	4770      	bx	lr
         * Bit 2 - Parity error status
         * Bit 3 - Frame error status
         * Bit 4 - Break interrupt indicator
         * Bit 7 - FIFO data error status
         */
        this_uart->status |= (this_uart->hw_reg->LSR);
2000118e:	6813      	ldr	r3, [r2, #0]
20001190:	7d18      	ldrb	r0, [r3, #20]
        status = (this_uart->status & STATUS_ERROR_MASK );
20001192:	7a93      	ldrb	r3, [r2, #10]
20001194:	ea40 0003 	orr.w	r0, r0, r3
20001198:	f000 009e 	and.w	r0, r0, #158	; 0x9e
        /* Clear the sticky status after reading */
        this_uart->status = 0U;
2000119c:	f04f 0300 	mov.w	r3, #0
200011a0:	7293      	strb	r3, [r2, #10]
    }
    return status;
}
200011a2:	4770      	bx	lr

200011a4 <MSS_UART_get_modem_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200011a4:	f641 531c 	movw	r3, #7452	; 0x1d1c
200011a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ac:	4298      	cmp	r0, r3
200011ae:	d009      	beq.n	200011c4 <MSS_UART_get_modem_status+0x20>
200011b0:	f641 43f4 	movw	r3, #7412	; 0x1cf4
200011b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011b8:	4298      	cmp	r0, r3
200011ba:	d003      	beq.n	200011c4 <MSS_UART_get_modem_status+0x20>
200011bc:	be00      	bkpt	0x0000
200011be:	f04f 00ff 	mov.w	r0, #255	; 0xff
200011c2:	4770      	bx	lr
         * Bit 4 - Clear To Send
         * Bit 5 - Data Set Ready
         * Bit 6 - Ring Indicator
         * Bit 7 - Data Carrier Detect
         */
        status = this_uart->hw_reg->MSR;
200011c4:	6803      	ldr	r3, [r0, #0]
200011c6:	7e18      	ldrb	r0, [r3, #24]
    }
    return status;
}
200011c8:	4770      	bx	lr
200011ca:	bf00      	nop

200011cc <MSS_UART_get_tx_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_TX_BUSY;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200011cc:	f641 531c 	movw	r3, #7452	; 0x1d1c
200011d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011d4:	4298      	cmp	r0, r3
200011d6:	d009      	beq.n	200011ec <MSS_UART_get_tx_status+0x20>
200011d8:	f641 43f4 	movw	r3, #7412	; 0x1cf4
200011dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011e0:	4298      	cmp	r0, r3
200011e2:	d003      	beq.n	200011ec <MSS_UART_get_tx_status+0x20>
200011e4:	be00      	bkpt	0x0000
200011e6:	f04f 0000 	mov.w	r0, #0
200011ea:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
200011ec:	6803      	ldr	r3, [r0, #0]
200011ee:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
200011f0:	7a82      	ldrb	r2, [r0, #10]
200011f2:	ea43 0202 	orr.w	r2, r3, r2
200011f6:	7282      	strb	r2, [r0, #10]
        /*
         * Extract the transmit status bits from the UART's Line Status Register.
         * Bit 5 - Transmitter Holding Register/FIFO Empty (THRE) status. (If = 1, TX FIFO is empty)
         * Bit 6 - Transmitter Empty (TEMT) status. (If = 1, both TX FIFO and shift register are empty)
         */
        status &= ( MSS_UART_THRE | MSS_UART_TEMT );
200011f8:	f003 0060 	and.w	r0, r3, #96	; 0x60
    }
    return status;
}
200011fc:	4770      	bx	lr
200011fe:	bf00      	nop

20001200 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001200:	b570      	push	{r4, r5, r6, lr}
20001202:	4604      	mov	r4, r0
20001204:	460d      	mov	r5, r1
20001206:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001208:	f641 531c 	movw	r3, #7452	; 0x1d1c
2000120c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001210:	4298      	cmp	r0, r3
20001212:	d006      	beq.n	20001222 <MSS_UART_init+0x22>
20001214:	f641 43f4 	movw	r3, #7412	; 0x1cf4
20001218:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000121c:	4298      	cmp	r0, r3
2000121e:	d000      	beq.n	20001222 <MSS_UART_init+0x22>
20001220:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20001222:	b905      	cbnz	r5, 20001226 <MSS_UART_init+0x26>
20001224:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20001226:	f000 f983 	bl	20001530 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
2000122a:	f641 531c 	movw	r3, #7452	; 0x1d1c
2000122e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001232:	429c      	cmp	r4, r3
20001234:	d126      	bne.n	20001284 <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
20001236:	f641 531c 	movw	r3, #7452	; 0x1d1c
2000123a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20001242:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20001244:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20001248:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
2000124a:	f04f 020a 	mov.w	r2, #10
2000124e:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20001250:	f641 43a4 	movw	r3, #7332	; 0x1ca4
20001254:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001258:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
2000125a:	f242 0300 	movw	r3, #8192	; 0x2000
2000125e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20001268:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000126a:	f24e 1200 	movw	r2, #57600	; 0xe100
2000126e:	f2ce 0200 	movt	r2, #57344	; 0xe000
20001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
20001276:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
2000127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000127c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20001280:	631a      	str	r2, [r3, #48]	; 0x30
20001282:	e025      	b.n	200012d0 <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20001284:	f240 0300 	movw	r3, #0
20001288:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000128c:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
2000128e:	f240 0300 	movw	r3, #0
20001292:	f2c4 2320 	movt	r3, #16928	; 0x4220
20001296:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
20001298:	f04f 030b 	mov.w	r3, #11
2000129c:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
2000129e:	f641 43a8 	movw	r3, #7336	; 0x1ca8
200012a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012a6:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
200012a8:	f242 0300 	movw	r3, #8192	; 0x2000
200012ac:	f2ce 0304 	movt	r3, #57348	; 0xe004
200012b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200012b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200012b6:	631a      	str	r2, [r3, #48]	; 0x30
200012b8:	f24e 1200 	movw	r2, #57600	; 0xe100
200012bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
200012c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
200012c4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
200012c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200012ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
200012ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
200012d0:	6823      	ldr	r3, [r4, #0]
200012d2:	f04f 0200 	mov.w	r2, #0
200012d6:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
200012d8:	b915      	cbnz	r5, 200012e0 <MSS_UART_init+0xe0>
200012da:	f04f 0501 	mov.w	r5, #1
200012de:	e00f      	b.n	20001300 <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
200012e0:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
200012e4:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
200012e8:	ea4f 1515 	mov.w	r5, r5, lsr #4
200012ec:	bf18      	it	ne
200012ee:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
200012f0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
200012f4:	bf38      	it	cc
200012f6:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
200012f8:	d302      	bcc.n	20001300 <MSS_UART_init+0x100>
200012fa:	be00      	bkpt	0x0000
200012fc:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20001300:	6863      	ldr	r3, [r4, #4]
20001302:	f04f 0201 	mov.w	r2, #1
20001306:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
2000130a:	6823      	ldr	r3, [r4, #0]
2000130c:	ea4f 2215 	mov.w	r2, r5, lsr #8
20001310:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001312:	6823      	ldr	r3, [r4, #0]
20001314:	b2ed      	uxtb	r5, r5
20001316:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20001318:	6862      	ldr	r2, [r4, #4]
2000131a:	f04f 0300 	mov.w	r3, #0
2000131e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20001322:	6822      	ldr	r2, [r4, #0]
20001324:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
20001326:	6822      	ldr	r2, [r4, #0]
20001328:	f04f 010e 	mov.w	r1, #14
2000132c:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
2000132e:	6862      	ldr	r2, [r4, #4]
20001330:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20001334:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
20001336:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
20001338:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
2000133a:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
2000133c:	f640 526d 	movw	r2, #3437	; 0xd6d
20001340:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001344:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20001346:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20001348:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
2000134a:	72a3      	strb	r3, [r4, #10]
}
2000134c:	bd70      	pop	{r4, r5, r6, pc}
2000134e:	bf00      	nop

20001350 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001350:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001352:	f242 0300 	movw	r3, #8192	; 0x2000
20001356:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000135a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000135c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001360:	631a      	str	r2, [r3, #48]	; 0x30
20001362:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001366:	f641 309c 	movw	r0, #7068	; 0x1b9c
2000136a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000136e:	f04f 0c01 	mov.w	ip, #1
20001372:	f24e 1400 	movw	r4, #57600	; 0xe100
20001376:	f2ce 0400 	movt	r4, #57344	; 0xe000
2000137a:	5ac2      	ldrh	r2, [r0, r3]
2000137c:	b211      	sxth	r1, r2
2000137e:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001382:	f002 021f 	and.w	r2, r2, #31
20001386:	fa0c f202 	lsl.w	r2, ip, r2
2000138a:	f101 0160 	add.w	r1, r1, #96	; 0x60
2000138e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
20001392:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001396:	2b40      	cmp	r3, #64	; 0x40
20001398:	d1ef      	bne.n	2000137a <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
2000139a:	f242 0300 	movw	r3, #8192	; 0x2000
2000139e:	f2ce 0304 	movt	r3, #57348	; 0xe004
200013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200013a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200013a8:	631a      	str	r2, [r3, #48]	; 0x30
}
200013aa:	bc10      	pop	{r4}
200013ac:	4770      	bx	lr
200013ae:	bf00      	nop

200013b0 <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200013b0:	281f      	cmp	r0, #31
200013b2:	d901      	bls.n	200013b8 <MSS_GPIO_config+0x8>
200013b4:	be00      	bkpt	0x0000
200013b6:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
200013b8:	f641 339c 	movw	r3, #7068	; 0x1b9c
200013bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
200013c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
200013c6:	6019      	str	r1, [r3, #0]
200013c8:	4770      	bx	lr
200013ca:	bf00      	nop

200013cc <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200013cc:	281f      	cmp	r0, #31
200013ce:	d901      	bls.n	200013d4 <MSS_GPIO_set_output+0x8>
200013d0:	be00      	bkpt	0x0000
200013d2:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
200013d4:	f240 0300 	movw	r3, #0
200013d8:	f2c4 2326 	movt	r3, #16934	; 0x4226
200013dc:	f500 6088 	add.w	r0, r0, #1088	; 0x440
200013e0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
200013e4:	4770      	bx	lr
200013e6:	bf00      	nop

200013e8 <MSS_GPIO_drive_inout>:
{
    uint32_t outputs_state;
    uint32_t config;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200013e8:	281f      	cmp	r0, #31
200013ea:	d901      	bls.n	200013f0 <MSS_GPIO_drive_inout+0x8>
200013ec:	be00      	bkpt	0x0000
200013ee:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        switch( inout_state )
200013f0:	2901      	cmp	r1, #1
200013f2:	d003      	beq.n	200013fc <MSS_GPIO_drive_inout+0x14>
200013f4:	b1e1      	cbz	r1, 20001430 <MSS_GPIO_drive_inout+0x48>
200013f6:	2902      	cmp	r1, #2
200013f8:	d140      	bne.n	2000147c <MSS_GPIO_drive_inout+0x94>
200013fa:	e033      	b.n	20001464 <MSS_GPIO_drive_inout+0x7c>
        {
        case MSS_GPIO_DRIVE_HIGH:
            /* Set output high */
            outputs_state = GPIO->GPIO_OUT;
200013fc:	f243 0300 	movw	r3, #12288	; 0x3000
20001400:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001404:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
            outputs_state |= (uint32_t)1 << gpio_idx;
20001408:	f04f 0201 	mov.w	r2, #1
2000140c:	fa02 f200 	lsl.w	r2, r2, r0
20001410:	ea42 0201 	orr.w	r2, r2, r1
            GPIO->GPIO_OUT = outputs_state;
20001414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            /* Enable output buffer */
            config = *(g_config_reg_lut[gpio_idx]);
20001418:	f641 339c 	movw	r3, #7068	; 0x1b9c
2000141c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
20001424:	6c03      	ldr	r3, [r0, #64]	; 0x40
20001426:	681a      	ldr	r2, [r3, #0]
            config |= OUTPUT_BUFFER_ENABLE_MASK;
20001428:	f042 0204 	orr.w	r2, r2, #4
            *(g_config_reg_lut[gpio_idx]) = config;
2000142c:	601a      	str	r2, [r3, #0]
            break;
2000142e:	4770      	bx	lr
            
        case MSS_GPIO_DRIVE_LOW:
            /* Set output low */
            outputs_state = GPIO->GPIO_OUT;
20001430:	f243 0300 	movw	r3, #12288	; 0x3000
20001434:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001438:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
            outputs_state &= ~((uint32_t)((uint32_t)1 << gpio_idx));
2000143c:	f04f 0201 	mov.w	r2, #1
20001440:	fa02 f200 	lsl.w	r2, r2, r0
20001444:	ea21 0202 	bic.w	r2, r1, r2
            GPIO->GPIO_OUT = outputs_state;
20001448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            /* Enable output buffer */
            config = *(g_config_reg_lut[gpio_idx]);
2000144c:	f641 339c 	movw	r3, #7068	; 0x1b9c
20001450:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
20001458:	6c03      	ldr	r3, [r0, #64]	; 0x40
2000145a:	681a      	ldr	r2, [r3, #0]
            config |= OUTPUT_BUFFER_ENABLE_MASK;
2000145c:	f042 0204 	orr.w	r2, r2, #4
            *(g_config_reg_lut[gpio_idx]) = config;
20001460:	601a      	str	r2, [r3, #0]
            break;
20001462:	4770      	bx	lr
            
        case MSS_GPIO_HIGH_Z:
            /* Disable output buffer */
            config = *(g_config_reg_lut[gpio_idx]);
20001464:	f641 339c 	movw	r3, #7068	; 0x1b9c
20001468:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000146c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
20001470:	6c03      	ldr	r3, [r0, #64]	; 0x40
20001472:	681a      	ldr	r2, [r3, #0]
            config &= ~OUTPUT_BUFFER_ENABLE_MASK;
20001474:	f022 0204 	bic.w	r2, r2, #4
            *(g_config_reg_lut[gpio_idx]) = config;
20001478:	601a      	str	r2, [r3, #0]
            break;
2000147a:	4770      	bx	lr
            
        default:
            ASSERT(0);
2000147c:	be00      	bkpt	0x0000
2000147e:	4770      	bx	lr

20001480 <MSS_GPIO_enable_irq>:
)
{
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001480:	281f      	cmp	r0, #31
20001482:	d901      	bls.n	20001488 <MSS_GPIO_enable_irq+0x8>
20001484:	be00      	bkpt	0x0000
20001486:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20001488:	f641 339c 	movw	r3, #7068	; 0x1b9c
2000148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001490:	eb03 0280 	add.w	r2, r3, r0, lsl #2
20001494:	6c12      	ldr	r2, [r2, #64]	; 0x40
20001496:	6811      	ldr	r1, [r2, #0]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
20001498:	f041 0108 	orr.w	r1, r1, #8
2000149c:	6011      	str	r1, [r2, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
2000149e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200014a2:	b21a      	sxth	r2, r3
200014a4:	ea4f 1252 	mov.w	r2, r2, lsr #5
200014a8:	f003 031f 	and.w	r3, r3, #31
200014ac:	f04f 0101 	mov.w	r1, #1
200014b0:	fa01 f103 	lsl.w	r1, r1, r3
200014b4:	f24e 1300 	movw	r3, #57600	; 0xe100
200014b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
200014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
200014c0:	4770      	bx	lr
200014c2:	bf00      	nop

200014c4 <MSS_GPIO_disable_irq>:
)
{
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200014c4:	281f      	cmp	r0, #31
200014c6:	d901      	bls.n	200014cc <MSS_GPIO_disable_irq+0x8>
200014c8:	be00      	bkpt	0x0000
200014ca:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
200014cc:	f641 339c 	movw	r3, #7068	; 0x1b9c
200014d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
200014d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
200014da:	681a      	ldr	r2, [r3, #0]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value & ~GPIO_INT_ENABLE_MASK);
200014dc:	f022 0208 	bic.w	r2, r2, #8
200014e0:	601a      	str	r2, [r3, #0]
200014e2:	4770      	bx	lr

200014e4 <MSS_GPIO_clear_irq>:
    mss_gpio_id_t port_id
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200014e4:	281f      	cmp	r0, #31
200014e6:	d901      	bls.n	200014ec <MSS_GPIO_clear_irq+0x8>
200014e8:	be00      	bkpt	0x0000
200014ea:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200014ec:	f04f 0201 	mov.w	r2, #1
200014f0:	fa02 f100 	lsl.w	r1, r2, r0
200014f4:	f243 0300 	movw	r3, #12288	; 0x3000
200014f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
200014fc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
20001500:	f641 339c 	movw	r3, #7068	; 0x1b9c
20001504:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001508:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000150c:	b219      	sxth	r1, r3
2000150e:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001512:	f003 031f 	and.w	r3, r3, #31
20001516:	fa02 f203 	lsl.w	r2, r2, r3
2000151a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000151e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001522:	f101 0160 	add.w	r1, r1, #96	; 0x60
20001526:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
2000152a:	4770      	bx	lr

2000152c <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
2000152c:	4770      	bx	lr
2000152e:	bf00      	nop

20001530 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20001530:	b430      	push	{r4, r5}
20001532:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20001534:	f641 435c 	movw	r3, #7260	; 0x1c5c
20001538:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000153c:	46ec      	mov	ip, sp
2000153e:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20001540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20001544:	f242 0300 	movw	r3, #8192	; 0x2000
20001548:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000154c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000154e:	f002 020c 	and.w	r2, r2, #12
20001552:	a904      	add	r1, sp, #16
20001554:	440a      	add	r2, r1
20001556:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
2000155a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000155c:	f3c2 1201 	ubfx	r2, r2, #4, #2
20001560:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20001564:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
20001568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000156a:	f3c2 1281 	ubfx	r2, r2, #6, #2
2000156e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20001572:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20001576:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
2000157a:	f3c1 2104 	ubfx	r1, r1, #8, #5
2000157e:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
20001582:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
20001586:	bf18      	it	ne
20001588:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
2000158a:	f240 2330 	movw	r3, #560	; 0x230
2000158e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001592:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
20001594:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
20001598:	f241 13cf 	movw	r3, #4559	; 0x11cf
2000159c:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
200015a0:	429a      	cmp	r2, r3
200015a2:	d105      	bne.n	200015b0 <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
200015a4:	f64e 732c 	movw	r3, #61228	; 0xef2c
200015a8:	f2c6 0301 	movt	r3, #24577	; 0x6001
200015ac:	681a      	ldr	r2, [r3, #0]
200015ae:	e028      	b.n	20001602 <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
200015b0:	f640 031c 	movw	r3, #2076	; 0x81c
200015b4:	f2c6 0308 	movt	r3, #24584	; 0x6008
200015b8:	681a      	ldr	r2, [r3, #0]
200015ba:	f244 3341 	movw	r3, #17217	; 0x4341
200015be:	f6c4 4354 	movt	r3, #19540	; 0x4c54
200015c2:	429a      	cmp	r2, r3
200015c4:	d11e      	bne.n	20001604 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
200015c6:	f640 0340 	movw	r3, #2112	; 0x840
200015ca:	f2c6 0308 	movt	r3, #24584	; 0x6008
200015ce:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
200015d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
200015d4:	f240 3300 	movw	r3, #768	; 0x300
200015d8:	f2c0 0301 	movt	r3, #1
200015dc:	429a      	cmp	r2, r3
200015de:	d911      	bls.n	20001604 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
200015e0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
200015e4:	d205      	bcs.n	200015f2 <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
200015e6:	f241 632c 	movw	r3, #5676	; 0x162c
200015ea:	f2c6 0308 	movt	r3, #24584	; 0x6008
200015ee:	681a      	ldr	r2, [r3, #0]
200015f0:	e007      	b.n	20001602 <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
200015f2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
200015f6:	d205      	bcs.n	20001604 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
200015f8:	f641 63ac 	movw	r3, #7852	; 0x1eac
200015fc:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001600:	681a      	ldr	r2, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
20001602:	b922      	cbnz	r2, 2000160e <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
20001604:	be00      	bkpt	0x0000
20001606:	f647 0240 	movw	r2, #30784	; 0x7840
2000160a:	f2c0 127d 	movt	r2, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
2000160e:	f641 43a0 	movw	r3, #7328	; 0x1ca0
20001612:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001616:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
20001618:	fbb2 f5f5 	udiv	r5, r2, r5
2000161c:	605d      	str	r5, [r3, #4]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
2000161e:	fbb2 f4f4 	udiv	r4, r2, r4
20001622:	609c      	str	r4, [r3, #8]
    g_FrequencyACE = SystemCoreClock / AceDiv;
20001624:	fbb2 f0f0 	udiv	r0, r2, r0
20001628:	60d8      	str	r0, [r3, #12]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
2000162a:	fbb2 f1f1 	udiv	r1, r2, r1
2000162e:	6119      	str	r1, [r3, #16]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20001630:	615a      	str	r2, [r3, #20]
}
20001632:	b004      	add	sp, #16
20001634:	bc30      	pop	{r4, r5}
20001636:	4770      	bx	lr

20001638 <__aeabi_frsub>:
20001638:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
2000163c:	e002      	b.n	20001644 <__addsf3>
2000163e:	bf00      	nop

20001640 <__aeabi_fsub>:
20001640:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20001644 <__addsf3>:
20001644:	0042      	lsls	r2, r0, #1
20001646:	bf1f      	itttt	ne
20001648:	ea5f 0341 	movsne.w	r3, r1, lsl #1
2000164c:	ea92 0f03 	teqne	r2, r3
20001650:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20001654:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20001658:	d06a      	beq.n	20001730 <__addsf3+0xec>
2000165a:	ea4f 6212 	mov.w	r2, r2, lsr #24
2000165e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20001662:	bfc1      	itttt	gt
20001664:	18d2      	addgt	r2, r2, r3
20001666:	4041      	eorgt	r1, r0
20001668:	4048      	eorgt	r0, r1
2000166a:	4041      	eorgt	r1, r0
2000166c:	bfb8      	it	lt
2000166e:	425b      	neglt	r3, r3
20001670:	2b19      	cmp	r3, #25
20001672:	bf88      	it	hi
20001674:	4770      	bxhi	lr
20001676:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
2000167a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2000167e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20001682:	bf18      	it	ne
20001684:	4240      	negne	r0, r0
20001686:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000168a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
2000168e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20001692:	bf18      	it	ne
20001694:	4249      	negne	r1, r1
20001696:	ea92 0f03 	teq	r2, r3
2000169a:	d03f      	beq.n	2000171c <__addsf3+0xd8>
2000169c:	f1a2 0201 	sub.w	r2, r2, #1
200016a0:	fa41 fc03 	asr.w	ip, r1, r3
200016a4:	eb10 000c 	adds.w	r0, r0, ip
200016a8:	f1c3 0320 	rsb	r3, r3, #32
200016ac:	fa01 f103 	lsl.w	r1, r1, r3
200016b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200016b4:	d502      	bpl.n	200016bc <__addsf3+0x78>
200016b6:	4249      	negs	r1, r1
200016b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
200016bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
200016c0:	d313      	bcc.n	200016ea <__addsf3+0xa6>
200016c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
200016c6:	d306      	bcc.n	200016d6 <__addsf3+0x92>
200016c8:	0840      	lsrs	r0, r0, #1
200016ca:	ea4f 0131 	mov.w	r1, r1, rrx
200016ce:	f102 0201 	add.w	r2, r2, #1
200016d2:	2afe      	cmp	r2, #254	; 0xfe
200016d4:	d251      	bcs.n	2000177a <__addsf3+0x136>
200016d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
200016da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200016de:	bf08      	it	eq
200016e0:	f020 0001 	biceq.w	r0, r0, #1
200016e4:	ea40 0003 	orr.w	r0, r0, r3
200016e8:	4770      	bx	lr
200016ea:	0049      	lsls	r1, r1, #1
200016ec:	eb40 0000 	adc.w	r0, r0, r0
200016f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
200016f4:	f1a2 0201 	sub.w	r2, r2, #1
200016f8:	d1ed      	bne.n	200016d6 <__addsf3+0x92>
200016fa:	fab0 fc80 	clz	ip, r0
200016fe:	f1ac 0c08 	sub.w	ip, ip, #8
20001702:	ebb2 020c 	subs.w	r2, r2, ip
20001706:	fa00 f00c 	lsl.w	r0, r0, ip
2000170a:	bfaa      	itet	ge
2000170c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20001710:	4252      	neglt	r2, r2
20001712:	4318      	orrge	r0, r3
20001714:	bfbc      	itt	lt
20001716:	40d0      	lsrlt	r0, r2
20001718:	4318      	orrlt	r0, r3
2000171a:	4770      	bx	lr
2000171c:	f092 0f00 	teq	r2, #0
20001720:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20001724:	bf06      	itte	eq
20001726:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
2000172a:	3201      	addeq	r2, #1
2000172c:	3b01      	subne	r3, #1
2000172e:	e7b5      	b.n	2000169c <__addsf3+0x58>
20001730:	ea4f 0341 	mov.w	r3, r1, lsl #1
20001734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20001738:	bf18      	it	ne
2000173a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
2000173e:	d021      	beq.n	20001784 <__addsf3+0x140>
20001740:	ea92 0f03 	teq	r2, r3
20001744:	d004      	beq.n	20001750 <__addsf3+0x10c>
20001746:	f092 0f00 	teq	r2, #0
2000174a:	bf08      	it	eq
2000174c:	4608      	moveq	r0, r1
2000174e:	4770      	bx	lr
20001750:	ea90 0f01 	teq	r0, r1
20001754:	bf1c      	itt	ne
20001756:	2000      	movne	r0, #0
20001758:	4770      	bxne	lr
2000175a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
2000175e:	d104      	bne.n	2000176a <__addsf3+0x126>
20001760:	0040      	lsls	r0, r0, #1
20001762:	bf28      	it	cs
20001764:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
20001768:	4770      	bx	lr
2000176a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
2000176e:	bf3c      	itt	cc
20001770:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20001774:	4770      	bxcc	lr
20001776:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
2000177a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
2000177e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20001782:	4770      	bx	lr
20001784:	ea7f 6222 	mvns.w	r2, r2, asr #24
20001788:	bf16      	itet	ne
2000178a:	4608      	movne	r0, r1
2000178c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20001790:	4601      	movne	r1, r0
20001792:	0242      	lsls	r2, r0, #9
20001794:	bf06      	itte	eq
20001796:	ea5f 2341 	movseq.w	r3, r1, lsl #9
2000179a:	ea90 0f01 	teqeq	r0, r1
2000179e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
200017a2:	4770      	bx	lr

200017a4 <__aeabi_ui2f>:
200017a4:	f04f 0300 	mov.w	r3, #0
200017a8:	e004      	b.n	200017b4 <__aeabi_i2f+0x8>
200017aa:	bf00      	nop

200017ac <__aeabi_i2f>:
200017ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
200017b0:	bf48      	it	mi
200017b2:	4240      	negmi	r0, r0
200017b4:	ea5f 0c00 	movs.w	ip, r0
200017b8:	bf08      	it	eq
200017ba:	4770      	bxeq	lr
200017bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
200017c0:	4601      	mov	r1, r0
200017c2:	f04f 0000 	mov.w	r0, #0
200017c6:	e01c      	b.n	20001802 <__aeabi_l2f+0x2a>

200017c8 <__aeabi_ul2f>:
200017c8:	ea50 0201 	orrs.w	r2, r0, r1
200017cc:	bf08      	it	eq
200017ce:	4770      	bxeq	lr
200017d0:	f04f 0300 	mov.w	r3, #0
200017d4:	e00a      	b.n	200017ec <__aeabi_l2f+0x14>
200017d6:	bf00      	nop

200017d8 <__aeabi_l2f>:
200017d8:	ea50 0201 	orrs.w	r2, r0, r1
200017dc:	bf08      	it	eq
200017de:	4770      	bxeq	lr
200017e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
200017e4:	d502      	bpl.n	200017ec <__aeabi_l2f+0x14>
200017e6:	4240      	negs	r0, r0
200017e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200017ec:	ea5f 0c01 	movs.w	ip, r1
200017f0:	bf02      	ittt	eq
200017f2:	4684      	moveq	ip, r0
200017f4:	4601      	moveq	r1, r0
200017f6:	2000      	moveq	r0, #0
200017f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
200017fc:	bf08      	it	eq
200017fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
20001802:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
20001806:	fabc f28c 	clz	r2, ip
2000180a:	3a08      	subs	r2, #8
2000180c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20001810:	db10      	blt.n	20001834 <__aeabi_l2f+0x5c>
20001812:	fa01 fc02 	lsl.w	ip, r1, r2
20001816:	4463      	add	r3, ip
20001818:	fa00 fc02 	lsl.w	ip, r0, r2
2000181c:	f1c2 0220 	rsb	r2, r2, #32
20001820:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20001824:	fa20 f202 	lsr.w	r2, r0, r2
20001828:	eb43 0002 	adc.w	r0, r3, r2
2000182c:	bf08      	it	eq
2000182e:	f020 0001 	biceq.w	r0, r0, #1
20001832:	4770      	bx	lr
20001834:	f102 0220 	add.w	r2, r2, #32
20001838:	fa01 fc02 	lsl.w	ip, r1, r2
2000183c:	f1c2 0220 	rsb	r2, r2, #32
20001840:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
20001844:	fa21 f202 	lsr.w	r2, r1, r2
20001848:	eb43 0002 	adc.w	r0, r3, r2
2000184c:	bf08      	it	eq
2000184e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20001852:	4770      	bx	lr

20001854 <__aeabi_fmul>:
20001854:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001858:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
2000185c:	bf1e      	ittt	ne
2000185e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20001862:	ea92 0f0c 	teqne	r2, ip
20001866:	ea93 0f0c 	teqne	r3, ip
2000186a:	d06f      	beq.n	2000194c <__aeabi_fmul+0xf8>
2000186c:	441a      	add	r2, r3
2000186e:	ea80 0c01 	eor.w	ip, r0, r1
20001872:	0240      	lsls	r0, r0, #9
20001874:	bf18      	it	ne
20001876:	ea5f 2141 	movsne.w	r1, r1, lsl #9
2000187a:	d01e      	beq.n	200018ba <__aeabi_fmul+0x66>
2000187c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20001880:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20001884:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20001888:	fba0 3101 	umull	r3, r1, r0, r1
2000188c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20001890:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20001894:	bf3e      	ittt	cc
20001896:	0049      	lslcc	r1, r1, #1
20001898:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
2000189c:	005b      	lslcc	r3, r3, #1
2000189e:	ea40 0001 	orr.w	r0, r0, r1
200018a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
200018a6:	2afd      	cmp	r2, #253	; 0xfd
200018a8:	d81d      	bhi.n	200018e6 <__aeabi_fmul+0x92>
200018aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
200018ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200018b2:	bf08      	it	eq
200018b4:	f020 0001 	biceq.w	r0, r0, #1
200018b8:	4770      	bx	lr
200018ba:	f090 0f00 	teq	r0, #0
200018be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200018c2:	bf08      	it	eq
200018c4:	0249      	lsleq	r1, r1, #9
200018c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200018ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
200018ce:	3a7f      	subs	r2, #127	; 0x7f
200018d0:	bfc2      	ittt	gt
200018d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200018d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200018da:	4770      	bxgt	lr
200018dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200018e0:	f04f 0300 	mov.w	r3, #0
200018e4:	3a01      	subs	r2, #1
200018e6:	dc5d      	bgt.n	200019a4 <__aeabi_fmul+0x150>
200018e8:	f112 0f19 	cmn.w	r2, #25
200018ec:	bfdc      	itt	le
200018ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
200018f2:	4770      	bxle	lr
200018f4:	f1c2 0200 	rsb	r2, r2, #0
200018f8:	0041      	lsls	r1, r0, #1
200018fa:	fa21 f102 	lsr.w	r1, r1, r2
200018fe:	f1c2 0220 	rsb	r2, r2, #32
20001902:	fa00 fc02 	lsl.w	ip, r0, r2
20001906:	ea5f 0031 	movs.w	r0, r1, rrx
2000190a:	f140 0000 	adc.w	r0, r0, #0
2000190e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20001912:	bf08      	it	eq
20001914:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20001918:	4770      	bx	lr
2000191a:	f092 0f00 	teq	r2, #0
2000191e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20001922:	bf02      	ittt	eq
20001924:	0040      	lsleq	r0, r0, #1
20001926:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
2000192a:	3a01      	subeq	r2, #1
2000192c:	d0f9      	beq.n	20001922 <__aeabi_fmul+0xce>
2000192e:	ea40 000c 	orr.w	r0, r0, ip
20001932:	f093 0f00 	teq	r3, #0
20001936:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000193a:	bf02      	ittt	eq
2000193c:	0049      	lsleq	r1, r1, #1
2000193e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20001942:	3b01      	subeq	r3, #1
20001944:	d0f9      	beq.n	2000193a <__aeabi_fmul+0xe6>
20001946:	ea41 010c 	orr.w	r1, r1, ip
2000194a:	e78f      	b.n	2000186c <__aeabi_fmul+0x18>
2000194c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20001950:	ea92 0f0c 	teq	r2, ip
20001954:	bf18      	it	ne
20001956:	ea93 0f0c 	teqne	r3, ip
2000195a:	d00a      	beq.n	20001972 <__aeabi_fmul+0x11e>
2000195c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20001960:	bf18      	it	ne
20001962:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20001966:	d1d8      	bne.n	2000191a <__aeabi_fmul+0xc6>
20001968:	ea80 0001 	eor.w	r0, r0, r1
2000196c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20001970:	4770      	bx	lr
20001972:	f090 0f00 	teq	r0, #0
20001976:	bf17      	itett	ne
20001978:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
2000197c:	4608      	moveq	r0, r1
2000197e:	f091 0f00 	teqne	r1, #0
20001982:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
20001986:	d014      	beq.n	200019b2 <__aeabi_fmul+0x15e>
20001988:	ea92 0f0c 	teq	r2, ip
2000198c:	d101      	bne.n	20001992 <__aeabi_fmul+0x13e>
2000198e:	0242      	lsls	r2, r0, #9
20001990:	d10f      	bne.n	200019b2 <__aeabi_fmul+0x15e>
20001992:	ea93 0f0c 	teq	r3, ip
20001996:	d103      	bne.n	200019a0 <__aeabi_fmul+0x14c>
20001998:	024b      	lsls	r3, r1, #9
2000199a:	bf18      	it	ne
2000199c:	4608      	movne	r0, r1
2000199e:	d108      	bne.n	200019b2 <__aeabi_fmul+0x15e>
200019a0:	ea80 0001 	eor.w	r0, r0, r1
200019a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200019a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200019ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200019b0:	4770      	bx	lr
200019b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200019b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
200019ba:	4770      	bx	lr

200019bc <__aeabi_fdiv>:
200019bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
200019c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200019c4:	bf1e      	ittt	ne
200019c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200019ca:	ea92 0f0c 	teqne	r2, ip
200019ce:	ea93 0f0c 	teqne	r3, ip
200019d2:	d069      	beq.n	20001aa8 <__aeabi_fdiv+0xec>
200019d4:	eba2 0203 	sub.w	r2, r2, r3
200019d8:	ea80 0c01 	eor.w	ip, r0, r1
200019dc:	0249      	lsls	r1, r1, #9
200019de:	ea4f 2040 	mov.w	r0, r0, lsl #9
200019e2:	d037      	beq.n	20001a54 <__aeabi_fdiv+0x98>
200019e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
200019e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
200019ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
200019f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200019f4:	428b      	cmp	r3, r1
200019f6:	bf38      	it	cc
200019f8:	005b      	lslcc	r3, r3, #1
200019fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
200019fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20001a02:	428b      	cmp	r3, r1
20001a04:	bf24      	itt	cs
20001a06:	1a5b      	subcs	r3, r3, r1
20001a08:	ea40 000c 	orrcs.w	r0, r0, ip
20001a0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20001a10:	bf24      	itt	cs
20001a12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20001a16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20001a1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20001a1e:	bf24      	itt	cs
20001a20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20001a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20001a28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20001a2c:	bf24      	itt	cs
20001a2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20001a32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20001a36:	011b      	lsls	r3, r3, #4
20001a38:	bf18      	it	ne
20001a3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20001a3e:	d1e0      	bne.n	20001a02 <__aeabi_fdiv+0x46>
20001a40:	2afd      	cmp	r2, #253	; 0xfd
20001a42:	f63f af50 	bhi.w	200018e6 <__aeabi_fmul+0x92>
20001a46:	428b      	cmp	r3, r1
20001a48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20001a4c:	bf08      	it	eq
20001a4e:	f020 0001 	biceq.w	r0, r0, #1
20001a52:	4770      	bx	lr
20001a54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20001a58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20001a5c:	327f      	adds	r2, #127	; 0x7f
20001a5e:	bfc2      	ittt	gt
20001a60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20001a64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20001a68:	4770      	bxgt	lr
20001a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20001a6e:	f04f 0300 	mov.w	r3, #0
20001a72:	3a01      	subs	r2, #1
20001a74:	e737      	b.n	200018e6 <__aeabi_fmul+0x92>
20001a76:	f092 0f00 	teq	r2, #0
20001a7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20001a7e:	bf02      	ittt	eq
20001a80:	0040      	lsleq	r0, r0, #1
20001a82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20001a86:	3a01      	subeq	r2, #1
20001a88:	d0f9      	beq.n	20001a7e <__aeabi_fdiv+0xc2>
20001a8a:	ea40 000c 	orr.w	r0, r0, ip
20001a8e:	f093 0f00 	teq	r3, #0
20001a92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20001a96:	bf02      	ittt	eq
20001a98:	0049      	lsleq	r1, r1, #1
20001a9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20001a9e:	3b01      	subeq	r3, #1
20001aa0:	d0f9      	beq.n	20001a96 <__aeabi_fdiv+0xda>
20001aa2:	ea41 010c 	orr.w	r1, r1, ip
20001aa6:	e795      	b.n	200019d4 <__aeabi_fdiv+0x18>
20001aa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20001aac:	ea92 0f0c 	teq	r2, ip
20001ab0:	d108      	bne.n	20001ac4 <__aeabi_fdiv+0x108>
20001ab2:	0242      	lsls	r2, r0, #9
20001ab4:	f47f af7d 	bne.w	200019b2 <__aeabi_fmul+0x15e>
20001ab8:	ea93 0f0c 	teq	r3, ip
20001abc:	f47f af70 	bne.w	200019a0 <__aeabi_fmul+0x14c>
20001ac0:	4608      	mov	r0, r1
20001ac2:	e776      	b.n	200019b2 <__aeabi_fmul+0x15e>
20001ac4:	ea93 0f0c 	teq	r3, ip
20001ac8:	d104      	bne.n	20001ad4 <__aeabi_fdiv+0x118>
20001aca:	024b      	lsls	r3, r1, #9
20001acc:	f43f af4c 	beq.w	20001968 <__aeabi_fmul+0x114>
20001ad0:	4608      	mov	r0, r1
20001ad2:	e76e      	b.n	200019b2 <__aeabi_fmul+0x15e>
20001ad4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20001ad8:	bf18      	it	ne
20001ada:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20001ade:	d1ca      	bne.n	20001a76 <__aeabi_fdiv+0xba>
20001ae0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20001ae4:	f47f af5c 	bne.w	200019a0 <__aeabi_fmul+0x14c>
20001ae8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20001aec:	f47f af3c 	bne.w	20001968 <__aeabi_fmul+0x114>
20001af0:	e75f      	b.n	200019b2 <__aeabi_fmul+0x15e>
20001af2:	bf00      	nop

20001af4 <__aeabi_f2iz>:
20001af4:	ea4f 0240 	mov.w	r2, r0, lsl #1
20001af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20001afc:	d30f      	bcc.n	20001b1e <__aeabi_f2iz+0x2a>
20001afe:	f04f 039e 	mov.w	r3, #158	; 0x9e
20001b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
20001b06:	d90d      	bls.n	20001b24 <__aeabi_f2iz+0x30>
20001b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
20001b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20001b10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20001b14:	fa23 f002 	lsr.w	r0, r3, r2
20001b18:	bf18      	it	ne
20001b1a:	4240      	negne	r0, r0
20001b1c:	4770      	bx	lr
20001b1e:	f04f 0000 	mov.w	r0, #0
20001b22:	4770      	bx	lr
20001b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
20001b28:	d101      	bne.n	20001b2e <__aeabi_f2iz+0x3a>
20001b2a:	0242      	lsls	r2, r0, #9
20001b2c:	d105      	bne.n	20001b3a <__aeabi_f2iz+0x46>
20001b2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
20001b32:	bf08      	it	eq
20001b34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20001b38:	4770      	bx	lr
20001b3a:	f04f 0000 	mov.w	r0, #0
20001b3e:	4770      	bx	lr

20001b40 <__libc_init_array>:
20001b40:	b570      	push	{r4, r5, r6, lr}
20001b42:	f641 4684 	movw	r6, #7300	; 0x1c84
20001b46:	f641 4584 	movw	r5, #7300	; 0x1c84
20001b4a:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001b4e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001b52:	1b76      	subs	r6, r6, r5
20001b54:	10b6      	asrs	r6, r6, #2
20001b56:	d006      	beq.n	20001b66 <__libc_init_array+0x26>
20001b58:	2400      	movs	r4, #0
20001b5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001b5e:	3401      	adds	r4, #1
20001b60:	4798      	blx	r3
20001b62:	42a6      	cmp	r6, r4
20001b64:	d8f9      	bhi.n	20001b5a <__libc_init_array+0x1a>
20001b66:	f641 4584 	movw	r5, #7300	; 0x1c84
20001b6a:	f641 4688 	movw	r6, #7304	; 0x1c88
20001b6e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001b72:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001b76:	1b76      	subs	r6, r6, r5
20001b78:	f000 f878 	bl	20001c6c <_init>
20001b7c:	10b6      	asrs	r6, r6, #2
20001b7e:	d006      	beq.n	20001b8e <__libc_init_array+0x4e>
20001b80:	2400      	movs	r4, #0
20001b82:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001b86:	3401      	adds	r4, #1
20001b88:	4798      	blx	r3
20001b8a:	42a6      	cmp	r6, r4
20001b8c:	d8f9      	bhi.n	20001b82 <__libc_init_array+0x42>
20001b8e:	bd70      	pop	{r4, r5, r6, pc}

20001b90 <PERIOD>:
20001b90:	1a80 0006                                   ....

20001b94 <C.36.4055>:
20001b94:	ffff ffff ffff ffff                         ........

20001b9c <g_gpio_irqn_lut>:
20001b9c:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20001bac:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20001bbc:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20001bcc:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20001bdc <g_config_reg_lut>:
20001bdc:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20001bec:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20001bfc:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20001c0c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20001c1c:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20001c2c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20001c3c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20001c4c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20001c5c <C.16.2565>:
20001c5c:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20001c6c <_init>:
20001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001c6e:	bf00      	nop
20001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001c72:	bc08      	pop	{r3}
20001c74:	469e      	mov	lr, r3
20001c76:	4770      	bx	lr

20001c78 <_fini>:
20001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001c7a:	bf00      	nop
20001c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001c7e:	bc08      	pop	{r3}
20001c80:	469e      	mov	lr, r3
20001c82:	4770      	bx	lr

20001c84 <__frame_dummy_init_array_entry>:
20001c84:	0485 2000                                   ... 

20001c88 <__do_global_dtors_aux_fini_array_entry>:
20001c88:	0471 2000                                   q.. 
