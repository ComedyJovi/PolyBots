
touch_screen_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b54  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20000b54  20000b54  00008b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  20000b58  20000b58  00008b58  2**2
                  ALLOC
  3 .stack        00003000  20000c68  20000c68  00008b58  2**0
                  ALLOC
  4 .comment      000000d7  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00008c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000043f  00000000  00000000  00008e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b11  00000000  00000000  0000928e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000062b  00000000  00000000  0000bd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001589  00000000  00000000  0000c3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000750  00000000  00000000  0000d954  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000198f  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b11  00000000  00000000  0000fa33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0001d3e2  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0002d926  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000001f8  00000000  00000000  0002d94b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20000a81 	.word	0x20000a81
20000074:	20000aad 	.word	0x20000aad
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20000ad9 	.word	0x20000ad9
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20000b54 	.word	0x20000b54
20000450:	20000b54 	.word	0x20000b54
20000454:	20000b54 	.word	0x20000b54
20000458:	20000b58 	.word	0x20000b58
2000045c:	00000000 	.word	0x00000000
20000460:	20000b58 	.word	0x20000b58
20000464:	20000c68 	.word	0x20000c68
20000468:	20000ae5 	.word	0x20000ae5
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f640 3358 	movw	r3, #2904	; 0xb58
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f640 3054 	movw	r0, #2900	; 0xb54
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "Adafruit_ILI9341_local.h"



int main()
{
200004a0:	b480      	push	{r7}
200004a2:	af00      	add	r7, sp, #0
	while( 1 )
	{

	}
200004a4:	e7fe      	b.n	200004a4 <main+0x4>
200004a6:	bf00      	nop

200004a8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200004a8:	b480      	push	{r7}
200004aa:	b083      	sub	sp, #12
200004ac:	af00      	add	r7, sp, #0
200004ae:	4603      	mov	r3, r0
200004b0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200004b2:	f24e 1300 	movw	r3, #57600	; 0xe100
200004b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004be:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004c2:	88f9      	ldrh	r1, [r7, #6]
200004c4:	f001 011f 	and.w	r1, r1, #31
200004c8:	f04f 0001 	mov.w	r0, #1
200004cc:	fa00 f101 	lsl.w	r1, r0, r1
200004d0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200004d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200004d8:	f107 070c 	add.w	r7, r7, #12
200004dc:	46bd      	mov	sp, r7
200004de:	bc80      	pop	{r7}
200004e0:	4770      	bx	lr
200004e2:	bf00      	nop

200004e4 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
200004e4:	b580      	push	{r7, lr}
200004e6:	b08a      	sub	sp, #40	; 0x28
200004e8:	af00      	add	r7, sp, #0
200004ea:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
200004ec:	687b      	ldr	r3, [r7, #4]
200004ee:	681b      	ldr	r3, [r3, #0]
200004f0:	681b      	ldr	r3, [r3, #0]
200004f2:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	681b      	ldr	r3, [r3, #0]
200004f8:	699b      	ldr	r3, [r3, #24]
200004fa:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200004fc:	687b      	ldr	r3, [r7, #4]
200004fe:	681b      	ldr	r3, [r3, #0]
20000500:	685b      	ldr	r3, [r3, #4]
20000502:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
20000504:	687b      	ldr	r3, [r7, #4]
20000506:	681b      	ldr	r3, [r3, #0]
20000508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000050a:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	681b      	ldr	r3, [r3, #0]
20000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000512:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20000514:	687b      	ldr	r3, [r7, #4]
20000516:	681b      	ldr	r3, [r3, #0]
20000518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000051a:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	681b      	ldr	r3, [r3, #0]
20000520:	69db      	ldr	r3, [r3, #28]
20000522:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20000524:	687a      	ldr	r2, [r7, #4]
20000526:	f640 33e0 	movw	r3, #3040	; 0xbe0
2000052a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000052e:	429a      	cmp	r2, r3
20000530:	d12e      	bne.n	20000590 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000532:	687a      	ldr	r2, [r7, #4]
20000534:	f241 0300 	movw	r3, #4096	; 0x1000
20000538:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000053c:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
2000053e:	687b      	ldr	r3, [r7, #4]
20000540:	f04f 020c 	mov.w	r2, #12
20000544:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000546:	f242 0300 	movw	r3, #8192	; 0x2000
2000054a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000054e:	f242 0200 	movw	r2, #8192	; 0x2000
20000552:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000556:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000055c:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
2000055e:	f04f 000c 	mov.w	r0, #12
20000562:	f7ff ffa1 	bl	200004a8 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000566:	f242 0300 	movw	r3, #8192	; 0x2000
2000056a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000056e:	f242 0200 	movw	r2, #8192	; 0x2000
20000572:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000576:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
2000057c:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000057e:	687b      	ldr	r3, [r7, #4]
20000580:	681b      	ldr	r3, [r3, #0]
20000582:	687a      	ldr	r2, [r7, #4]
20000584:	6812      	ldr	r2, [r2, #0]
20000586:	6812      	ldr	r2, [r2, #0]
20000588:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2000058c:	601a      	str	r2, [r3, #0]
2000058e:	e02d      	b.n	200005ec <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000590:	687a      	ldr	r2, [r7, #4]
20000592:	f241 0300 	movw	r3, #4096	; 0x1000
20000596:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000059a:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
2000059c:	687b      	ldr	r3, [r7, #4]
2000059e:	f04f 020d 	mov.w	r2, #13
200005a2:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
200005a4:	f242 0300 	movw	r3, #8192	; 0x2000
200005a8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200005ac:	f242 0200 	movw	r2, #8192	; 0x2000
200005b0:	f2ce 0204 	movt	r2, #57348	; 0xe004
200005b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
200005b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
200005ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
200005bc:	f04f 000d 	mov.w	r0, #13
200005c0:	f7ff ff72 	bl	200004a8 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
200005c4:	f242 0300 	movw	r3, #8192	; 0x2000
200005c8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200005cc:	f242 0200 	movw	r2, #8192	; 0x2000
200005d0:	f2ce 0204 	movt	r2, #57348	; 0xe004
200005d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
200005d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
200005da:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200005dc:	687b      	ldr	r3, [r7, #4]
200005de:	681b      	ldr	r3, [r3, #0]
200005e0:	687a      	ldr	r2, [r7, #4]
200005e2:	6812      	ldr	r2, [r2, #0]
200005e4:	6812      	ldr	r2, [r2, #0]
200005e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200005ea:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
200005ec:	68fb      	ldr	r3, [r7, #12]
200005ee:	f023 0301 	bic.w	r3, r3, #1
200005f2:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	681b      	ldr	r3, [r3, #0]
200005f8:	68fa      	ldr	r2, [r7, #12]
200005fa:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	681b      	ldr	r3, [r3, #0]
20000600:	693a      	ldr	r2, [r7, #16]
20000602:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20000604:	687b      	ldr	r3, [r7, #4]
20000606:	681b      	ldr	r3, [r3, #0]
20000608:	697a      	ldr	r2, [r7, #20]
2000060a:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	681b      	ldr	r3, [r3, #0]
20000610:	687a      	ldr	r2, [r7, #4]
20000612:	6812      	ldr	r2, [r2, #0]
20000614:	6812      	ldr	r2, [r2, #0]
20000616:	f042 0201 	orr.w	r2, r2, #1
2000061a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	681b      	ldr	r3, [r3, #0]
20000620:	69ba      	ldr	r2, [r7, #24]
20000622:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	681b      	ldr	r3, [r3, #0]
20000628:	69fa      	ldr	r2, [r7, #28]
2000062a:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	681b      	ldr	r3, [r3, #0]
20000630:	6a3a      	ldr	r2, [r7, #32]
20000632:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	681b      	ldr	r3, [r3, #0]
20000638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000063a:	61da      	str	r2, [r3, #28]
}
2000063c:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000640:	46bd      	mov	sp, r7
20000642:	bd80      	pop	{r7, pc}

20000644 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20000644:	b480      	push	{r7}
20000646:	b085      	sub	sp, #20
20000648:	af00      	add	r7, sp, #0
2000064a:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
2000064c:	f04f 0300 	mov.w	r3, #0
20000650:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000652:	e00e      	b.n	20000672 <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	681b      	ldr	r3, [r3, #0]
20000658:	687a      	ldr	r2, [r7, #4]
2000065a:	6891      	ldr	r1, [r2, #8]
2000065c:	687a      	ldr	r2, [r7, #4]
2000065e:	6912      	ldr	r2, [r2, #16]
20000660:	440a      	add	r2, r1
20000662:	7812      	ldrb	r2, [r2, #0]
20000664:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	691b      	ldr	r3, [r3, #16]
2000066a:	f103 0201 	add.w	r2, r3, #1
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	681b      	ldr	r3, [r3, #0]
20000676:	689b      	ldr	r3, [r3, #8]
20000678:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000067c:	2b00      	cmp	r3, #0
2000067e:	d105      	bne.n	2000068c <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	691a      	ldr	r2, [r3, #16]
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000688:	429a      	cmp	r2, r3
2000068a:	d3e3      	bcc.n	20000654 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	691a      	ldr	r2, [r3, #16]
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	68db      	ldr	r3, [r3, #12]
20000694:	429a      	cmp	r2, r3
20000696:	d31c      	bcc.n	200006d2 <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000698:	e00e      	b.n	200006b8 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	681b      	ldr	r3, [r3, #0]
2000069e:	687a      	ldr	r2, [r7, #4]
200006a0:	6951      	ldr	r1, [r2, #20]
200006a2:	687a      	ldr	r2, [r7, #4]
200006a4:	69d2      	ldr	r2, [r2, #28]
200006a6:	440a      	add	r2, r1
200006a8:	7812      	ldrb	r2, [r2, #0]
200006aa:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	69db      	ldr	r3, [r3, #28]
200006b0:	f103 0201 	add.w	r2, r3, #1
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	681b      	ldr	r3, [r3, #0]
200006bc:	689b      	ldr	r3, [r3, #8]
200006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
200006c2:	2b00      	cmp	r3, #0
200006c4:	d105      	bne.n	200006d2 <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	69da      	ldr	r2, [r3, #28]
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200006ce:	429a      	cmp	r2, r3
200006d0:	d3e3      	bcc.n	2000069a <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200006d6:	2b00      	cmp	r3, #0
200006d8:	d01f      	beq.n	2000071a <fill_slave_tx_fifo+0xd6>
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	691a      	ldr	r2, [r3, #16]
200006de:	687b      	ldr	r3, [r7, #4]
200006e0:	68db      	ldr	r3, [r3, #12]
200006e2:	429a      	cmp	r2, r3
200006e4:	d319      	bcc.n	2000071a <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	69da      	ldr	r2, [r3, #28]
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200006ee:	429a      	cmp	r2, r3
200006f0:	d313      	bcc.n	2000071a <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200006f2:	e008      	b.n	20000706 <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	681b      	ldr	r3, [r3, #0]
200006f8:	f04f 0200 	mov.w	r2, #0
200006fc:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
200006fe:	68fb      	ldr	r3, [r7, #12]
20000700:	f103 0301 	add.w	r3, r3, #1
20000704:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000706:	687b      	ldr	r3, [r7, #4]
20000708:	681b      	ldr	r3, [r3, #0]
2000070a:	689b      	ldr	r3, [r3, #8]
2000070c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000710:	2b00      	cmp	r3, #0
20000712:	d102      	bne.n	2000071a <fill_slave_tx_fifo+0xd6>
20000714:	68fb      	ldr	r3, [r7, #12]
20000716:	2b1f      	cmp	r3, #31
20000718:	d9ec      	bls.n	200006f4 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
2000071a:	f107 0714 	add.w	r7, r7, #20
2000071e:	46bd      	mov	sp, r7
20000720:	bc80      	pop	{r7}
20000722:	4770      	bx	lr

20000724 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20000724:	b580      	push	{r7, lr}
20000726:	b084      	sub	sp, #16
20000728:	af00      	add	r7, sp, #0
2000072a:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20000732:	2b02      	cmp	r3, #2
20000734:	d115      	bne.n	20000762 <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20000736:	e00c      	b.n	20000752 <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	681b      	ldr	r3, [r3, #0]
2000073c:	691b      	ldr	r3, [r3, #16]
2000073e:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000744:	2b00      	cmp	r3, #0
20000746:	d004      	beq.n	20000752 <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000074c:	68fa      	ldr	r2, [r7, #12]
2000074e:	4610      	mov	r0, r2
20000750:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	681b      	ldr	r3, [r3, #0]
20000756:	689b      	ldr	r3, [r3, #8]
20000758:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000075c:	2b00      	cmp	r3, #0
2000075e:	d0eb      	beq.n	20000738 <read_slave_rx_fifo+0x14>
20000760:	e032      	b.n	200007c8 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20000762:	687b      	ldr	r3, [r7, #4]
20000764:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20000768:	2b01      	cmp	r3, #1
2000076a:	d125      	bne.n	200007b8 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000076c:	e017      	b.n	2000079e <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	681b      	ldr	r3, [r3, #0]
20000772:	691b      	ldr	r3, [r3, #16]
20000774:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000077e:	429a      	cmp	r2, r3
20000780:	d207      	bcs.n	20000792 <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20000786:	687b      	ldr	r3, [r7, #4]
20000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000078a:	4413      	add	r3, r2
2000078c:	68fa      	ldr	r2, [r7, #12]
2000078e:	b2d2      	uxtb	r2, r2
20000790:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000796:	f103 0201 	add.w	r2, r3, #1
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000079e:	687b      	ldr	r3, [r7, #4]
200007a0:	681b      	ldr	r3, [r3, #0]
200007a2:	689b      	ldr	r3, [r3, #8]
200007a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
200007a8:	2b00      	cmp	r3, #0
200007aa:	d0e0      	beq.n	2000076e <read_slave_rx_fifo+0x4a>
200007ac:	e00c      	b.n	200007c8 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	681b      	ldr	r3, [r3, #0]
200007b2:	691b      	ldr	r3, [r3, #16]
200007b4:	60fb      	str	r3, [r7, #12]
200007b6:	e000      	b.n	200007ba <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200007b8:	bf00      	nop
200007ba:	687b      	ldr	r3, [r7, #4]
200007bc:	681b      	ldr	r3, [r3, #0]
200007be:	689b      	ldr	r3, [r3, #8]
200007c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200007c4:	2b00      	cmp	r3, #0
200007c6:	d0f2      	beq.n	200007ae <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
200007c8:	f107 0710 	add.w	r7, r7, #16
200007cc:	46bd      	mov	sp, r7
200007ce:	bd80      	pop	{r7, pc}

200007d0 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
200007d0:	b580      	push	{r7, lr}
200007d2:	b086      	sub	sp, #24
200007d4:	af00      	add	r7, sp, #0
200007d6:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	f103 0320 	add.w	r3, r3, #32
200007e0:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200007e2:	687a      	ldr	r2, [r7, #4]
200007e4:	f640 33e0 	movw	r3, #3040	; 0xbe0
200007e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007ec:	429a      	cmp	r2, r3
200007ee:	d007      	beq.n	20000800 <mss_spi_isr+0x30>
200007f0:	687a      	ldr	r2, [r7, #4]
200007f2:	f640 335c 	movw	r3, #2908	; 0xb5c
200007f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007fa:	429a      	cmp	r2, r3
200007fc:	d000      	beq.n	20000800 <mss_spi_isr+0x30>
200007fe:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20000800:	693b      	ldr	r3, [r7, #16]
20000802:	681b      	ldr	r3, [r3, #0]
20000804:	f003 0302 	and.w	r3, r3, #2
20000808:	2b00      	cmp	r3, #0
2000080a:	d052      	beq.n	200008b2 <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000080c:	687b      	ldr	r3, [r7, #4]
2000080e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20000812:	2b02      	cmp	r3, #2
20000814:	d115      	bne.n	20000842 <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20000816:	e00c      	b.n	20000832 <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	681b      	ldr	r3, [r3, #0]
2000081c:	691b      	ldr	r3, [r3, #16]
2000081e:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000824:	2b00      	cmp	r3, #0
20000826:	d004      	beq.n	20000832 <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000082c:	68fa      	ldr	r2, [r7, #12]
2000082e:	4610      	mov	r0, r2
20000830:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20000832:	687b      	ldr	r3, [r7, #4]
20000834:	681b      	ldr	r3, [r3, #0]
20000836:	689b      	ldr	r3, [r3, #8]
20000838:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000083c:	2b00      	cmp	r3, #0
2000083e:	d0eb      	beq.n	20000818 <mss_spi_isr+0x48>
20000840:	e032      	b.n	200008a8 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20000848:	2b01      	cmp	r3, #1
2000084a:	d125      	bne.n	20000898 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000084c:	e017      	b.n	2000087e <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
2000084e:	687b      	ldr	r3, [r7, #4]
20000850:	681b      	ldr	r3, [r3, #0]
20000852:	691b      	ldr	r3, [r3, #16]
20000854:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
20000856:	687b      	ldr	r3, [r7, #4]
20000858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000085e:	429a      	cmp	r2, r3
20000860:	d207      	bcs.n	20000872 <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000086a:	4413      	add	r3, r2
2000086c:	68fa      	ldr	r2, [r7, #12]
2000086e:	b2d2      	uxtb	r2, r2
20000870:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000876:	f103 0201 	add.w	r2, r3, #1
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	681b      	ldr	r3, [r3, #0]
20000882:	689b      	ldr	r3, [r3, #8]
20000884:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000888:	2b00      	cmp	r3, #0
2000088a:	d0e0      	beq.n	2000084e <mss_spi_isr+0x7e>
2000088c:	e00c      	b.n	200008a8 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000088e:	687b      	ldr	r3, [r7, #4]
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	691b      	ldr	r3, [r3, #16]
20000894:	60fb      	str	r3, [r7, #12]
20000896:	e000      	b.n	2000089a <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20000898:	bf00      	nop
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	689b      	ldr	r3, [r3, #8]
200008a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200008a4:	2b00      	cmp	r3, #0
200008a6:	d0f2      	beq.n	2000088e <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	681b      	ldr	r3, [r3, #0]
200008ac:	f04f 0202 	mov.w	r2, #2
200008b0:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
200008b2:	693b      	ldr	r3, [r7, #16]
200008b4:	681b      	ldr	r3, [r3, #0]
200008b6:	f003 0301 	and.w	r3, r3, #1
200008ba:	b2db      	uxtb	r3, r3
200008bc:	2b00      	cmp	r3, #0
200008be:	d012      	beq.n	200008e6 <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200008c6:	2b02      	cmp	r3, #2
200008c8:	d105      	bne.n	200008d6 <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200008ca:	687b      	ldr	r3, [r7, #4]
200008cc:	681b      	ldr	r3, [r3, #0]
200008ce:	687a      	ldr	r2, [r7, #4]
200008d0:	6f92      	ldr	r2, [r2, #120]	; 0x78
200008d2:	615a      	str	r2, [r3, #20]
200008d4:	e002      	b.n	200008dc <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
200008d6:	6878      	ldr	r0, [r7, #4]
200008d8:	f7ff feb4 	bl	20000644 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	681b      	ldr	r3, [r3, #0]
200008e0:	f04f 0201 	mov.w	r2, #1
200008e4:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
200008e6:	693b      	ldr	r3, [r7, #16]
200008e8:	681b      	ldr	r3, [r3, #0]
200008ea:	f003 0310 	and.w	r3, r3, #16
200008ee:	2b00      	cmp	r3, #0
200008f0:	d023      	beq.n	2000093a <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
200008f2:	6878      	ldr	r0, [r7, #4]
200008f4:	f7ff ff16 	bl	20000724 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
200008f8:	687b      	ldr	r3, [r7, #4]
200008fa:	6a1b      	ldr	r3, [r3, #32]
200008fc:	2b00      	cmp	r3, #0
200008fe:	d00b      	beq.n	20000918 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	6a1b      	ldr	r3, [r3, #32]
20000904:	687a      	ldr	r2, [r7, #4]
20000906:	6a91      	ldr	r1, [r2, #40]	; 0x28
20000908:	687a      	ldr	r2, [r7, #4]
2000090a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000090c:	4608      	mov	r0, r1
2000090e:	4611      	mov	r1, r2
20000910:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
20000912:	6878      	ldr	r0, [r7, #4]
20000914:	f7ff fe96 	bl	20000644 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	f04f 0201 	mov.w	r2, #1
2000091e:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	681b      	ldr	r3, [r3, #0]
20000924:	687a      	ldr	r2, [r7, #4]
20000926:	6812      	ldr	r2, [r2, #0]
20000928:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000092a:	f022 0210 	bic.w	r2, r2, #16
2000092e:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	681b      	ldr	r3, [r3, #0]
20000934:	f04f 0210 	mov.w	r2, #16
20000938:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
2000093a:	693b      	ldr	r3, [r7, #16]
2000093c:	681b      	ldr	r3, [r3, #0]
2000093e:	f003 0304 	and.w	r3, r3, #4
20000942:	2b00      	cmp	r3, #0
20000944:	d00f      	beq.n	20000966 <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	681b      	ldr	r3, [r3, #0]
2000094a:	687a      	ldr	r2, [r7, #4]
2000094c:	6812      	ldr	r2, [r2, #0]
2000094e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000950:	f042 0204 	orr.w	r2, r2, #4
20000954:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
20000956:	6878      	ldr	r0, [r7, #4]
20000958:	f7ff fdc4 	bl	200004e4 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
2000095c:	687b      	ldr	r3, [r7, #4]
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	f04f 0204 	mov.w	r2, #4
20000964:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20000966:	693b      	ldr	r3, [r7, #16]
20000968:	681b      	ldr	r3, [r3, #0]
2000096a:	f003 0308 	and.w	r3, r3, #8
2000096e:	2b00      	cmp	r3, #0
20000970:	d031      	beq.n	200009d6 <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	681b      	ldr	r3, [r3, #0]
20000976:	687a      	ldr	r2, [r7, #4]
20000978:	6812      	ldr	r2, [r2, #0]
2000097a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000097c:	f042 0208 	orr.w	r2, r2, #8
20000980:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20000982:	687b      	ldr	r3, [r7, #4]
20000984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20000988:	2b02      	cmp	r3, #2
2000098a:	d113      	bne.n	200009b4 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	681a      	ldr	r2, [r3, #0]
20000990:	687b      	ldr	r3, [r7, #4]
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	6819      	ldr	r1, [r3, #0]
20000996:	f240 03ff 	movw	r3, #255	; 0xff
2000099a:	f6cf 7300 	movt	r3, #65280	; 0xff00
2000099e:	ea01 0303 	and.w	r3, r1, r3
200009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200009a6:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200009a8:	687b      	ldr	r3, [r7, #4]
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	687a      	ldr	r2, [r7, #4]
200009ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
200009b0:	615a      	str	r2, [r3, #20]
200009b2:	e00b      	b.n	200009cc <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200009ba:	2b01      	cmp	r3, #1
200009bc:	d106      	bne.n	200009cc <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200009be:	687b      	ldr	r3, [r7, #4]
200009c0:	f04f 0200 	mov.w	r2, #0
200009c4:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
200009c6:	6878      	ldr	r0, [r7, #4]
200009c8:	f7ff fe3c 	bl	20000644 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	681b      	ldr	r3, [r3, #0]
200009d0:	f04f 0208 	mov.w	r2, #8
200009d4:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200009d6:	693b      	ldr	r3, [r7, #16]
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	f003 0320 	and.w	r3, r3, #32
200009de:	2b00      	cmp	r3, #0
200009e0:	d049      	beq.n	20000a76 <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200009e2:	6878      	ldr	r0, [r7, #4]
200009e4:	f7ff fe9e 	bl	20000724 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200009ec:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	6a1b      	ldr	r3, [r3, #32]
200009f2:	2b00      	cmp	r3, #0
200009f4:	d01c      	beq.n	20000a30 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	f04f 0200 	mov.w	r2, #0
200009fc:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
200009fe:	687b      	ldr	r3, [r7, #4]
20000a00:	f04f 0200 	mov.w	r2, #0
20000a04:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	f04f 0200 	mov.w	r2, #0
20000a0c:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
20000a0e:	687b      	ldr	r3, [r7, #4]
20000a10:	f04f 0200 	mov.w	r2, #0
20000a14:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20000a16:	687b      	ldr	r3, [r7, #4]
20000a18:	681b      	ldr	r3, [r3, #0]
20000a1a:	f04f 0210 	mov.w	r2, #16
20000a1e:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20000a20:	687b      	ldr	r3, [r7, #4]
20000a22:	681b      	ldr	r3, [r3, #0]
20000a24:	687a      	ldr	r2, [r7, #4]
20000a26:	6812      	ldr	r2, [r2, #0]
20000a28:	6a92      	ldr	r2, [r2, #40]	; 0x28
20000a2a:	f042 0210 	orr.w	r2, r2, #16
20000a2e:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	f04f 0200 	mov.w	r2, #0
20000a36:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	681b      	ldr	r3, [r3, #0]
20000a3c:	687a      	ldr	r2, [r7, #4]
20000a3e:	6812      	ldr	r2, [r2, #0]
20000a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000a42:	f042 020c 	orr.w	r2, r2, #12
20000a46:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
20000a48:	6878      	ldr	r0, [r7, #4]
20000a4a:	f7ff fdfb 	bl	20000644 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20000a4e:	687b      	ldr	r3, [r7, #4]
20000a50:	f04f 0200 	mov.w	r2, #0
20000a54:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
20000a56:	687b      	ldr	r3, [r7, #4]
20000a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20000a5a:	2b00      	cmp	r3, #0
20000a5c:	d006      	beq.n	20000a6c <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20000a5e:	687b      	ldr	r3, [r7, #4]
20000a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20000a62:	687a      	ldr	r2, [r7, #4]
20000a64:	6a92      	ldr	r2, [r2, #40]	; 0x28
20000a66:	4610      	mov	r0, r2
20000a68:	6979      	ldr	r1, [r7, #20]
20000a6a:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20000a6c:	687b      	ldr	r3, [r7, #4]
20000a6e:	681b      	ldr	r3, [r3, #0]
20000a70:	f04f 0220 	mov.w	r2, #32
20000a74:	60da      	str	r2, [r3, #12]
    }
}
20000a76:	f107 0718 	add.w	r7, r7, #24
20000a7a:	46bd      	mov	sp, r7
20000a7c:	bd80      	pop	{r7, pc}
20000a7e:	bf00      	nop

20000a80 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20000a80:	4668      	mov	r0, sp
20000a82:	f020 0107 	bic.w	r1, r0, #7
20000a86:	468d      	mov	sp, r1
20000a88:	b589      	push	{r0, r3, r7, lr}
20000a8a:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
20000a8c:	f640 30e0 	movw	r0, #3040	; 0xbe0
20000a90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a94:	f7ff fe9c 	bl	200007d0 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
20000a98:	f04f 000c 	mov.w	r0, #12
20000a9c:	f7ff fd04 	bl	200004a8 <NVIC_ClearPendingIRQ>
}
20000aa0:	46bd      	mov	sp, r7
20000aa2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000aa6:	4685      	mov	sp, r0
20000aa8:	4770      	bx	lr
20000aaa:	bf00      	nop

20000aac <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20000aac:	4668      	mov	r0, sp
20000aae:	f020 0107 	bic.w	r1, r0, #7
20000ab2:	468d      	mov	sp, r1
20000ab4:	b589      	push	{r0, r3, r7, lr}
20000ab6:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20000ab8:	f640 305c 	movw	r0, #2908	; 0xb5c
20000abc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ac0:	f7ff fe86 	bl	200007d0 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
20000ac4:	f04f 000d 	mov.w	r0, #13
20000ac8:	f7ff fcee 	bl	200004a8 <NVIC_ClearPendingIRQ>
}
20000acc:	46bd      	mov	sp, r7
20000ace:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000ad2:	4685      	mov	sp, r0
20000ad4:	4770      	bx	lr
20000ad6:	bf00      	nop

20000ad8 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20000ad8:	b480      	push	{r7}
20000ada:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20000adc:	46bd      	mov	sp, r7
20000ade:	bc80      	pop	{r7}
20000ae0:	4770      	bx	lr
20000ae2:	bf00      	nop

20000ae4 <__libc_init_array>:
20000ae4:	b570      	push	{r4, r5, r6, lr}
20000ae6:	f640 364c 	movw	r6, #2892	; 0xb4c
20000aea:	f640 354c 	movw	r5, #2892	; 0xb4c
20000aee:	f2c2 0600 	movt	r6, #8192	; 0x2000
20000af2:	f2c2 0500 	movt	r5, #8192	; 0x2000
20000af6:	1b76      	subs	r6, r6, r5
20000af8:	10b6      	asrs	r6, r6, #2
20000afa:	d006      	beq.n	20000b0a <__libc_init_array+0x26>
20000afc:	2400      	movs	r4, #0
20000afe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000b02:	3401      	adds	r4, #1
20000b04:	4798      	blx	r3
20000b06:	42a6      	cmp	r6, r4
20000b08:	d8f9      	bhi.n	20000afe <__libc_init_array+0x1a>
20000b0a:	f640 354c 	movw	r5, #2892	; 0xb4c
20000b0e:	f640 3650 	movw	r6, #2896	; 0xb50
20000b12:	f2c2 0500 	movt	r5, #8192	; 0x2000
20000b16:	f2c2 0600 	movt	r6, #8192	; 0x2000
20000b1a:	1b76      	subs	r6, r6, r5
20000b1c:	f000 f80a 	bl	20000b34 <_init>
20000b20:	10b6      	asrs	r6, r6, #2
20000b22:	d006      	beq.n	20000b32 <__libc_init_array+0x4e>
20000b24:	2400      	movs	r4, #0
20000b26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20000b2a:	3401      	adds	r4, #1
20000b2c:	4798      	blx	r3
20000b2e:	42a6      	cmp	r6, r4
20000b30:	d8f9      	bhi.n	20000b26 <__libc_init_array+0x42>
20000b32:	bd70      	pop	{r4, r5, r6, pc}

20000b34 <_init>:
20000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000b36:	bf00      	nop
20000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000b3a:	bc08      	pop	{r3}
20000b3c:	469e      	mov	lr, r3
20000b3e:	4770      	bx	lr

20000b40 <_fini>:
20000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20000b42:	bf00      	nop
20000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000b46:	bc08      	pop	{r3}
20000b48:	469e      	mov	lr, r3
20000b4a:	4770      	bx	lr

20000b4c <__frame_dummy_init_array_entry>:
20000b4c:	0485 2000                                   ... 

20000b50 <__do_global_dtors_aux_fini_array_entry>:
20000b50:	0471 2000                                   q.. 
