/*
 * Adafruit_GFX_local.h
 *
 *  Created on: Apr 15, 2017
 *      Author: mkothbau
 */
#include <inttypes.h>
#ifndef ADAFRUIT_GFX_LOCAL_H_
#define ADAFRUIT_GFX_LOCAL_H_

  // This MUST be defined by the subclass:
   void drawPixel(int16_t x, int16_t y, uint16_t color) = 0;

  // TRANSACTION API / CORE DRAW API
  // These MAY be overridden by the subclass to provide device-specific
  // optimized code.  Otherwise 'generic' versions are used.
   void startWrite(void);
   void writePixel(int16_t x, int16_t y, uint16_t color);
   void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
   void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
   void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
   void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color);
   void endWrite(void);

   // CONTROL API
     // These MAY be overridden by the subclass to provide device-specific
     // optimized code.  Otherwise 'generic' versions are used.
      void setRotation(uint8_t r);
      void invertDisplay(boolean i);

     // BASIC DRAW API
     // These MAY be overridden by the subclass to provide device-specific
     // optimized code.  Otherwise 'generic' versions are used.
      void
       // It's good to implement those, even if using transaction API
       drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
       drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
       fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color),
       fillScreen(uint16_t color),
       // Optional and probably not necessary to change
       drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color),
       drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);

     // These exist only with Adafruit_GFX (no subclass overrides)
     void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
     void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
         uint16_t color);
     void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color);
	 void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
			 int16_t delta, uint16_t color);
	 void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
			 int16_t x2, int16_t y2, uint16_t color);
	 void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
			 int16_t x2, int16_t y2, uint16_t color);
	 void drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,
			 int16_t radius, uint16_t color);
	 void fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,
			 int16_t radius, uint16_t color);
	 void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap,
			 int16_t w, int16_t h, uint16_t color);
	 void drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap,
			 int16_t w, int16_t h, uint16_t color, uint16_t bg);
	 void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap,
			 int16_t w, int16_t h, uint16_t color);
	 void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap,
			 int16_t w, int16_t h, uint16_t color, uint16_t bg);
	 void drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap,
			 int16_t w, int16_t h, uint16_t color);
	 void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
			 uint16_t bg, uint8_t size);
	 void setCursor(int16_t x, int16_t y);
	 void setTextColor(uint16_t c);
	 void setTextColor(uint16_t c, uint16_t bg);
	 void setTextSize(uint8_t s);
	 void setTextWrap(boolean w);
	 void cp437(boolean x);
	 void setFont(const GFXfont *f );
	 void getTextBounds(char *string, int16_t x, int16_t y,
			 int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);
	 void getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y,
			int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);


     void write(uint8_t);

     int16_t height(void);
     int16_t width(void);

     uint8_t getRotation(void);

       // get current cursor position (get rotation safe maximum values, using: width() for x, height() for y)
     int16_t getCursorX(void);
     int16_t getCursorY(void);
#endif /* ADAFRUIT_GFX_LOCAL_H_ */
