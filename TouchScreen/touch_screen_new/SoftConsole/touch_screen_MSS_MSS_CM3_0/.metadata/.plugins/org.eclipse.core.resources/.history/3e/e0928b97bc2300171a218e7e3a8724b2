/***************************************************
  This is our touchscreen painting example for the Adafruit ILI9341 Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
 ****************************************************/
//This is adapted from the source above - modified for use with the Actel A2F eval kit

#include "Adafruit_GFX_local.h"
#include "Adafruit_ILI9341_local.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_spi/drivers/mss_spi/mss_spi.h"
#include "Adafruit_FT6206.h"

void setup(struct Print * print);
void testText(struct Print * print);
void testLines(struct Print * print, uint16_t color);
void testFastLines(struct Print * print, uint16_t color1, uint16_t color2);
void testRects(struct Print * print, uint16_t color);
void testFilledRects(struct Print * print, uint16_t color1, uint16_t color2);
void testFilledCircles(struct Print * print, uint8_t radius, uint16_t color);
void testCircles(struct Print * print, uint8_t radius, uint16_t color);
void testTriangles(struct Print * print);
void testFilledTriangles(struct Print * print);
void testRoundRects(struct Print * print);
void testFilledRoundRects(struct Print * print);

#define BOXSIZE 100

#define FRAME_X 210
#define FRAME_Y 180
#define FRAME_W 100
#define FRAME_H 50

#define REDBUTTON_X FRAME_X
#define REDBUTTON_Y FRAME_Y
#define REDBUTTON_W (FRAME_W/2)
#define REDBUTTON_H FRAME_H

struct Print * print;

struct Adafruit_FT6206 * ts;

boolean RecordOn = false;

#define min(a,b) (((a)<(b))?(a):(b))

void redBtn()
{
  fillRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, ILI9341_RED);
  fillRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, ILI9341_BLUE);
  drawFrame(print);
  drawChar(print, GREENBUTTON_X + 6 , GREENBUTTON_Y + (GREENBUTTON_H/2), 'O', ILI9341_WHITE,ILI9341_WHITE, 2 );
  drawChar(print, GREENBUTTON_X + 12 , GREENBUTTON_Y + (GREENBUTTON_H/2), 'N', ILI9341_WHITE,ILI9341_WHITE, 2 );
  setTextColor(print, ILI9341_WHITE);
  setTextSize(print, 2);

  RecordOn = false;
}

void drawFrame(struct Print * print)
{
  drawRect(print, FRAME_X, FRAME_Y, FRAME_W, FRAME_H, ILI9341_BLACK);
}

void greenBtn(struct Print * print)
{
  fillRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, ILI9341_GREEN);
  fillRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, ILI9341_BLUE);
  drawFrame(print);
  drawChar(print, REDBUTTON_X + 6 , REDBUTTON_Y + (REDBUTTON_H/2), 'O', ILI9341_WHITE,ILI9341_WHITE, 2);
  drawChar(print, REDBUTTON_X + 12 , REDBUTTON_Y + (REDBUTTON_H/2), 'F', ILI9341_WHITE,ILI9341_WHITE, 2);
  drawChar(print, REDBUTTON_X + 18 , REDBUTTON_Y + (REDBUTTON_H/2), 'F', ILI9341_WHITE,ILI9341_WHITE, 2);

  RecordOn = true;
}

int main()
{
	print = (struct Print *) malloc(sizeof(struct Print));
	print->HEIGHT = ILI9341_TFTHEIGHT;
	print->WIDTH = ILI9341_TFTWIDTH;

	ts = (struct Adafruit_FT6206 *) malloc(sizeof(struct Adafruit_FT6206));



	MSS_SPI_init( &g_mss_spi1 );
	MSS_SPI_configure_master_mode
	(
	    &g_mss_spi1,
	    MSS_SPI_SLAVE_0,
	    MSS_SPI_MODE0,
	    MSS_SPI_PCLK_DIV_256,
	    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
	);
	MSS_SPI_configure_master_mode
		(
		    &g_mss_spi1,
		    MSS_SPI_SLAVE_1,
		    MSS_SPI_MODE0,
		    MSS_SPI_PCLK_DIV_256,
		    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
		);

	//setup(print);
	begin(print);
	fillScreen(print, ILI9341_BLUE);
	setRotation(print, 1);
	ts_begin(ts, FT6206_DEFAULT_THRESSHOLD);

	while(1) {
		struct TS_Point * p;
		p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
		p = getPoint(ts);

		int y =  p->x;
		int x = p->y;

		printf("y: %i\n\r", y);
		printf("x:%i\n\r", x);

		//fillScreen(print, ILI9341_BLACK);
		fillRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, ILI9341_RED);

		fillScreen(print, ILI9341_BLACK);
		//setCursor(print, 50, 50);
		//setTextColor(print, ILI9341_WHITE);  setTextSize(print, 1);
		drawChar( print, 50, 50, 'Y',ILI9341_WHITE, ILI9341_WHITE ,1);
		write(print, 'Y');

		free(p);
	}

	free(print);
	free(ts);
	return 0;
}

