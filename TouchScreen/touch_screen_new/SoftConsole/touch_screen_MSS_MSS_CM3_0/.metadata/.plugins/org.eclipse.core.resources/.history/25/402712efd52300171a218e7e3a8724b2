/***************************************************
  This is our touchscreen painting example for the Adafruit ILI9341 Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
 ****************************************************/
//This is adapted from the source above - modified for use with the Actel A2F eval kit

#include "Adafruit_GFX_local.h"
#include "Adafruit_ILI9341_local.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_spi/drivers/mss_spi/mss_spi.h"
#include "Adafruit_FT6206.h"

void setup(struct Print * print);
void testText(struct Print * print);
void testLines(struct Print * print, uint16_t color);
void testFastLines(struct Print * print, uint16_t color1, uint16_t color2);
void testRects(struct Print * print, uint16_t color);
void testFilledRects(struct Print * print, uint16_t color1, uint16_t color2);
void testFilledCircles(struct Print * print, uint8_t radius, uint16_t color);
void testCircles(struct Print * print, uint8_t radius, uint16_t color);
void testTriangles(struct Print * print);
void testFilledTriangles(struct Print * print);
void testRoundRects(struct Print * print);
void testFilledRoundRects(struct Print * print);

#define BOXSIZE 100

#define FRAME_X 170
#define FRAME_Y 110
#define FRAME_W 150
#define FRAME_H 130

#define REDBUTTON_X FRAME_X
#define REDBUTTON_Y FRAME_Y
#define REDBUTTON_W (FRAME_W)
#define REDBUTTON_H FRAME_H

#define GREENBUTTON_X (REDBUTTON_X )
#define GREENBUTTON_Y REDBUTTON_Y - REDBUTTON_H
#define GREENBUTTON_W REDBUTTON_W
#define GREENBUTTON_H REDBUTTON_H

#define LINEBUTTON_X FRAME_X - FRAME_W - 50
#define LINEBUTTON_Y FRAME_Y
#define LINEBUTTON_W FRAME_W
#define LINEBUTTON_H FRAME_H

#define N64BUTTON_X LINEBUTTON_X
#define N64BUTTON_Y LINEBUTTON_Y - LINEBUTTON_H
#define N64BUTTON_W LINEBUTTON_W
#define N64BUTTON_H LINEBUTTON_H

struct Print * print;

struct Adafruit_FT6206 * ts;

boolean MovementOn = false;
boolean N64ControlOn = false;

#define min(a,b) (((a)<(b))?(a):(b))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void drawFrame(struct Print * print)
{
  drawRect(print, FRAME_X, FRAME_Y, FRAME_W, FRAME_H, ILI9341_BLACK);
}

void redBtn(struct Print * print)
{
	//fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, REDBUTTON_W/8, ILI9341_RED);
	//fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
  drawChar(print, GREENBUTTON_X+(GREENBUTTON_W/3) , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
  drawChar(print, GREENBUTTON_X +(GREENBUTTON_W/3) + 25 , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'N', ILI9341_WHITE,ILI9341_WHITE, 4 );

  drawChar(print, REDBUTTON_X + REDBUTTON_W/4, REDBUTTON_Y + (REDBUTTON_H/2.5), 'O', ILI9341_DARKGREY,ILI9341_RED, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 25 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_DARKGREY,ILI9341_RED, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 50 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_DARKGREY,ILI9341_RED, 4);
  MovementOn = false;
}

void greenBtn(struct Print * print)
{
	//fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
	  drawChar(print, GREENBUTTON_X+(GREENBUTTON_W/3) , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'O', ILI9341_DARKGREY,ILI9341_GREEN, 4 );
	  drawChar(print, GREENBUTTON_X +(GREENBUTTON_W/3) + 25 , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'N', ILI9341_DARKGREY,ILI9341_GREEN, 4 );
	//fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,REDBUTTON_W/8, ILI9341_RED);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4, REDBUTTON_Y + (REDBUTTON_H/2.5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 25 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_WHITE,ILI9341_WHITE, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 50 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_WHITE,ILI9341_WHITE, 4);



  MovementOn = true;
}


void linebutton(struct Print * print)
{
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) , N64BUTTON_Y + (N64BUTTON_H/3), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 25 , N64BUTTON_Y + (N64BUTTON_H/3), 'I', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 50 , N64BUTTON_Y + (N64BUTTON_H/3), 'N', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 75 , N64BUTTON_Y + (N64BUTTON_H/3), 'E', ILI9341_WHITE,ILI9341_WHITE, 4 );

	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) , N64BUTTON_Y + (N64BUTTON_H*2/3), 'F', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 25 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 50 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 75 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 100 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 125 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'W', ILI9341_WHITE,ILI9341_WHITE, 4 );

	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4, LINEBUTTON_Y + (LINEBUTTON_H/2.5), 'N', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 25 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '6', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 50 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '4', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);

	N64ControlOn = false;
	}

void n64button(struct Print * print)
{
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) , N64BUTTON_Y + (N64BUTTON_H/3), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 25 , N64BUTTON_Y + (N64BUTTON_H/3), 'I', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 50 , N64BUTTON_Y + (N64BUTTON_H/3), 'N', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/4) + 75 , N64BUTTON_Y + (N64BUTTON_H/3), 'E', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );

	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) , N64BUTTON_Y + (N64BUTTON_H*2/3), 'F', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 20 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'O', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 40 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 60 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 80 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'O', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/8) + 100 , N64BUTTON_Y + (N64BUTTON_H*2/3), 'W', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );

	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4, LINEBUTTON_Y + (LINEBUTTON_H/2.5), 'N', ILI9341_WHITE,ILI9341_WHITE, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 25 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '6', ILI9341_WHITE,ILI9341_WHITE, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 50 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '4', ILI9341_WHITE,ILI9341_WHITE, 4);

	N64ControlOn = true;
}
void start_stop_buttons(struct Adafruit_FT6206 * ts) {
	if (touched(ts)){
		struct TS_Point * p;
		p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
		p = getPoint(ts);

		p->x = map(p->x, 0, 240, 240, 0);
		p->y = map(p->y, 0, 320, 320, 0);
//			int y =  height(print) - p->x;;
//			int x = p->y;
		int y = height(print) - p->x;
		int x = p->y;

		if (MovementOn)
			{
			  if((x > REDBUTTON_X) && (x < (REDBUTTON_X + REDBUTTON_W))) {
				if ((y > REDBUTTON_Y) && (y <= (REDBUTTON_Y + REDBUTTON_H))) {
					printf("RED BUTTON HIT\n\r");
				  redBtn(print);
				}
			  }
			}
			else //Record is off (MovementOn == false)
			{
			  if((x > GREENBUTTON_X) && (x < (GREENBUTTON_X + GREENBUTTON_W))) {
				if ((y > GREENBUTTON_Y) && (y <= (GREENBUTTON_Y + GREENBUTTON_H))) {
					printf("GREEN BUTTON HIT\n\r");
				  greenBtn(print);
				}
			  }
			}
		free(p);
	}

}

void mode_buttons(struct Adafruit_FT6206 * ts) {
	if (touched(ts)){
		struct TS_Point * p;
		p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
		p = getPoint(ts);

		p->x = map(p->x, 0, 240, 240, 0);
		p->y = map(p->y, 0, 320, 320, 0);
//			int y =  height(print) - p->x;;
//			int x = p->y;
		int y = height(print) - p->x;
		int x = p->y;

		if (N64ControlOn)
			{
			  if((x > LINEBUTTON_X) && (x < (LINEBUTTON_X + LINEBUTTON_W))) {
				if ((y > LINEBUTTON_Y) && (y <= (LINEBUTTON_Y + LINEBUTTON_H))) {
					printf("LINE BUTTON HIT\n\r");
				  linebutton(print);
				}
			  }
			}
			else //Record is off (MovementOn == false)
			{
			  if((x > N64BUTTON_X) && (x < (N64BUTTON_X + N64BUTTON_W))) {
				if ((y > N64BUTTON_Y) && (y <= (N64BUTTON_Y + N64BUTTON_H))) {
					printf("N64 BUTTON HIT\n\r");
				  n64button(print);
				}
			  }
			}
		free(p);
	}
}

void config_spi(void) {
	MSS_SPI_init( &g_mss_spi1 );
		MSS_SPI_configure_master_mode
		(
		    &g_mss_spi1,
		    MSS_SPI_SLAVE_0,
		    MSS_SPI_MODE0,
		    MSS_SPI_PCLK_DIV_8,
		    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
		);
		MSS_SPI_configure_master_mode
			(
			    &g_mss_spi1,
			    MSS_SPI_SLAVE_1,
			    MSS_SPI_MODE0,
			    MSS_SPI_PCLK_DIV_8,
			    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
			);

}

void setup_screen(struct Print * print, struct Adafruit_FT6206 * ts) {
	begin(print);
	ts_begin(ts, FT6206_DEFAULT_THRESSHOLD);
	fillScreen(print, ILI9341_BLACK);
	setRotation(print, 1);

	fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
	fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,REDBUTTON_W/8, ILI9341_RED);
	fillRoundRect(print, N64BUTTON_X, N64BUTTON_Y, N64BUTTON_W, N64BUTTON_H,N64BUTTON_W/8, ILI9341_BLUE);
	fillRoundRect(print, LINEBUTTON_X, LINEBUTTON_Y, LINEBUTTON_W, LINEBUTTON_H,LINEBUTTON_W/8, ILI9341_MAGENTA);
	redBtn(print);
}

int main()
{
	print = (struct Print *) malloc(sizeof(struct Print));
	print->HEIGHT = ILI9341_TFTHEIGHT;
	print->WIDTH = ILI9341_TFTWIDTH;

	ts = (struct Adafruit_FT6206 *) malloc(sizeof(struct Adafruit_FT6206));

	config_spi();
	setup_screen(print, ts);

	while(1) {
		start_stop_buttons(ts);
		uint8_t startStop = MovementOn ? 1:0; //1 -> on (go), 0 -> off (stop)
		mode_buttons(ts);
	}

	free(print);
	free(ts);
	return 0;

}
