/***************************************************
  This is our touchscreen painting example for the Adafruit ILI9341 Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
 ****************************************************/
//This is adapted from the source above - modified for use with the Actel A2F eval kit

#include "Adafruit_GFX_local.h"
#include "Adafruit_ILI9341_local.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_spi/drivers/mss_spi/mss_spi.h"
#include "Adafruit_FT6206.h"

void setup(struct Print * print);
void testText(struct Print * print);
void testLines(struct Print * print, uint16_t color);
void testFastLines(struct Print * print, uint16_t color1, uint16_t color2);
void testRects(struct Print * print, uint16_t color);
void testFilledRects(struct Print * print, uint16_t color1, uint16_t color2);
void testFilledCircles(struct Print * print, uint8_t radius, uint16_t color);
void testCircles(struct Print * print, uint8_t radius, uint16_t color);
void testTriangles(struct Print * print);
void testFilledTriangles(struct Print * print);
void testRoundRects(struct Print * print);
void testFilledRoundRects(struct Print * print);

#define BOXSIZE 100

#define FRAME_X 180
#define FRAME_Y 120
#define FRAME_W 130
#define FRAME_H 110

#define REDBUTTON_X FRAME_X
#define REDBUTTON_Y FRAME_Y
#define REDBUTTON_W (FRAME_W)
#define REDBUTTON_H FRAME_H

//#define GREENBUTTON_X (REDBUTTON_X + REDBUTTON_W)
//#define GREENBUTTON_Y FRAME_Y
//#define GREENBUTTON_W (FRAME_W/2)
//#define GREENBUTTON_H FRAME_H

#define START_STOP_BUTTON_X
#define START_STOP_BUTTON_Y
#define START_STOP_BUTTON_W
#define START_STOP_BUTTON_H

struct Print * print;

struct Adafruit_FT6206 * ts;

boolean RecordOn = false;

#define min(a,b) (((a)<(b))?(a):(b))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void drawFrame(struct Print * print)
{
  drawRect(print, FRAME_X, FRAME_Y, FRAME_W, FRAME_H, ILI9341_BLACK);
}

void redBtn(struct Print * print)
{
	fillRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, ILI9341_BLACK);
	fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, REDBUTTON_W/8, ILI9341_GREEN);
  drawFrame(print);
  drawChar(print, REDBUTTON_X + 6 , REDBUTTON_Y + (REDBUTTON_H/3), 'O', ILI9341_WHITE,ILI9341_WHITE, 2 );
  drawChar(print, REDBUTTON_X + 20 , REDBUTTON_Y + (REDBUTTON_H/3), 'N', ILI9341_WHITE,ILI9341_WHITE, 2 );

  RecordOn = false;
}

void greenBtn(struct Print * print)
{
	fillRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,ILI9341_BLACK);
	fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,REDBUTTON_W/8, ILI9341_RED);
  drawFrame(print);
  drawChar(print, REDBUTTON_X + 6 , REDBUTTON_Y + (REDBUTTON_H/3), 'O', ILI9341_WHITE,ILI9341_WHITE, 2);
  drawChar(print, REDBUTTON_X + 20 , REDBUTTON_Y + (REDBUTTON_H/3), 'F', ILI9341_WHITE,ILI9341_WHITE, 2);
  drawChar(print, REDBUTTON_X + 34 , REDBUTTON_Y + (REDBUTTON_H/3), 'F', ILI9341_WHITE,ILI9341_WHITE, 2);

  RecordOn = true;
}

int main()
{
	print = (struct Print *) malloc(sizeof(struct Print));
	print->HEIGHT = ILI9341_TFTHEIGHT;
	print->WIDTH = ILI9341_TFTWIDTH;

	ts = (struct Adafruit_FT6206 *) malloc(sizeof(struct Adafruit_FT6206));



	MSS_SPI_init( &g_mss_spi1 );
	MSS_SPI_configure_master_mode
	(
	    &g_mss_spi1,
	    MSS_SPI_SLAVE_0,
	    MSS_SPI_MODE0,
	    MSS_SPI_PCLK_DIV_2,
	    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
	);
	MSS_SPI_configure_master_mode
		(
		    &g_mss_spi1,
		    MSS_SPI_SLAVE_1,
		    MSS_SPI_MODE0,
		    MSS_SPI_PCLK_DIV_2,
		    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
		);

	//setup(print);
	begin(print);
	ts_begin(ts, FT6206_DEFAULT_THRESSHOLD);
	fillScreen(print, ILI9341_BLACK);
	setRotation(print, 1);
	redBtn(print);

	while(1) {
		if (touched(ts)){
			struct TS_Point * p;
			p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
			p = getPoint(ts);

		    p->x = map(p->x, 0, 240, 240, 0);
		    p->y = map(p->y, 0, 320, 320, 0);
//			int y =  height(print) - p->x;;
//			int x = p->y;
		    int y = height(print) - p->x;
		    int x = p->y;

			if (RecordOn)
			    {
			      if((x > REDBUTTON_X) && (x < (REDBUTTON_X + REDBUTTON_W))) {
			        if ((y > REDBUTTON_Y) && (y <= (REDBUTTON_Y + REDBUTTON_H))) {
			        	printf("RED BUTTON HIT\n\r");
			          redBtn(print);
			        }
			      }
			    }
			    else //Record is off (RecordOn == false)
			    {
			      if((x > REDBUTTON_X) && (x < (REDBUTTON_X + REDBUTTON_W))) {
			        if ((y > REDBUTTON_Y) && (y <= (REDBUTTON_Y + REDBUTTON_H))) {
						printf("GREEN BUTTON HIT\n\r");
			          greenBtn(print);
			        }
			      }
			    }
			free(p);
		}

	}

	free(print);
	free(ts);
	return 0;

}
