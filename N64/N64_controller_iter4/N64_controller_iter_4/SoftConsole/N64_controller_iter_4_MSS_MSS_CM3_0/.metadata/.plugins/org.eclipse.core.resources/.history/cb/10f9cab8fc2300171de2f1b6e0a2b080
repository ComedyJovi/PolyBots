//main.c
//DETAILS
//ACTIVITY
//Today
//
//Melinda Kothbauer uploaded an item
//1:03 AM
//C
//main.c
//No recorded activity before April 13, 2017
//Sort direction changed to descending.

#include "inttypes.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "drivers/mss_uart/mss_uart.h"
#include "string.h"
#include "drivers/mss_gpio/mss_gpio.h"


#define CONTROLLER_DATA_REG ((uint32_t *) FPGA_FABRIC_BASE)

#define max_axis_thres 127
#define zero_thres 20
#define max_speed_percent 1
#define min_duty_cycle .30
#define mid_duty_cycle .60
#define max_duty_cycle .90

#define y_mask 0xFF000000
#define	x_mask 0x00FF0000
#define	up_mask 0x00000010
#define down_mask 0x00000020
#define	left_mask 0x00000040
#define	right_mask 0x00000080

int8_t change_endianness(int8_t old);
float calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y);
float calc_speed_percent_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
void parse_controller_data(uint32_t controller_data_local, uint8_t dpad_buff[4], int8_t axis_buff[2]);
uint8_t calc_left_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage);
uint8_t calc_right_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage);
uint8_t calc_left_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
uint8_t calc_right_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
uint8_t calc_wheel_direction_stick(int8_t y_axis, int8_t x_axis);
uint8_t calc_wheel_direction_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);

#include "Adafruit_GFX_local.h"
#include "Adafruit_ILI9341_local.h"
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_spi/drivers/mss_spi/mss_spi.h"
#include "Adafruit_FT6206.h"

#define BOXSIZE 100

#define FRAME_X 180
#define FRAME_Y 120
#define FRAME_W 140
#define FRAME_H 120

#define REDBUTTON_X FRAME_X
#define REDBUTTON_Y FRAME_Y
#define REDBUTTON_W (FRAME_W)
#define REDBUTTON_H FRAME_H

#define GREENBUTTON_X (REDBUTTON_X )
#define GREENBUTTON_Y REDBUTTON_Y - REDBUTTON_H
#define GREENBUTTON_W REDBUTTON_W
#define GREENBUTTON_H REDBUTTON_H

#define LINEBUTTON_X FRAME_X - FRAME_W - 30
#define LINEBUTTON_Y FRAME_Y
#define LINEBUTTON_W FRAME_W
#define LINEBUTTON_H FRAME_H

#define N64BUTTON_X LINEBUTTON_X
#define N64BUTTON_Y LINEBUTTON_Y - LINEBUTTON_H
#define N64BUTTON_W LINEBUTTON_W
#define N64BUTTON_H LINEBUTTON_H

struct Print * print;

struct Adafruit_FT6206 * ts;

boolean MovementOn = false;
boolean N64ControlOn = false;

#define min(a,b) (((a)<(b))?(a):(b))

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void drawFrame(struct Print * print)
{
  drawRect(print, FRAME_X, FRAME_Y, FRAME_W, FRAME_H, ILI9341_BLACK);
}

void redBtn(struct Print * print)
{
	//fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H, REDBUTTON_W/8, ILI9341_RED);
	//fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
  drawChar(print, GREENBUTTON_X+(GREENBUTTON_W/3) , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
  drawChar(print, GREENBUTTON_X +(GREENBUTTON_W/3) + 25 , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'N', ILI9341_WHITE,ILI9341_WHITE, 4 );

  drawChar(print, REDBUTTON_X + REDBUTTON_W/4, REDBUTTON_Y + (REDBUTTON_H/2.5), 'O', ILI9341_DARKGREY,ILI9341_RED, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 25 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_DARKGREY,ILI9341_RED, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 50 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_DARKGREY,ILI9341_RED, 4);
  MovementOn = false;
}

void greenBtn(struct Print * print)
{
	//fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
	  drawChar(print, GREENBUTTON_X+(GREENBUTTON_W/3) , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'O', ILI9341_DARKGREY,ILI9341_GREEN, 4 );
	  drawChar(print, GREENBUTTON_X +(GREENBUTTON_W/3) + 25 , GREENBUTTON_Y + (GREENBUTTON_H/2.5), 'N', ILI9341_DARKGREY,ILI9341_GREEN, 4 );
	//fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,REDBUTTON_W/8, ILI9341_RED);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4, REDBUTTON_Y + (REDBUTTON_H/2.5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 25 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_WHITE,ILI9341_WHITE, 4);
  drawChar(print, REDBUTTON_X + REDBUTTON_W/4 + 50 , REDBUTTON_Y + (REDBUTTON_H/2.5), 'F', ILI9341_WHITE,ILI9341_WHITE, 4);



  MovementOn = true;
}


void linebutton(struct Print * print)
{
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) , N64BUTTON_Y + (N64BUTTON_H/5), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 25 , N64BUTTON_Y + (N64BUTTON_H/5), 'I', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 50 , N64BUTTON_Y + (N64BUTTON_H/5), 'N', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 75 , N64BUTTON_Y + (N64BUTTON_H/5), 'E', ILI9341_WHITE,ILI9341_WHITE, 4 );

	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) , N64BUTTON_Y + (N64BUTTON_H*3/5), 'F', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 25 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 50 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 75 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'L', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 100 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'O', ILI9341_WHITE,ILI9341_WHITE, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 125 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'W', ILI9341_WHITE,ILI9341_WHITE, 4 );

	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4, LINEBUTTON_Y + (LINEBUTTON_H/2.5), 'N', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 25 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '6', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 50 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '4', ILI9341_DARKGREY,ILI9341_DARKGREY, 4);

	N64ControlOn = false;
	}

void n64button(struct Print * print)
{
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) , N64BUTTON_Y + (N64BUTTON_H/5), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 25 , N64BUTTON_Y + (N64BUTTON_H/5), 'I', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 50 , N64BUTTON_Y + (N64BUTTON_H/5), 'N', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/5) + 75 , N64BUTTON_Y + (N64BUTTON_H/5), 'E', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );

	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) , N64BUTTON_Y + (N64BUTTON_H*3/5), 'F', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 25 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'O', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 50 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 75 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'L', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 100 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'O', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );
	drawChar(print, N64BUTTON_X +(N64BUTTON_W/10) + 125 , N64BUTTON_Y + (N64BUTTON_H*3/5), 'W', ILI9341_DARKGREY,ILI9341_DARKGREY, 4 );

	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4, LINEBUTTON_Y + (LINEBUTTON_H/2.5), 'N', ILI9341_WHITE,ILI9341_WHITE, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 25 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '6', ILI9341_WHITE,ILI9341_WHITE, 4);
	drawChar(print, LINEBUTTON_X + LINEBUTTON_W/4 + 50 , LINEBUTTON_Y + (LINEBUTTON_H/2.5), '4', ILI9341_WHITE,ILI9341_WHITE, 4);

	N64ControlOn = true;
}
void start_stop_buttons(struct Adafruit_FT6206 * ts) {
	if (touched(ts)){
		struct TS_Point * p;
		p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
		p = getPoint(ts);

		p->x = map(p->x, 0, 240, 240, 0);
		p->y = map(p->y, 0, 320, 320, 0);
//			int y =  height(print) - p->x;;
//			int x = p->y;
		int y = height(print) - p->x;
		int x = p->y;

		if (MovementOn)
			{
			  if((x > REDBUTTON_X) && (x < (REDBUTTON_X + REDBUTTON_W))) {
				if ((y > REDBUTTON_Y) && (y <= (REDBUTTON_Y + REDBUTTON_H))) {
					printf("RED BUTTON HIT\n\r");
				  redBtn(print);
				}
			  }
			}
			else //Record is off (MovementOn == false)
			{
			  if((x > GREENBUTTON_X) && (x < (GREENBUTTON_X + GREENBUTTON_W))) {
				if ((y > GREENBUTTON_Y) && (y <= (GREENBUTTON_Y + GREENBUTTON_H))) {
					printf("GREEN BUTTON HIT\n\r");
				  greenBtn(print);
				}
			  }
			}
		free(p);
	}

}

void mode_buttons(struct Adafruit_FT6206 * ts) {
	if (touched(ts)){
		struct TS_Point * p;
		//p = (struct TS_Point *) malloc(sizeof(struct TS_Point));
		p = getPoint(ts);

		p->x = map(p->x, 0, 240, 240, 0);
		p->y = map(p->y, 0, 320, 320, 0);
//			int y =  height(print) - p->x;;
//			int x = p->y;
		int y = height(print) - p->x;
		int x = p->y;

		if (N64ControlOn)
			{
			  if((x > LINEBUTTON_X) && (x < (LINEBUTTON_X + LINEBUTTON_W))) {
				if ((y > LINEBUTTON_Y) && (y <= (LINEBUTTON_Y + LINEBUTTON_H))) {
					printf("LINE BUTTON HIT\n\r");
				  linebutton(print);
				}
			  }
			}
			else //Record is off (MovementOn == false)
			{
			  if((x > N64BUTTON_X) && (x < (N64BUTTON_X + N64BUTTON_W))) {
				if ((y > N64BUTTON_Y) && (y <= (N64BUTTON_Y + N64BUTTON_H))) {
					printf("N64 BUTTON HIT\n\r");
				  n64button(print);
				}
			  }
			}
		free(p);
	}
}

void config_spi(void) {
	MSS_SPI_init( &g_mss_spi1 );
		MSS_SPI_configure_master_mode
		(
		    &g_mss_spi1,
		    MSS_SPI_SLAVE_0,
		    MSS_SPI_MODE0,
		    MSS_SPI_PCLK_DIV_8,
		    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
		);
		MSS_SPI_configure_master_mode
			(
			    &g_mss_spi1,
			    MSS_SPI_SLAVE_1,
			    MSS_SPI_MODE0,
			    MSS_SPI_PCLK_DIV_8,
			    MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE
			);

}

void setup_screen(struct Print * print, struct Adafruit_FT6206 * ts) {
	begin(print);
	ts_begin(ts, FT6206_DEFAULT_THRESSHOLD);
	fillScreen(print, ILI9341_BLACK);
	setRotation(print, 1);

	fillRoundRect(print, GREENBUTTON_X, GREENBUTTON_Y, GREENBUTTON_W, GREENBUTTON_H, GREENBUTTON_W/8, ILI9341_GREEN);
	fillRoundRect(print, REDBUTTON_X, REDBUTTON_Y, REDBUTTON_W, REDBUTTON_H,REDBUTTON_W/8, ILI9341_RED);
	//fillRoundRect(print, N64BUTTON_X, N64BUTTON_Y, N64BUTTON_W, N64BUTTON_H,N64BUTTON_W/8, ILI9341_BLUE);
	//fillRoundRect(print, LINEBUTTON_X, LINEBUTTON_Y, LINEBUTTON_W, LINEBUTTON_H,LINEBUTTON_W/8, ILI9341_MAGENTA);
	redBtn(print);
	n64button(print);
}

int main(void)
{
	uint32_t controller_data; //holds all 32 bits of controller data

	float speed_percent;

	uint8_t right_wheel_duty_cycle;
	uint8_t left_wheel_duty_cycle;

	uint8_t right_wheel_direction; //0 -> stopped, 1 -> forward, 2 -> backward
	uint8_t left_wheel_direction; //0 -> stopped, 1 -> forward, 2 -> backward

	int relevant_data_bytes = 8;
	uint8_t dpad_buff[4];
	int8_t axis_buff[2];
	//uint8_t mode = 1; //1 = N64 control

	uint8_t sync_byte = 0xef;

	uint8_t tx_buff[relevant_data_bytes];

	MSS_UART_init(
			&g_mss_uart1,
			MSS_UART_9600_BAUD,
			MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	);

	print = (struct Print *) malloc(sizeof(struct Print));
	print->HEIGHT = ILI9341_TFTHEIGHT;
	print->WIDTH = ILI9341_TFTWIDTH;

	ts = (struct Adafruit_FT6206 *) malloc(sizeof(struct Adafruit_FT6206));

	config_spi();
	setup_screen(print, ts);

	MSS_GPIO_init();
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);

	while( 1 )
	{
		controller_data = *CONTROLLER_DATA_REG;
		//printf("Controller Data: %" PRIu32 "\n\r",controller_data);

		parse_controller_data(controller_data, dpad_buff, axis_buff); //fills in controller_buff with data from buttons/stick

		uint8_t use_stick = !dpad_buff[0] && !dpad_buff[1] && !dpad_buff[2] && !dpad_buff[3];

		//calc speed percentage
		//check if Dpad is pressed -> if no, use analog stick coordinates, otherwise 100% for dPad
		speed_percent = (use_stick) ?
				calc_speed_percent_stick(abs(axis_buff[1]), abs(axis_buff[0])) :
				calc_speed_percent_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		right_wheel_duty_cycle = (use_stick) ?
				calc_right_wheel_duty_cycle_stick(axis_buff[1], axis_buff[0], speed_percent) :
				calc_right_wheel_duty_cycle_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);
		left_wheel_duty_cycle = (use_stick) ?
						calc_left_wheel_duty_cycle_stick(axis_buff[1], axis_buff[0], speed_percent) :
						calc_left_wheel_duty_cycle_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		right_wheel_direction = (use_stick) ?
				calc_wheel_direction_stick(axis_buff[0], axis_buff[1]) :
				calc_wheel_direction_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);
		left_wheel_direction = (use_stick) ?
				calc_wheel_direction_stick(axis_buff[0], axis_buff[1]) :
				calc_wheel_direction_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		start_stop_buttons(ts);
		uint8_t startStop = MovementOn ? 1:0; //1 -> on (go), 0 -> off (stop)
		mode_buttons(ts);
		uint8_t mode = !N64ControlOn ? 1: 0; //1->N64, 0 -> line following


		tx_buff[0] = sync_byte;
		tx_buff[1] = startStop ? right_wheel_duty_cycle : 0;
		tx_buff[2] = startStop ? right_wheel_direction : (mode) ?0:1;
		tx_buff[3] = startStop ? left_wheel_duty_cycle : 0;
		tx_buff[4] = startStop ? left_wheel_direction : (mode) ?0:1;
		tx_buff[5] = startStop ? mode : 1;
		tx_buff[6] = 128; //garbage
		tx_buff[7] = 99; //garbage

		printf("%d\n\r", mode);


		MSS_UART_polled_tx(&g_mss_uart1, tx_buff, sizeof(tx_buff));

	}
	free(print);
	free(ts);
	return 0;
}


int8_t change_endianness(int8_t old) {
	int8_t new = 0;
	int i;
	for(i = 0; i < 8; i++) {
		new = new + ((0b00000001 &(old>>(7-i)))<< i);
	}
	return new;
}

float calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y) {
	float speed_percentage;
	if(abs_x >= max_axis_thres && abs_y >= max_axis_thres) {
		speed_percentage =  max_speed_percent;
	}
	else{
		if(abs_x >= max_axis_thres && abs_y < zero_thres) {

			speed_percentage = (float)abs_y/max_axis_thres;
			speed_percentage = (speed_percentage > 0) ? speed_percentage : max_speed_percent;
		}
		else if(abs_y >= max_axis_thres && abs_x < zero_thres) {
			speed_percentage = (float)abs_x/max_axis_thres;
			speed_percentage = (speed_percentage > 0) ? speed_percentage : max_speed_percent;
		}
		else {
			speed_percentage = (float)(abs_x + abs_y)/(2*max_axis_thres);
		}
	}
	return speed_percentage;
}

float calc_speed_percent_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right) {
	float speed_percentage;
	if((up && !down) || (!up && down) || (right && !left) || (!right && left)) {
		 speed_percentage = max_speed_percent;
	}
	else {
		speed_percentage = 0.0;
	}
	return speed_percentage;
}

void parse_controller_data(uint32_t controller_data_local, uint8_t dpad_buff[4], int8_t axis_buff[2]) {

	int8_t y_axis; //all 8 bits hold data about y_axis data from controller
	int8_t x_axis; //all 8 bits hold data about x_axis data from controller
	uint8_t up; //1 or 0
	uint8_t down; //1 or 0
	uint8_t left; //1 or 0
	uint8_t right; //1 or 0

	y_axis = (int8_t)((controller_data_local & y_mask) >> 24);
	y_axis = change_endianness(y_axis);

	x_axis = (int8_t)((controller_data_local & x_mask) >> 16);
	x_axis = change_endianness(x_axis);

	up = (uint8_t)((controller_data_local & up_mask) >> 4);
	down = (uint8_t)((controller_data_local & down_mask) >> 5);
	left = (uint8_t)((controller_data_local & left_mask) >> 6);
	right =(uint8_t)((controller_data_local & right_mask) >> 7);

	axis_buff[0] = y_axis;
	axis_buff[1] = x_axis;
	dpad_buff[0] = up;
	dpad_buff[1] = down;
	dpad_buff[2] = left;
	dpad_buff[3] = right;

}

uint8_t calc_left_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage) {
	float duty_cycle;
	if(x_axis > 0) {
		duty_cycle = speed_percentage * abs(x_axis)/max_axis_thres;
		duty_cycle = (duty_cycle > min_duty_cycle) ? duty_cycle : min_duty_cycle;
	}
	else if(x_axis <0) {
		if(y_axis > 0) {
			duty_cycle = mid_duty_cycle;
		}else {
			duty_cycle = min_duty_cycle;
		}
	}
	else {
		duty_cycle = (y_axis == 0) ? 0 : speed_percentage * max_duty_cycle;
	}

	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_right_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage) {
	float duty_cycle;
	if(x_axis < 0) {
		duty_cycle = speed_percentage * abs(x_axis)/max_axis_thres;
		duty_cycle = (duty_cycle > min_duty_cycle) ? duty_cycle : min_duty_cycle;
	}
	else if(x_axis > 0) {
		if(y_axis > 0) {
			duty_cycle = mid_duty_cycle;
		}else {
			duty_cycle = min_duty_cycle;
		}
	}
	else {
		duty_cycle = (y_axis == 0) ? 0 : speed_percentage * max_duty_cycle;
	}
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_left_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right){
	float duty_cycle;
	if((right && !left && !up && !down) || (right && !left && up && down)) { //net of right only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && left && !up && !down) || (!right && left && up && down)){ //net left only
		duty_cycle = min_duty_cycle;
	}
	else if((!right && !left && up && !down) || (right && left && up && !down)){ //net up only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && !up && down) || (right && left && !up && down)){ //net down only
		duty_cycle = max_duty_cycle;
	}
	else if(down && right) { //down right
		duty_cycle = mid_duty_cycle;
	}
	else if(down && left) { //down left
		duty_cycle = min_duty_cycle;
	}
	else if(up && left) { //up left
		duty_cycle = min_duty_cycle;
	}
	else if(up && right) { //up right
		duty_cycle = mid_duty_cycle;
	}
	else {
		duty_cycle = 0;
	}
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_right_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right) {
	float duty_cycle;
	if((right && !left && !up && !down) || (right && !left && up && down)) { //net of right only
		duty_cycle = min_duty_cycle;
	}
	else if((!right && left && !up && !down) || (!right && left && up && down)){ //net left only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && up && !down) || (right && left && up && !down)){ //net up only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && !up && down) || (right && left && !up && down)){ //net down only
		duty_cycle = max_duty_cycle;
	}
	else if(down && right) { //down right
		duty_cycle = min_duty_cycle;
	}
	else if(down && left) { //down left
		duty_cycle = mid_duty_cycle;
	}
	else if(up && left) { //up left
		duty_cycle = mid_duty_cycle;
	}
	else if(up && right) { //up right
		duty_cycle = min_duty_cycle;
	}
	else {
		duty_cycle = 0;
	}
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_wheel_direction_stick(int8_t y_axis, int8_t x_axis) {
	if(y_axis > 0) {
		return 1;
	}
	else if(y_axis < 0) {
		return 2;
	}
	else if(x_axis > 0 || x_axis < 0){
		return 1;
	}
	else{
		return 0;
	}
}

uint8_t calc_wheel_direction_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right){
	if((up && !down) || (left && !right && !down) || (right && !left)){
		return 1;
	}
	else if ((down && !up)){
		return 2;
	}
	else return 0;
}
