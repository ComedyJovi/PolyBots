#include "inttypes.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "drivers/mss_uart/mss_uart.h"
#include "string.h"


#define CONTROLLER_DATA_REG ((uint32_t *) FPGA_FABRIC_BASE)

#define max_axis_thres 127
#define zero_thres 20
#define max_speed_percent 1
#define min_duty_cycle .30
#define mid_duty_cycle .60
#define max_duty_cycle .90

#define y_mask 0xFF000000
#define	x_mask 0x00FF0000
#define	up_mask 0x00000010
#define down_mask 0x00000020
#define	left_mask 0x00000040
#define	right_mask 0x00000080

int8_t change_endianness(int8_t old);
float calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y);
float calc_speed_percent_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
void parse_controller_data(uint32_t controller_data_local, uint8_t dpad_buff[4], int8_t axis_buff[2]);
uint8_t calc_left_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage);
uint8_t calc_right_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage);
uint8_t calc_left_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
uint8_t calc_right_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);
uint8_t calc_wheel_direction_stick(int8_t y_axis);
uint8_t calc_wheel_direction_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right);

int main(void)
{
	uint32_t controller_data; //holds all 32 bits of controller data

	float speed_percent;

	uint8_t right_wheel_duty_cycle;
	uint8_t left_wheel_duty_cycle;

	uint8_t right_wheel_direction; //0 -> stopped, 1 -> forward, 2 -> backward
	uint8_t left_wheel_direction; //0 -> stopped, 1 -> forward, 2 -> backward

	int relevant_data_bytes = 5;
	uint8_t dpad_buff[4];
	int8_t axis_buff[2];
	uint8_t mode = 1; //1 = N64 control

	uint8_t tx_buff[relevant_data_bytes];
	uint8_t prev_tx_buff[relevant_data_bytes];
	int i = 0;

	MSS_UART_init(
			&g_mss_uart1,
			MSS_UART_57600_BAUD,
			MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	);

	while( 1 )
	{
		controller_data = *CONTROLLER_DATA_REG;

		parse_controller_data(controller_data, dpad_buff, axis_buff); //fills in controller_buff with data from buttons/stick

		uint8_t use_stick = !dpad_buff[0] && !dpad_buff[1] && !dpad_buff[2] && !dpad_buff[3];

		//calc speed percentage
		//check if Dpad is pressed -> if no, use analog stick coordinates, otherwise 100% for dPad
		speed_percent = (use_stick) ?
				calc_speed_percent_stick(abs(axis_buff[1]), abs(axis_buff[0])) :
				calc_speed_percent_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		right_wheel_duty_cycle = (use_stick) ?
				calc_right_wheel_duty_cycle_stick(axis_buff[1], axis_buff[0], speed_percent) :
				calc_right_wheel_duty_cycle_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);
		left_wheel_duty_cycle = (use_stick) ?
						calc_left_wheel_duty_cycle_stick(axis_buff[1], axis_buff[0], speed_percent) :
						calc_left_wheel_duty_cycle_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		right_wheel_direction = (use_stick) ?
				calc_wheel_direction_stick(axis_buff[0]) :
				calc_wheel_direction_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);
		left_wheel_direction = (use_stick) ?
				calc_wheel_direction_stick(axis_buff[0]) :
				calc_wheel_direction_dpad(dpad_buff[0], dpad_buff[1], dpad_buff[2], dpad_buff[3]);

		for(i=0;i<5;i++)
		{
			prev_tx_buff[i] = tx_buff[i];
		}

		tx_buff[0] = right_wheel_duty_cycle;
		tx_buff[1] = right_wheel_direction;
		tx_buff[2] = left_wheel_duty_cycle;
		tx_buff[3] = left_wheel_direction;
		tx_buff[4] = mode;

		for(i=0;i<5;i++)
		{
			if(prev_tx_buff[i] != tx_buff[i]){
				MSS_UART_polled_tx(&g_mss_uart1, tx_buff, sizeof(tx_buff));
				break;\
			}
		}
		if(strcmp(,))


		//printf("Controller Data: %" PRIu32 "\n",controller_buff);

	}

	return 0;
}


int8_t change_endianness(int8_t old) {
	int8_t new = 0;
	int i;
	for(i = 0; i < 8; i++) {
		new = new + ((0b00000001 &(old>>(7-i)))<< i);
	}
	return new;
}

float calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y) {
	float speed_percentage;
	if(abs_x >= max_axis_thres && abs_y >= max_axis_thres) {
		speed_percentage =  max_speed_percent;
	}
	else{
		if(abs_x >= max_axis_thres && abs_y < zero_thres) {

			speed_percentage = (float)abs_y/max_axis_thres;
			speed_percentage = (speed_percentage > 0) ? speed_percentage : max_speed_percent;
		}
		else if(abs_y >= max_axis_thres && abs_x < zero_thres) {
			speed_percentage = (float)abs_x/max_axis_thres;
			speed_percentage = (speed_percentage > 0) ? speed_percentage : max_speed_percent;
		}
		else {
			speed_percentage = (float)(abs_x + abs_y)/(2*max_axis_thres);
		}
	}
	return speed_percentage;
}

float calc_speed_percent_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right) {
	float speed_percentage;
	if((up && !down) || (!up && down) || (right && !left) || (!right && left)) {
		 speed_percentage = max_speed_percent;
	}
	else {
		speed_percentage = 0.0;
	}
	return speed_percentage;
}

void parse_controller_data(uint32_t controller_data_local, uint8_t dpad_buff[4], int8_t axis_buff[2]) {

	int8_t y_axis; //all 8 bits hold data about y_axis data from controller
	int8_t x_axis; //all 8 bits hold data about x_axis data from controller
	uint8_t up; //1 or 0
	uint8_t down; //1 or 0
	uint8_t left; //1 or 0
	uint8_t right; //1 or 0

	y_axis = (int8_t)((controller_data_local & y_mask) >> 24);
	y_axis = change_endianness(y_axis);

	x_axis = (int8_t)((controller_data_local & x_mask) >> 16);
	x_axis = change_endianness(x_axis);

	up = (uint8_t)((controller_data_local & up_mask) >> 4);
	down = (uint8_t)((controller_data_local & down_mask) >> 5);
	left = (uint8_t)((controller_data_local & left_mask) >> 6);
	right =(uint8_t)((controller_data_local & right_mask) >> 7);

	axis_buff[0] = y_axis;
	axis_buff[1] = x_axis;
	dpad_buff[0] = up;
	dpad_buff[1] = down;
	dpad_buff[2] = left;
	dpad_buff[3] = right;

}

uint8_t calc_left_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage) {
	float duty_cycle;
	if(x_axis > 0) {
		duty_cycle = speed_percentage * abs(x_axis)/max_axis_thres;
		duty_cycle = (duty_cycle > min_duty_cycle) ? duty_cycle : min_duty_cycle;
	}
	else if(x_axis <0) {
		duty_cycle = min_duty_cycle;
	}
	else {
		duty_cycle = (y_axis == 0) ? 0 : speed_percentage * max_duty_cycle;
	}
	uint8_t temp = (uint8_t) floor(duty_cycle *100);

	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_right_wheel_duty_cycle_stick(int8_t x_axis, int8_t y_axis, float speed_percentage) {
	float duty_cycle;
	if(x_axis < 0) {
		duty_cycle = speed_percentage * abs(x_axis)/max_axis_thres;
		duty_cycle = (duty_cycle > min_duty_cycle) ? duty_cycle : min_duty_cycle;
	}
	else if(x_axis > 0) {
		duty_cycle = min_duty_cycle;
	}
	else {
		duty_cycle = (y_axis == 0) ? 0 : speed_percentage * max_duty_cycle;
	}
	uint8_t temp = (uint8_t) floor(duty_cycle *100);
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_left_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right){
	float duty_cycle;
	if((right && !left && !up && !down) || (right && !left && up && down)) { //net of right only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && left && !up && !down) || (!right && left && up && down)){ //net left only
		duty_cycle = min_duty_cycle;
	}
	else if((!right && !left && up && !down) || (right && left && up && !down)){ //net up only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && !up && down) || (right && left && !up && down)){ //net down only
		duty_cycle = max_duty_cycle;
	}
	else if(down && right) { //down right
		duty_cycle = mid_duty_cycle;
	}
	else if(down && left) { //down left
		duty_cycle = min_duty_cycle;
	}
	else if(up && left) { //up left
		duty_cycle = min_duty_cycle;
	}
	else if(up && right) { //up right
		duty_cycle = mid_duty_cycle;
	}
	else {
		duty_cycle = 0;
	}
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_right_wheel_duty_cycle_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right) {
	float duty_cycle;
	if((right && !left && !up && !down) || (right && !left && up && down)) { //net of right only
		duty_cycle = min_duty_cycle;
	}
	else if((!right && left && !up && !down) || (!right && left && up && down)){ //net left only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && up && !down) || (right && left && up && !down)){ //net up only
		duty_cycle = max_duty_cycle;
	}
	else if((!right && !left && !up && down) || (right && left && !up && down)){ //net down only
		duty_cycle = max_duty_cycle;
	}
	else if(down && right) { //down right
		duty_cycle = min_duty_cycle;
	}
	else if(down && left) { //down left
		duty_cycle = mid_duty_cycle;
	}
	else if(up && left) { //up left
		duty_cycle = mid_duty_cycle;
	}
	else if(up && right) { //up right
		duty_cycle = min_duty_cycle;
	}
	else {
		duty_cycle = 0;
	}
	return (uint8_t) floor(duty_cycle*100);
}

uint8_t calc_wheel_direction_stick(int8_t y_axis) {
	if(y_axis > 0) {
		return 1;
	}
	else if(y_axis < 0) {
		return 2;
	}
	else {
		return 0;
	}
}

uint8_t calc_wheel_direction_dpad(uint8_t up, uint8_t down, uint8_t left, uint8_t right){
	if((up && !down) || (left && !right && !down) || (right && !left)){
		return 1;
	}
	else if ((down && !up)){
		return 2;
	}
	else return 0;
}

