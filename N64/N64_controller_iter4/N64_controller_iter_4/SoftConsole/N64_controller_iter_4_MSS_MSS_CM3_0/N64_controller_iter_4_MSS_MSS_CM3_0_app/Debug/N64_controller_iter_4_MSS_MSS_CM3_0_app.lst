
N64_controller_iter_4_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000180c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  2000180c  2000180c  0000980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20001828  20001828  00009828  2**2
                  ALLOC
  3 .stack        00003000  20001880  20001880  00009828  2**0
                  ALLOC
  4 .comment      000000ac  00000000  00000000  00009828  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000098d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000423  00000000  00000000  0000996c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039c4  00000000  00000000  00009d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000853  00000000  00000000  0000d753  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000115d  00000000  00000000  0000dfa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000480  00000000  00000000  0000f104  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018d3  00000000  00000000  0000f584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d46  00000000  00000000  00010e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0001ef7e  00000000  00000000  00011b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00030b1b  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000048  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000d25 	.word	0x20000d25
2000006c:	20000d55 	.word	0x20000d55
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001185 	.word	0x20001185
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	2000180c 	.word	0x2000180c
20000450:	2000180c 	.word	0x2000180c
20000454:	2000180c 	.word	0x2000180c
20000458:	20001828 	.word	0x20001828
2000045c:	00000000 	.word	0x00000000
20000460:	20001828 	.word	0x20001828
20000464:	20001880 	.word	0x20001880
20000468:	2000178d 	.word	0x2000178d
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f641 0328 	movw	r3, #6184	; 0x1828
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f641 000c 	movw	r0, #6156	; 0x180c
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
int8_t change_endianness(int8_t old);
uint8_t calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y);
void parse_controller_data(uint32_t controller_data_local, uint8_t controller_buff[6]);

int main(void)
{
200004a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
200004a4:	b087      	sub	sp, #28
200004a6:	af00      	add	r7, sp, #0
	uint32_t controller_data; //holds all 32 bits of controller data

	uint8_t speed_percent;

	int relevant_data_bytes = 6;
200004a8:	f04f 0c06 	mov.w	ip, #6
200004ac:	f8c7 c014 	str.w	ip, [r7, #20]
	uint8_t controller_buff[relevant_data_bytes];
200004b0:	697e      	ldr	r6, [r7, #20]
200004b2:	f106 3cff 	add.w	ip, r6, #4294967295
200004b6:	f8c7 c004 	str.w	ip, [r7, #4]
200004ba:	46b4      	mov	ip, r6
200004bc:	4664      	mov	r4, ip
200004be:	f04f 0500 	mov.w	r5, #0
200004c2:	f04f 38ff 	mov.w	r8, #4294967295
200004c6:	f04f 090f 	mov.w	r9, #15
200004ca:	ea04 0408 	and.w	r4, r4, r8
200004ce:	ea05 0509 	and.w	r5, r5, r9
200004d2:	ea4f 7c54 	mov.w	ip, r4, lsr #29
200004d6:	ea4f 01c5 	mov.w	r1, r5, lsl #3
200004da:	ea4c 0101 	orr.w	r1, ip, r1
200004de:	ea4f 00c4 	mov.w	r0, r4, lsl #3
200004e2:	f04f 34ff 	mov.w	r4, #4294967295
200004e6:	f04f 050f 	mov.w	r5, #15
200004ea:	ea00 0004 	and.w	r0, r0, r4
200004ee:	ea01 0105 	and.w	r1, r1, r5
200004f2:	4631      	mov	r1, r6
200004f4:	4608      	mov	r0, r1
200004f6:	f04f 0100 	mov.w	r1, #0
200004fa:	f04f 34ff 	mov.w	r4, #4294967295
200004fe:	f04f 050f 	mov.w	r5, #15
20000502:	ea00 0004 	and.w	r0, r0, r4
20000506:	ea01 0105 	and.w	r1, r1, r5
2000050a:	ea4f 7c50 	mov.w	ip, r0, lsr #29
2000050e:	ea4f 03c1 	mov.w	r3, r1, lsl #3
20000512:	ea4c 0303 	orr.w	r3, ip, r3
20000516:	ea4f 02c0 	mov.w	r2, r0, lsl #3
2000051a:	f04f 30ff 	mov.w	r0, #4294967295
2000051e:	f04f 010f 	mov.w	r1, #15
20000522:	ea02 0200 	and.w	r2, r2, r0
20000526:	ea03 0301 	and.w	r3, r3, r1
2000052a:	4633      	mov	r3, r6
2000052c:	f103 0307 	add.w	r3, r3, #7
20000530:	f103 0307 	add.w	r3, r3, #7
20000534:	ea4f 03d3 	mov.w	r3, r3, lsr #3
20000538:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000053c:	ebad 0d03 	sub.w	sp, sp, r3
20000540:	466b      	mov	r3, sp
20000542:	f103 0307 	add.w	r3, r3, #7
20000546:	ea4f 03d3 	mov.w	r3, r3, lsr #3
2000054a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000054e:	60bb      	str	r3, [r7, #8]
	//uint8_t tx_buff[relevant_data_bytes];

	MSS_UART_init(
20000550:	f641 002c 	movw	r0, #6188	; 0x182c
20000554:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000558:	f44f 4161 	mov.w	r1, #57600	; 0xe100
2000055c:	f04f 0203 	mov.w	r2, #3
20000560:	f000 fd68 	bl	20001034 <MSS_UART_init>
			MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	);

	while( 1 )
	{
		controller_data = *CONTROLLER_DATA_REG;
20000564:	f240 0300 	movw	r3, #0
20000568:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000056c:	681b      	ldr	r3, [r3, #0]
2000056e:	60fb      	str	r3, [r7, #12]

		parse_controller_data(controller_data, controller_buff);
20000570:	68bb      	ldr	r3, [r7, #8]
20000572:	68f8      	ldr	r0, [r7, #12]
20000574:	4619      	mov	r1, r3
20000576:	f000 f8c9 	bl	2000070c <parse_controller_data>

		speed_percent = (!controller_buff[2] && !controller_buff[3] && !controller_buff[4] && !controller_buff[5] ) ?
2000057a:	68bb      	ldr	r3, [r7, #8]
2000057c:	789b      	ldrb	r3, [r3, #2]
2000057e:	2b00      	cmp	r3, #0
20000580:	d115      	bne.n	200005ae <main+0x10e>
20000582:	68bb      	ldr	r3, [r7, #8]
20000584:	78db      	ldrb	r3, [r3, #3]
20000586:	2b00      	cmp	r3, #0
20000588:	d111      	bne.n	200005ae <main+0x10e>
2000058a:	68bb      	ldr	r3, [r7, #8]
2000058c:	791b      	ldrb	r3, [r3, #4]
2000058e:	2b00      	cmp	r3, #0
20000590:	d10d      	bne.n	200005ae <main+0x10e>
20000592:	68bb      	ldr	r3, [r7, #8]
20000594:	795b      	ldrb	r3, [r3, #5]
20000596:	2b00      	cmp	r3, #0
20000598:	d109      	bne.n	200005ae <main+0x10e>
				calc_speed_percent_stick(abs(controller_buff[1]), abs(controller_buff[0])) :
2000059a:	68bb      	ldr	r3, [r7, #8]
2000059c:	785a      	ldrb	r2, [r3, #1]
2000059e:	68bb      	ldr	r3, [r7, #8]
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	4610      	mov	r0, r2
200005a4:	4619      	mov	r1, r3
200005a6:	f000 f83d 	bl	20000624 <calc_speed_percent_stick>
200005aa:	4603      	mov	r3, r0
	{
		controller_data = *CONTROLLER_DATA_REG;

		parse_controller_data(controller_data, controller_buff);

		speed_percent = (!controller_buff[2] && !controller_buff[3] && !controller_buff[4] && !controller_buff[5] ) ?
200005ac:	e001      	b.n	200005b2 <main+0x112>
200005ae:	f04f 0364 	mov.w	r3, #100	; 0x64
200005b2:	74fb      	strb	r3, [r7, #19]
				calc_speed_percent_stick(abs(controller_buff[1]), abs(controller_buff[0])) :
				100;

		MSS_UART_polled_tx(&g_mss_uart1, controller_buff, sizeof(controller_buff));
200005b4:	68ba      	ldr	r2, [r7, #8]
200005b6:	4633      	mov	r3, r6
200005b8:	f641 002c 	movw	r0, #6188	; 0x182c
200005bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005c0:	4611      	mov	r1, r2
200005c2:	461a      	mov	r2, r3
200005c4:	f000 f8fa 	bl	200007bc <MSS_UART_polled_tx>

		//printf("Controller Data: %" PRIu32 "\n",controller_buff);

	}
200005c8:	e7cc      	b.n	20000564 <main+0xc4>
200005ca:	bf00      	nop

200005cc <change_endianness>:

	return 0;
}


int8_t change_endianness(int8_t old) {
200005cc:	b480      	push	{r7}
200005ce:	b085      	sub	sp, #20
200005d0:	af00      	add	r7, sp, #0
200005d2:	4603      	mov	r3, r0
200005d4:	71fb      	strb	r3, [r7, #7]
	int8_t new = 0;
200005d6:	f04f 0300 	mov.w	r3, #0
200005da:	72fb      	strb	r3, [r7, #11]
	int i;
	for(i = 0; i < 8; i++) {
200005dc:	f04f 0300 	mov.w	r3, #0
200005e0:	60fb      	str	r3, [r7, #12]
200005e2:	e014      	b.n	2000060e <change_endianness+0x42>
		new = new + ((0b00000001 &(old>>(7-i)))<< i);
200005e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
200005e8:	68fb      	ldr	r3, [r7, #12]
200005ea:	f1c3 0307 	rsb	r3, r3, #7
200005ee:	fa42 f303 	asr.w	r3, r2, r3
200005f2:	f003 0201 	and.w	r2, r3, #1
200005f6:	68fb      	ldr	r3, [r7, #12]
200005f8:	fa02 f303 	lsl.w	r3, r2, r3
200005fc:	b2da      	uxtb	r2, r3
200005fe:	7afb      	ldrb	r3, [r7, #11]
20000600:	4413      	add	r3, r2
20000602:	b2db      	uxtb	r3, r3
20000604:	72fb      	strb	r3, [r7, #11]


int8_t change_endianness(int8_t old) {
	int8_t new = 0;
	int i;
	for(i = 0; i < 8; i++) {
20000606:	68fb      	ldr	r3, [r7, #12]
20000608:	f103 0301 	add.w	r3, r3, #1
2000060c:	60fb      	str	r3, [r7, #12]
2000060e:	68fb      	ldr	r3, [r7, #12]
20000610:	2b07      	cmp	r3, #7
20000612:	dde7      	ble.n	200005e4 <change_endianness+0x18>
		new = new + ((0b00000001 &(old>>(7-i)))<< i);
	}
	return new;
20000614:	7afb      	ldrb	r3, [r7, #11]
20000616:	b25b      	sxtb	r3, r3
}
20000618:	4618      	mov	r0, r3
2000061a:	f107 0714 	add.w	r7, r7, #20
2000061e:	46bd      	mov	sp, r7
20000620:	bc80      	pop	{r7}
20000622:	4770      	bx	lr

20000624 <calc_speed_percent_stick>:

uint8_t calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y) {
20000624:	b580      	push	{r7, lr}
20000626:	b084      	sub	sp, #16
20000628:	af00      	add	r7, sp, #0
2000062a:	4602      	mov	r2, r0
2000062c:	460b      	mov	r3, r1
2000062e:	71fa      	strb	r2, [r7, #7]
20000630:	71bb      	strb	r3, [r7, #6]
	uint8_t speed_percentage;
	if(abs_x >= max_axis_thres && abs_y >= max_axis_thres) {
20000632:	79fb      	ldrb	r3, [r7, #7]
20000634:	2b7e      	cmp	r3, #126	; 0x7e
20000636:	d906      	bls.n	20000646 <calc_speed_percent_stick+0x22>
20000638:	79bb      	ldrb	r3, [r7, #6]
2000063a:	2b7e      	cmp	r3, #126	; 0x7e
2000063c:	d903      	bls.n	20000646 <calc_speed_percent_stick+0x22>
		speed_percentage =  100;
2000063e:	f04f 0364 	mov.w	r3, #100	; 0x64
20000642:	73fb      	strb	r3, [r7, #15]
	return new;
}

uint8_t calc_speed_percent_stick(uint8_t abs_x, uint8_t abs_y) {
	uint8_t speed_percentage;
	if(abs_x >= max_axis_thres && abs_y >= max_axis_thres) {
20000644:	e055      	b.n	200006f2 <calc_speed_percent_stick+0xce>
		speed_percentage =  100;
	}
	else if(abs_x >= max_axis_thres) {
20000646:	79fb      	ldrb	r3, [r7, #7]
20000648:	2b7e      	cmp	r3, #126	; 0x7e
2000064a:	d91c      	bls.n	20000686 <calc_speed_percent_stick+0x62>
		speed_percentage = (float)abs_y/max_axis_thres*100;
2000064c:	79bb      	ldrb	r3, [r7, #6]
2000064e:	4618      	mov	r0, r3
20000650:	f000 fed4 	bl	200013fc <__aeabi_ui2f>
20000654:	4603      	mov	r3, r0
20000656:	4618      	mov	r0, r3
20000658:	4929      	ldr	r1, [pc, #164]	; (20000700 <calc_speed_percent_stick+0xdc>)
2000065a:	f000 ffdb 	bl	20001614 <__aeabi_fdiv>
2000065e:	4603      	mov	r3, r0
20000660:	4618      	mov	r0, r3
20000662:	4928      	ldr	r1, [pc, #160]	; (20000704 <calc_speed_percent_stick+0xe0>)
20000664:	f000 ff22 	bl	200014ac <__aeabi_fmul>
20000668:	4603      	mov	r3, r0
2000066a:	4618      	mov	r0, r3
2000066c:	f001 f86e 	bl	2000174c <__aeabi_f2uiz>
20000670:	4603      	mov	r3, r0
20000672:	73fb      	strb	r3, [r7, #15]
		speed_percentage = (speed_percentage > 0) ? speed_percentage : 100;
20000674:	7bfb      	ldrb	r3, [r7, #15]
20000676:	2b00      	cmp	r3, #0
20000678:	d001      	beq.n	2000067e <calc_speed_percent_stick+0x5a>
2000067a:	7bfb      	ldrb	r3, [r7, #15]
2000067c:	e001      	b.n	20000682 <calc_speed_percent_stick+0x5e>
2000067e:	f04f 0364 	mov.w	r3, #100	; 0x64
20000682:	73fb      	strb	r3, [r7, #15]
20000684:	e035      	b.n	200006f2 <calc_speed_percent_stick+0xce>
	}
	else if(abs_y >= max_axis_thres) {
20000686:	79bb      	ldrb	r3, [r7, #6]
20000688:	2b7e      	cmp	r3, #126	; 0x7e
2000068a:	d91c      	bls.n	200006c6 <calc_speed_percent_stick+0xa2>
		speed_percentage = (float)abs_x/max_axis_thres*100;
2000068c:	79fb      	ldrb	r3, [r7, #7]
2000068e:	4618      	mov	r0, r3
20000690:	f000 feb4 	bl	200013fc <__aeabi_ui2f>
20000694:	4603      	mov	r3, r0
20000696:	4618      	mov	r0, r3
20000698:	4919      	ldr	r1, [pc, #100]	; (20000700 <calc_speed_percent_stick+0xdc>)
2000069a:	f000 ffbb 	bl	20001614 <__aeabi_fdiv>
2000069e:	4603      	mov	r3, r0
200006a0:	4618      	mov	r0, r3
200006a2:	4918      	ldr	r1, [pc, #96]	; (20000704 <calc_speed_percent_stick+0xe0>)
200006a4:	f000 ff02 	bl	200014ac <__aeabi_fmul>
200006a8:	4603      	mov	r3, r0
200006aa:	4618      	mov	r0, r3
200006ac:	f001 f84e 	bl	2000174c <__aeabi_f2uiz>
200006b0:	4603      	mov	r3, r0
200006b2:	73fb      	strb	r3, [r7, #15]
		speed_percentage = (speed_percentage > 0) ? speed_percentage : 100;
200006b4:	7bfb      	ldrb	r3, [r7, #15]
200006b6:	2b00      	cmp	r3, #0
200006b8:	d001      	beq.n	200006be <calc_speed_percent_stick+0x9a>
200006ba:	7bfb      	ldrb	r3, [r7, #15]
200006bc:	e001      	b.n	200006c2 <calc_speed_percent_stick+0x9e>
200006be:	f04f 0364 	mov.w	r3, #100	; 0x64
200006c2:	73fb      	strb	r3, [r7, #15]
200006c4:	e015      	b.n	200006f2 <calc_speed_percent_stick+0xce>
	}
	else {
		speed_percentage = (float)(abs_x + abs_y)/(2*max_axis_thres)*100;
200006c6:	79fa      	ldrb	r2, [r7, #7]
200006c8:	79bb      	ldrb	r3, [r7, #6]
200006ca:	4413      	add	r3, r2
200006cc:	4618      	mov	r0, r3
200006ce:	f000 fe99 	bl	20001404 <__aeabi_i2f>
200006d2:	4603      	mov	r3, r0
200006d4:	4618      	mov	r0, r3
200006d6:	490c      	ldr	r1, [pc, #48]	; (20000708 <calc_speed_percent_stick+0xe4>)
200006d8:	f000 ff9c 	bl	20001614 <__aeabi_fdiv>
200006dc:	4603      	mov	r3, r0
200006de:	4618      	mov	r0, r3
200006e0:	4908      	ldr	r1, [pc, #32]	; (20000704 <calc_speed_percent_stick+0xe0>)
200006e2:	f000 fee3 	bl	200014ac <__aeabi_fmul>
200006e6:	4603      	mov	r3, r0
200006e8:	4618      	mov	r0, r3
200006ea:	f001 f82f 	bl	2000174c <__aeabi_f2uiz>
200006ee:	4603      	mov	r3, r0
200006f0:	73fb      	strb	r3, [r7, #15]
	}
	return speed_percentage;
200006f2:	7bfb      	ldrb	r3, [r7, #15]
}
200006f4:	4618      	mov	r0, r3
200006f6:	f107 0710 	add.w	r7, r7, #16
200006fa:	46bd      	mov	sp, r7
200006fc:	bd80      	pop	{r7, pc}
200006fe:	bf00      	nop
20000700:	42fe0000 	.word	0x42fe0000
20000704:	42c80000 	.word	0x42c80000
20000708:	437e0000 	.word	0x437e0000

2000070c <parse_controller_data>:

void parse_controller_data(uint32_t controller_data_local, uint8_t controller_buff[6]) {
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
20000714:	6039      	str	r1, [r7, #0]
	uint8_t up; //1 or 0
	uint8_t down; //1 or 0
	uint8_t left; //1 or 0
	uint8_t right; //1 or 0

	y_axis = (int8_t)((controller_data_local & y_mask) >> 24);
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	ea4f 6313 	mov.w	r3, r3, lsr #24
2000071c:	72bb      	strb	r3, [r7, #10]
	y_axis = change_endianness(y_axis);
2000071e:	f997 300a 	ldrsb.w	r3, [r7, #10]
20000722:	4618      	mov	r0, r3
20000724:	f7ff ff52 	bl	200005cc <change_endianness>
20000728:	4603      	mov	r3, r0
2000072a:	b2db      	uxtb	r3, r3
2000072c:	72bb      	strb	r3, [r7, #10]

	x_axis = (int8_t)((controller_data_local & x_mask) >> 16);
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
20000734:	ea4f 4313 	mov.w	r3, r3, lsr #16
20000738:	72fb      	strb	r3, [r7, #11]
	x_axis = change_endianness(x_axis);
2000073a:	f997 300b 	ldrsb.w	r3, [r7, #11]
2000073e:	4618      	mov	r0, r3
20000740:	f7ff ff44 	bl	200005cc <change_endianness>
20000744:	4603      	mov	r3, r0
20000746:	b2db      	uxtb	r3, r3
20000748:	72fb      	strb	r3, [r7, #11]

	up = (uint8_t)((controller_data_local & up_mask) >> 4);
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	f003 0310 	and.w	r3, r3, #16
20000750:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000754:	733b      	strb	r3, [r7, #12]
	down = (uint8_t)((controller_data_local & down_mask) >> 5);
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	f003 0320 	and.w	r3, r3, #32
2000075c:	ea4f 1353 	mov.w	r3, r3, lsr #5
20000760:	737b      	strb	r3, [r7, #13]
	left = (uint8_t)((controller_data_local & left_mask) >> 6);
20000762:	687b      	ldr	r3, [r7, #4]
20000764:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000768:	ea4f 1393 	mov.w	r3, r3, lsr #6
2000076c:	73bb      	strb	r3, [r7, #14]
	right =(uint8_t)((controller_data_local & right_mask) >> 7);
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000774:	ea4f 13d3 	mov.w	r3, r3, lsr #7
20000778:	73fb      	strb	r3, [r7, #15]

	controller_buff[0] = y_axis;
2000077a:	7aba      	ldrb	r2, [r7, #10]
2000077c:	683b      	ldr	r3, [r7, #0]
2000077e:	701a      	strb	r2, [r3, #0]
	controller_buff[1] = x_axis;
20000780:	683b      	ldr	r3, [r7, #0]
20000782:	f103 0301 	add.w	r3, r3, #1
20000786:	7afa      	ldrb	r2, [r7, #11]
20000788:	701a      	strb	r2, [r3, #0]
	controller_buff[2] = up;
2000078a:	683b      	ldr	r3, [r7, #0]
2000078c:	f103 0302 	add.w	r3, r3, #2
20000790:	7b3a      	ldrb	r2, [r7, #12]
20000792:	701a      	strb	r2, [r3, #0]
	controller_buff[3] = down;
20000794:	683b      	ldr	r3, [r7, #0]
20000796:	f103 0303 	add.w	r3, r3, #3
2000079a:	7b7a      	ldrb	r2, [r7, #13]
2000079c:	701a      	strb	r2, [r3, #0]
	controller_buff[4] = left;
2000079e:	683b      	ldr	r3, [r7, #0]
200007a0:	f103 0304 	add.w	r3, r3, #4
200007a4:	7bba      	ldrb	r2, [r7, #14]
200007a6:	701a      	strb	r2, [r3, #0]
	controller_buff[5] = right;
200007a8:	683b      	ldr	r3, [r7, #0]
200007aa:	f103 0305 	add.w	r3, r3, #5
200007ae:	7bfa      	ldrb	r2, [r7, #15]
200007b0:	701a      	strb	r2, [r3, #0]

}
200007b2:	f107 0710 	add.w	r7, r7, #16
200007b6:	46bd      	mov	sp, r7
200007b8:	bd80      	pop	{r7, pc}
200007ba:	bf00      	nop

200007bc <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
200007bc:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200007c0:	f641 0354 	movw	r3, #6228	; 0x1854
200007c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007c8:	4298      	cmp	r0, r3
200007ca:	d006      	beq.n	200007da <MSS_UART_polled_tx+0x1e>
200007cc:	f641 032c 	movw	r3, #6188	; 0x182c
200007d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007d4:	4298      	cmp	r0, r3
200007d6:	d000      	beq.n	200007da <MSS_UART_polled_tx+0x1e>
200007d8:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
200007da:	b901      	cbnz	r1, 200007de <MSS_UART_polled_tx+0x22>
200007dc:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
200007de:	b902      	cbnz	r2, 200007e2 <MSS_UART_polled_tx+0x26>
200007e0:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
200007e2:	f641 0354 	movw	r3, #6228	; 0x1854
200007e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007ea:	4298      	cmp	r0, r3
200007ec:	d005      	beq.n	200007fa <MSS_UART_polled_tx+0x3e>
200007ee:	f641 032c 	movw	r3, #6188	; 0x182c
200007f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f6:	4298      	cmp	r0, r3
200007f8:	d133      	bne.n	20000862 <MSS_UART_polled_tx+0xa6>
200007fa:	1e13      	subs	r3, r2, #0
200007fc:	bf18      	it	ne
200007fe:	2301      	movne	r3, #1
20000800:	2900      	cmp	r1, #0
20000802:	bf0c      	ite	eq
20000804:	2300      	moveq	r3, #0
20000806:	f003 0301 	andne.w	r3, r3, #1
2000080a:	2b00      	cmp	r3, #0
2000080c:	d029      	beq.n	20000862 <MSS_UART_polled_tx+0xa6>
2000080e:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000812:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20000814:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20000818:	6803      	ldr	r3, [r0, #0]
2000081a:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
2000081c:	f890 c00a 	ldrb.w	ip, [r0, #10]
20000820:	ea43 0c0c 	orr.w	ip, r3, ip
20000824:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
20000828:	f013 0f20 	tst.w	r3, #32
2000082c:	d017      	beq.n	2000085e <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
2000082e:	2a0f      	cmp	r2, #15
20000830:	d904      	bls.n	2000083c <MSS_UART_polled_tx+0x80>
20000832:	4656      	mov	r6, sl
20000834:	46bc      	mov	ip, r7
20000836:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000838:	440f      	add	r7, r1
2000083a:	e004      	b.n	20000846 <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
2000083c:	b90a      	cbnz	r2, 20000842 <MSS_UART_polled_tx+0x86>
2000083e:	4643      	mov	r3, r8
20000840:	e00b      	b.n	2000085a <MSS_UART_polled_tx+0x9e>
20000842:	4616      	mov	r6, r2
20000844:	e7f6      	b.n	20000834 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000846:	6804      	ldr	r4, [r0, #0]
20000848:	5cfd      	ldrb	r5, [r7, r3]
2000084a:	7025      	strb	r5, [r4, #0]
2000084c:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000850:	f103 0301 	add.w	r3, r3, #1
20000854:	429e      	cmp	r6, r3
20000856:	d8f6      	bhi.n	20000846 <MSS_UART_polled_tx+0x8a>
20000858:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
2000085a:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
2000085e:	2a00      	cmp	r2, #0
20000860:	d1da      	bne.n	20000818 <MSS_UART_polled_tx+0x5c>
    }
}
20000862:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
20000866:	4770      	bx	lr

20000868 <MSS_UART_polled_tx_string>:
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
20000868:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t char_idx = 0U;
    uint32_t fill_size;
    uint_fast8_t data_byte;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000086a:	f641 0354 	movw	r3, #6228	; 0x1854
2000086e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000872:	4298      	cmp	r0, r3
20000874:	d006      	beq.n	20000884 <MSS_UART_polled_tx_string+0x1c>
20000876:	f641 032c 	movw	r3, #6188	; 0x182c
2000087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000087e:	4298      	cmp	r0, r3
20000880:	d000      	beq.n	20000884 <MSS_UART_polled_tx_string+0x1c>
20000882:	be00      	bkpt	0x0000
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );
20000884:	b901      	cbnz	r1, 20000888 <MSS_UART_polled_tx_string+0x20>
20000886:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000888:	f641 0354 	movw	r3, #6228	; 0x1854
2000088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000890:	4298      	cmp	r0, r3
20000892:	d005      	beq.n	200008a0 <MSS_UART_polled_tx_string+0x38>
20000894:	f641 032c 	movw	r3, #6188	; 0x182c
20000898:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000089c:	4298      	cmp	r0, r3
2000089e:	d128      	bne.n	200008f2 <MSS_UART_polled_tx_string+0x8a>
200008a0:	b339      	cbz	r1, 200008f2 <MSS_UART_polled_tx_string+0x8a>
          ( p_sz_string != ( (uint8_t *)0 ) ) )
    {
        /* Get the first data byte from the input buffer */
        data_byte = (uint_fast8_t)p_sz_string[char_idx];
200008a2:	780d      	ldrb	r5, [r1, #0]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
200008a4:	b32d      	cbz	r5, 200008f2 <MSS_UART_polled_tx_string+0x8a>
200008a6:	f04f 0c00 	mov.w	ip, #0

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
200008aa:	4666      	mov	r6, ip
         */
        while ( 0U != data_byte )
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
200008ac:	6804      	ldr	r4, [r0, #0]
200008ae:	7d23      	ldrb	r3, [r4, #20]
                this_uart->status |= status;
200008b0:	7a82      	ldrb	r2, [r0, #10]
200008b2:	ea43 0202 	orr.w	r2, r3, r2
200008b6:	7282      	strb	r2, [r0, #10]
            } while ( !( status & MSS_UART_THRE ) );
200008b8:	f013 0f20 	tst.w	r3, #32
200008bc:	d0f7      	beq.n	200008ae <MSS_UART_polled_tx_string+0x46>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
200008be:	b1c5      	cbz	r5, 200008f2 <MSS_UART_polled_tx_string+0x8a>
200008c0:	4633      	mov	r3, r6
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
200008c2:	eb01 070c 	add.w	r7, r1, ip
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
200008c6:	6802      	ldr	r2, [r0, #0]
200008c8:	b2ed      	uxtb	r5, r5
200008ca:	7015      	strb	r5, [r2, #0]
                ++fill_size;
200008cc:	f103 0301 	add.w	r3, r3, #1
200008d0:	eb03 040c 	add.w	r4, r3, ip
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
200008d4:	5cfd      	ldrb	r5, [r7, r3]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
200008d6:	2b0f      	cmp	r3, #15
200008d8:	bf8c      	ite	hi
200008da:	2200      	movhi	r2, #0
200008dc:	2201      	movls	r2, #1
200008de:	2d00      	cmp	r5, #0
200008e0:	bf0c      	ite	eq
200008e2:	2200      	moveq	r2, #0
200008e4:	f002 0201 	andne.w	r2, r2, #1
200008e8:	2a00      	cmp	r2, #0
200008ea:	d1ec      	bne.n	200008c6 <MSS_UART_polled_tx_string+0x5e>

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
200008ec:	b10d      	cbz	r5, 200008f2 <MSS_UART_polled_tx_string+0x8a>
200008ee:	46a4      	mov	ip, r4
200008f0:	e7dc      	b.n	200008ac <MSS_UART_polled_tx_string+0x44>
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
            }
        }
    }
}
200008f2:	bcf0      	pop	{r4, r5, r6, r7}
200008f4:	4770      	bx	lr
200008f6:	bf00      	nop

200008f8 <MSS_UART_irq_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
200008f8:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200008fa:	f641 0354 	movw	r3, #6228	; 0x1854
200008fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000902:	4298      	cmp	r0, r3
20000904:	d006      	beq.n	20000914 <MSS_UART_irq_tx+0x1c>
20000906:	f641 032c 	movw	r3, #6188	; 0x182c
2000090a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000090e:	4298      	cmp	r0, r3
20000910:	d000      	beq.n	20000914 <MSS_UART_irq_tx+0x1c>
20000912:	be00      	bkpt	0x0000
    ASSERT( pbuff != ((uint8_t *)0) );
20000914:	b901      	cbnz	r1, 20000918 <MSS_UART_irq_tx+0x20>
20000916:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000918:	b90a      	cbnz	r2, 2000091e <MSS_UART_irq_tx+0x26>
2000091a:	be00      	bkpt	0x0000
2000091c:	e036      	b.n	2000098c <MSS_UART_irq_tx+0x94>

    if ( ( tx_size > 0U ) && ( pbuff != ((uint8_t *)0) ) &&
2000091e:	2900      	cmp	r1, #0
20000920:	d034      	beq.n	2000098c <MSS_UART_irq_tx+0x94>
       ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) )
20000922:	f641 0354 	movw	r3, #6228	; 0x1854
20000926:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000092a:	4298      	cmp	r0, r3
2000092c:	d005      	beq.n	2000093a <MSS_UART_irq_tx+0x42>
2000092e:	f641 032c 	movw	r3, #6188	; 0x182c
20000932:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000936:	4298      	cmp	r0, r3
20000938:	d128      	bne.n	2000098c <MSS_UART_irq_tx+0x94>
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
2000093a:	60c1      	str	r1, [r0, #12]
        this_uart->tx_buff_size = tx_size;
2000093c:	6102      	str	r2, [r0, #16]
        this_uart->tx_idx = (uint16_t)0;
2000093e:	f04f 0300 	mov.w	r3, #0
20000942:	6143      	str	r3, [r0, #20]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000944:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000946:	b219      	sxth	r1, r3
20000948:	ea4f 1151 	mov.w	r1, r1, lsr #5
2000094c:	f003 031f 	and.w	r3, r3, #31
20000950:	f04f 0201 	mov.w	r2, #1
20000954:	fa02 f403 	lsl.w	r4, r2, r3
20000958:	f24e 1300 	movw	r3, #57600	; 0xe100
2000095c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000960:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000964:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
20000968:	f640 31a1 	movw	r1, #2977	; 0xba1
2000096c:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000970:	6201      	str	r1, [r0, #32]

        /* enables TX interrupt */
        this_uart->hw_reg_bit->IER_ETBEI = (uint32_t)1;
20000972:	6841      	ldr	r1, [r0, #4]
20000974:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000978:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000097a:	b208      	sxth	r0, r1
2000097c:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000980:	f001 011f 	and.w	r1, r1, #31
20000984:	fa02 f201 	lsl.w	r2, r2, r1
20000988:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
2000098c:	bc10      	pop	{r4}
2000098e:	4770      	bx	lr

20000990 <MSS_UART_tx_complete>:
)
{
    int8_t ret_value = 0;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000990:	f641 0354 	movw	r3, #6228	; 0x1854
20000994:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000998:	4298      	cmp	r0, r3
2000099a:	d009      	beq.n	200009b0 <MSS_UART_tx_complete+0x20>
2000099c:	f641 032c 	movw	r3, #6188	; 0x182c
200009a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009a4:	4298      	cmp	r0, r3
200009a6:	d003      	beq.n	200009b0 <MSS_UART_tx_complete+0x20>
200009a8:	be00      	bkpt	0x0000
200009aa:	f04f 0000 	mov.w	r0, #0
200009ae:	4770      	bx	lr

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
200009b0:	6803      	ldr	r3, [r0, #0]
200009b2:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
200009b4:	7a82      	ldrb	r2, [r0, #10]
200009b6:	ea43 0202 	orr.w	r2, r3, r2
200009ba:	7282      	strb	r2, [r0, #10]

        if ( ( TX_COMPLETE == this_uart->tx_buff_size ) &&
200009bc:	6902      	ldr	r2, [r0, #16]
200009be:	b112      	cbz	r2, 200009c6 <MSS_UART_tx_complete+0x36>
200009c0:	f04f 0000 	mov.w	r0, #0
200009c4:	4770      	bx	lr
200009c6:	f3c3 1080 	ubfx	r0, r3, #6, #1
        {
            ret_value = (int8_t)1;
        }
    }
    return ret_value;
}
200009ca:	4770      	bx	lr

200009cc <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
200009cc:	b410      	push	{r4}
200009ce:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200009d0:	f641 0054 	movw	r0, #6228	; 0x1854
200009d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009d8:	4283      	cmp	r3, r0
200009da:	d006      	beq.n	200009ea <MSS_UART_get_rx+0x1e>
200009dc:	f641 002c 	movw	r0, #6188	; 0x182c
200009e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e4:	4283      	cmp	r3, r0
200009e6:	d000      	beq.n	200009ea <MSS_UART_get_rx+0x1e>
200009e8:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
200009ea:	b901      	cbnz	r1, 200009ee <MSS_UART_get_rx+0x22>
200009ec:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
200009ee:	b902      	cbnz	r2, 200009f2 <MSS_UART_get_rx+0x26>
200009f0:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
200009f2:	f641 0054 	movw	r0, #6228	; 0x1854
200009f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009fa:	4283      	cmp	r3, r0
200009fc:	d005      	beq.n	20000a0a <MSS_UART_get_rx+0x3e>
200009fe:	f641 002c 	movw	r0, #6188	; 0x182c
20000a02:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a06:	4283      	cmp	r3, r0
20000a08:	d12a      	bne.n	20000a60 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
20000a0a:	1e10      	subs	r0, r2, #0
20000a0c:	bf18      	it	ne
20000a0e:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000a10:	2900      	cmp	r1, #0
20000a12:	bf0c      	ite	eq
20000a14:	2400      	moveq	r4, #0
20000a16:	f000 0401 	andne.w	r4, r0, #1
20000a1a:	b30c      	cbz	r4, 20000a60 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20000a1c:	681c      	ldr	r4, [r3, #0]
20000a1e:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20000a22:	7a9c      	ldrb	r4, [r3, #10]
20000a24:	ea4c 0404 	orr.w	r4, ip, r4
20000a28:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000a2a:	ea1c 0f00 	tst.w	ip, r0
20000a2e:	d017      	beq.n	20000a60 <MSS_UART_get_rx+0x94>
20000a30:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20000a34:	681c      	ldr	r4, [r3, #0]
20000a36:	f894 c000 	ldrb.w	ip, [r4]
20000a3a:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
20000a3e:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
20000a42:	681c      	ldr	r4, [r3, #0]
20000a44:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
20000a48:	7a9c      	ldrb	r4, [r3, #10]
20000a4a:	ea4c 0404 	orr.w	r4, ip, r4
20000a4e:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000a50:	4282      	cmp	r2, r0
20000a52:	bf94      	ite	ls
20000a54:	2400      	movls	r4, #0
20000a56:	f00c 0401 	andhi.w	r4, ip, #1
20000a5a:	2c00      	cmp	r4, #0
20000a5c:	d1ea      	bne.n	20000a34 <MSS_UART_get_rx+0x68>
20000a5e:	e001      	b.n	20000a64 <MSS_UART_get_rx+0x98>
20000a60:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
20000a64:	bc10      	pop	{r4}
20000a66:	4770      	bx	lr

20000a68 <MSS_UART_enable_irq>:
MSS_UART_enable_irq
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
20000a68:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000a6a:	f641 0354 	movw	r3, #6228	; 0x1854
20000a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a72:	4298      	cmp	r0, r3
20000a74:	d007      	beq.n	20000a86 <MSS_UART_enable_irq+0x1e>
20000a76:	f641 032c 	movw	r3, #6188	; 0x182c
20000a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a7e:	4298      	cmp	r0, r3
20000a80:	d001      	beq.n	20000a86 <MSS_UART_enable_irq+0x1e>
20000a82:	be00      	bkpt	0x0000
20000a84:	e022      	b.n	20000acc <MSS_UART_enable_irq+0x64>

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000a86:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000a88:	fa0f fc83 	sxth.w	ip, r3
20000a8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
20000a90:	f003 031f 	and.w	r3, r3, #31
20000a94:	f04f 0201 	mov.w	r2, #1
20000a98:	fa02 f403 	lsl.w	r4, r2, r3
20000a9c:	f24e 1300 	movw	r3, #57600	; 0xe100
20000aa0:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000aa4:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
20000aa8:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER |= irq_mask;
20000aac:	6804      	ldr	r4, [r0, #0]
20000aae:	f894 c004 	ldrb.w	ip, [r4, #4]
20000ab2:	ea41 010c 	orr.w	r1, r1, ip
20000ab6:	7121      	strb	r1, [r4, #4]

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000ab8:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000aba:	b208      	sxth	r0, r1
20000abc:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000ac0:	f001 011f 	and.w	r1, r1, #31
20000ac4:	fa02 f201 	lsl.w	r2, r2, r1
20000ac8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000acc:	bc10      	pop	{r4}
20000ace:	4770      	bx	lr

20000ad0 <MSS_UART_disable_irq>:
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000ad0:	f641 0354 	movw	r3, #6228	; 0x1854
20000ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad8:	4298      	cmp	r0, r3
20000ada:	d007      	beq.n	20000aec <MSS_UART_disable_irq+0x1c>
20000adc:	f641 032c 	movw	r3, #6188	; 0x182c
20000ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ae4:	4298      	cmp	r0, r3
20000ae6:	d001      	beq.n	20000aec <MSS_UART_disable_irq+0x1c>
20000ae8:	be00      	bkpt	0x0000
20000aea:	4770      	bx	lr
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER &= ( (uint8_t)~irq_mask );
20000aec:	6803      	ldr	r3, [r0, #0]
20000aee:	791a      	ldrb	r2, [r3, #4]
20000af0:	ea22 0201 	bic.w	r2, r2, r1
20000af4:	711a      	strb	r2, [r3, #4]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000af6:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000af8:	b218      	sxth	r0, r3
20000afa:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000afe:	f003 031f 	and.w	r3, r3, #31
20000b02:	f04f 0201 	mov.w	r2, #1
20000b06:	fa02 f203 	lsl.w	r2, r2, r3
20000b0a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000b0e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000b12:	f100 0c60 	add.w	ip, r0, #96	; 0x60
20000b16:	f843 202c 	str.w	r2, [r3, ip, lsl #2]

        if( irq_mask == IIRF_MASK )
20000b1a:	290f      	cmp	r1, #15
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000b1c:	bf01      	itttt	eq
20000b1e:	f24e 1300 	movweq	r3, #57600	; 0xe100
20000b22:	f2ce 0300 	movteq	r3, #57344	; 0xe000
20000b26:	3020      	addeq	r0, #32
20000b28:	f843 2020 	streq.w	r2, [r3, r0, lsl #2]
20000b2c:	4770      	bx	lr
20000b2e:	bf00      	nop

20000b30 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000b30:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000b32:	f641 0354 	movw	r3, #6228	; 0x1854
20000b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b3a:	4298      	cmp	r0, r3
20000b3c:	d007      	beq.n	20000b4e <MSS_UART_isr+0x1e>
20000b3e:	f641 032c 	movw	r3, #6188	; 0x182c
20000b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b46:	4298      	cmp	r0, r3
20000b48:	d001      	beq.n	20000b4e <MSS_UART_isr+0x1e>
20000b4a:	be00      	bkpt	0x0000
20000b4c:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000b4e:	6803      	ldr	r3, [r0, #0]
20000b50:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
20000b52:	f003 030f 	and.w	r3, r3, #15
20000b56:	2b0c      	cmp	r3, #12
20000b58:	d820      	bhi.n	20000b9c <MSS_UART_isr+0x6c>
20000b5a:	e8df f003 	tbb	[pc, r3]
20000b5e:	1f07      	.short	0x1f07
20000b60:	1f131f0d 	.word	0x1f131f0d
20000b64:	1f1f1f19 	.word	0x1f1f1f19
20000b68:	1f1f      	.short	0x1f1f
20000b6a:	13          	.byte	0x13
20000b6b:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000b6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
20000b6e:	b90b      	cbnz	r3, 20000b74 <MSS_UART_isr+0x44>
20000b70:	be00      	bkpt	0x0000
20000b72:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000b74:	4798      	blx	r3
20000b76:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000b78:	6a03      	ldr	r3, [r0, #32]
20000b7a:	b90b      	cbnz	r3, 20000b80 <MSS_UART_isr+0x50>
20000b7c:	be00      	bkpt	0x0000
20000b7e:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
20000b80:	4798      	blx	r3
20000b82:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000b84:	69c3      	ldr	r3, [r0, #28]
20000b86:	b90b      	cbnz	r3, 20000b8c <MSS_UART_isr+0x5c>
20000b88:	be00      	bkpt	0x0000
20000b8a:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
20000b8c:	4798      	blx	r3
20000b8e:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000b90:	6983      	ldr	r3, [r0, #24]
20000b92:	b90b      	cbnz	r3, 20000b98 <MSS_UART_isr+0x68>
20000b94:	be00      	bkpt	0x0000
20000b96:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
20000b98:	4798      	blx	r3
20000b9a:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000b9c:	be00      	bkpt	0x0000
20000b9e:	bd08      	pop	{r3, pc}

20000ba0 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000ba0:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000ba2:	f641 0354 	movw	r3, #6228	; 0x1854
20000ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000baa:	4298      	cmp	r0, r3
20000bac:	d006      	beq.n	20000bbc <default_tx_handler+0x1c>
20000bae:	f641 032c 	movw	r3, #6188	; 0x182c
20000bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb6:	4298      	cmp	r0, r3
20000bb8:	d000      	beq.n	20000bbc <default_tx_handler+0x1c>
20000bba:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20000bbc:	68c2      	ldr	r2, [r0, #12]
20000bbe:	b902      	cbnz	r2, 20000bc2 <default_tx_handler+0x22>
20000bc0:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20000bc2:	6901      	ldr	r1, [r0, #16]
20000bc4:	b901      	cbnz	r1, 20000bc8 <default_tx_handler+0x28>
20000bc6:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000bc8:	f641 0354 	movw	r3, #6228	; 0x1854
20000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd0:	4298      	cmp	r0, r3
20000bd2:	d005      	beq.n	20000be0 <default_tx_handler+0x40>
20000bd4:	f641 032c 	movw	r3, #6188	; 0x182c
20000bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bdc:	4298      	cmp	r0, r3
20000bde:	d130      	bne.n	20000c42 <default_tx_handler+0xa2>
20000be0:	2a00      	cmp	r2, #0
20000be2:	d02e      	beq.n	20000c42 <default_tx_handler+0xa2>
20000be4:	2900      	cmp	r1, #0
20000be6:	d02c      	beq.n	20000c42 <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000be8:	6803      	ldr	r3, [r0, #0]
20000bea:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000bec:	7a82      	ldrb	r2, [r0, #10]
20000bee:	ea43 0202 	orr.w	r2, r3, r2
20000bf2:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20000bf4:	f013 0f20 	tst.w	r3, #32
20000bf8:	d01a      	beq.n	20000c30 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20000bfa:	6902      	ldr	r2, [r0, #16]
20000bfc:	6943      	ldr	r3, [r0, #20]
20000bfe:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20000c02:	2b0f      	cmp	r3, #15
20000c04:	d904      	bls.n	20000c10 <default_tx_handler+0x70>
20000c06:	f04f 0c10 	mov.w	ip, #16
20000c0a:	f04f 0300 	mov.w	r3, #0
20000c0e:	e002      	b.n	20000c16 <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000c10:	b173      	cbz	r3, 20000c30 <default_tx_handler+0x90>
20000c12:	469c      	mov	ip, r3
20000c14:	e7f9      	b.n	20000c0a <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20000c16:	6802      	ldr	r2, [r0, #0]
20000c18:	68c4      	ldr	r4, [r0, #12]
20000c1a:	6941      	ldr	r1, [r0, #20]
20000c1c:	5c61      	ldrb	r1, [r4, r1]
20000c1e:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
20000c20:	6942      	ldr	r2, [r0, #20]
20000c22:	f102 0201 	add.w	r2, r2, #1
20000c26:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000c28:	f103 0301 	add.w	r3, r3, #1
20000c2c:	4563      	cmp	r3, ip
20000c2e:	d3f2      	bcc.n	20000c16 <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20000c30:	6942      	ldr	r2, [r0, #20]
20000c32:	6903      	ldr	r3, [r0, #16]
20000c34:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20000c36:	bf01      	itttt	eq
20000c38:	2300      	moveq	r3, #0
20000c3a:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20000c3c:	6842      	ldreq	r2, [r0, #4]
20000c3e:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
20000c42:	bc10      	pop	{r4}
20000c44:	4770      	bx	lr
20000c46:	bf00      	nop

20000c48 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20000c48:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c4a:	f641 0354 	movw	r3, #6228	; 0x1854
20000c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c52:	4298      	cmp	r0, r3
20000c54:	d006      	beq.n	20000c64 <MSS_UART_set_rx_handler+0x1c>
20000c56:	f641 032c 	movw	r3, #6188	; 0x182c
20000c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c5e:	4298      	cmp	r0, r3
20000c60:	d000      	beq.n	20000c64 <MSS_UART_set_rx_handler+0x1c>
20000c62:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20000c64:	b901      	cbnz	r1, 20000c68 <MSS_UART_set_rx_handler+0x20>
20000c66:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
20000c68:	2ac0      	cmp	r2, #192	; 0xc0
20000c6a:	d900      	bls.n	20000c6e <MSS_UART_set_rx_handler+0x26>
20000c6c:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000c6e:	f641 0354 	movw	r3, #6228	; 0x1854
20000c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c76:	4298      	cmp	r0, r3
20000c78:	d005      	beq.n	20000c86 <MSS_UART_set_rx_handler+0x3e>
20000c7a:	f641 032c 	movw	r3, #6188	; 0x182c
20000c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c82:	4298      	cmp	r0, r3
20000c84:	d12f      	bne.n	20000ce6 <MSS_UART_set_rx_handler+0x9e>
20000c86:	2ac0      	cmp	r2, #192	; 0xc0
20000c88:	bf8c      	ite	hi
20000c8a:	2300      	movhi	r3, #0
20000c8c:	2301      	movls	r3, #1
20000c8e:	2900      	cmp	r1, #0
20000c90:	bf0c      	ite	eq
20000c92:	2300      	moveq	r3, #0
20000c94:	f003 0301 	andne.w	r3, r3, #1
20000c98:	b32b      	cbz	r3, 20000ce6 <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
20000c9a:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
20000c9c:	6803      	ldr	r3, [r0, #0]
20000c9e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
20000ca2:	f042 020a 	orr.w	r2, r2, #10
20000ca6:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000ca8:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000caa:	b219      	sxth	r1, r3
20000cac:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000cb0:	f003 031f 	and.w	r3, r3, #31
20000cb4:	f04f 0201 	mov.w	r2, #1
20000cb8:	fa02 f403 	lsl.w	r4, r2, r3
20000cbc:	f24e 1300 	movw	r3, #57600	; 0xe100
20000cc0:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000cc4:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000cc8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20000ccc:	6841      	ldr	r1, [r0, #4]
20000cce:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000cd2:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000cd4:	b208      	sxth	r0, r1
20000cd6:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000cda:	f001 011f 	and.w	r1, r1, #31
20000cde:	fa02 f201 	lsl.w	r2, r2, r1
20000ce2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000ce6:	bc10      	pop	{r4}
20000ce8:	4770      	bx	lr
20000cea:	bf00      	nop

20000cec <MSS_UART_set_loopback>:
(
    mss_uart_instance_t *   this_uart,
    mss_uart_loopback_t     loopback
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000cec:	f641 0354 	movw	r3, #6228	; 0x1854
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	4298      	cmp	r0, r3
20000cf6:	d007      	beq.n	20000d08 <MSS_UART_set_loopback+0x1c>
20000cf8:	f641 032c 	movw	r3, #6188	; 0x182c
20000cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d00:	4298      	cmp	r0, r3
20000d02:	d001      	beq.n	20000d08 <MSS_UART_set_loopback+0x1c>
20000d04:	be00      	bkpt	0x0000
20000d06:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        if ( loopback == MSS_UART_LOOPBACK_OFF )
20000d08:	b929      	cbnz	r1, 20000d16 <MSS_UART_set_loopback+0x2a>
        {
            this_uart->hw_reg_bit->MCR_LOOP = 0U;
20000d0a:	6843      	ldr	r3, [r0, #4]
20000d0c:	f04f 0200 	mov.w	r2, #0
20000d10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000d14:	4770      	bx	lr
        }
        else
        {
            this_uart->hw_reg_bit->MCR_LOOP = 1U;
20000d16:	6843      	ldr	r3, [r0, #4]
20000d18:	f04f 0201 	mov.w	r2, #1
20000d1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000d20:	4770      	bx	lr
20000d22:	bf00      	nop

20000d24 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000d24:	4668      	mov	r0, sp
20000d26:	f020 0107 	bic.w	r1, r0, #7
20000d2a:	468d      	mov	sp, r1
20000d2c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
20000d2e:	f641 0054 	movw	r0, #6228	; 0x1854
20000d32:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d36:	f7ff fefb 	bl	20000b30 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000d3a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000d3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000d46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
20000d4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000d4e:	4685      	mov	sp, r0
20000d50:	4770      	bx	lr
20000d52:	bf00      	nop

20000d54 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000d54:	4668      	mov	r0, sp
20000d56:	f020 0107 	bic.w	r1, r0, #7
20000d5a:	468d      	mov	sp, r1
20000d5c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
20000d5e:	f641 002c 	movw	r0, #6188	; 0x182c
20000d62:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d66:	f7ff fee3 	bl	20000b30 <MSS_UART_isr>
20000d6a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000d6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
20000d76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
20000d7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000d7e:	4685      	mov	sp, r0
20000d80:	4770      	bx	lr
20000d82:	bf00      	nop

20000d84 <MSS_UART_set_rxstatus_handler>:
MSS_UART_set_rxstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000d84:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d86:	f641 0354 	movw	r3, #6228	; 0x1854
20000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8e:	4298      	cmp	r0, r3
20000d90:	d006      	beq.n	20000da0 <MSS_UART_set_rxstatus_handler+0x1c>
20000d92:	f641 032c 	movw	r3, #6188	; 0x182c
20000d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9a:	4298      	cmp	r0, r3
20000d9c:	d000      	beq.n	20000da0 <MSS_UART_set_rxstatus_handler+0x1c>
20000d9e:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000da0:	b901      	cbnz	r1, 20000da4 <MSS_UART_set_rxstatus_handler+0x20>
20000da2:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000da4:	f641 0354 	movw	r3, #6228	; 0x1854
20000da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dac:	4298      	cmp	r0, r3
20000dae:	d005      	beq.n	20000dbc <MSS_UART_set_rxstatus_handler+0x38>
20000db0:	f641 032c 	movw	r3, #6188	; 0x182c
20000db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db8:	4298      	cmp	r0, r3
20000dba:	d120      	bne.n	20000dfe <MSS_UART_set_rxstatus_handler+0x7a>
20000dbc:	b1f9      	cbz	r1, 20000dfe <MSS_UART_set_rxstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->linests_handler = handler;
20000dbe:	6181      	str	r1, [r0, #24]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000dc0:	8903      	ldrh	r3, [r0, #8]
20000dc2:	b219      	sxth	r1, r3
20000dc4:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000dc8:	f003 031f 	and.w	r3, r3, #31
20000dcc:	f04f 0201 	mov.w	r2, #1
20000dd0:	fa02 f403 	lsl.w	r4, r2, r3
20000dd4:	f24e 1300 	movw	r3, #57600	; 0xe100
20000dd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000ddc:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000de0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receiver line status interrupt. */
        this_uart->hw_reg_bit->IER_ELSI = 1U;
20000de4:	6841      	ldr	r1, [r0, #4]
20000de6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000dea:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000dec:	b208      	sxth	r0, r1
20000dee:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000df2:	f001 011f 	and.w	r1, r1, #31
20000df6:	fa02 f201 	lsl.w	r2, r2, r1
20000dfa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000dfe:	bc10      	pop	{r4}
20000e00:	4770      	bx	lr
20000e02:	bf00      	nop

20000e04 <MSS_UART_set_tx_handler>:
MSS_UART_set_tx_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000e04:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e06:	f641 0354 	movw	r3, #6228	; 0x1854
20000e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e0e:	4298      	cmp	r0, r3
20000e10:	d006      	beq.n	20000e20 <MSS_UART_set_tx_handler+0x1c>
20000e12:	f641 032c 	movw	r3, #6188	; 0x182c
20000e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1a:	4298      	cmp	r0, r3
20000e1c:	d000      	beq.n	20000e20 <MSS_UART_set_tx_handler+0x1c>
20000e1e:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000e20:	b901      	cbnz	r1, 20000e24 <MSS_UART_set_tx_handler+0x20>
20000e22:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000e24:	f641 0354 	movw	r3, #6228	; 0x1854
20000e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2c:	4298      	cmp	r0, r3
20000e2e:	d005      	beq.n	20000e3c <MSS_UART_set_tx_handler+0x38>
20000e30:	f641 032c 	movw	r3, #6188	; 0x182c
20000e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e38:	4298      	cmp	r0, r3
20000e3a:	d124      	bne.n	20000e86 <MSS_UART_set_tx_handler+0x82>
20000e3c:	b319      	cbz	r1, 20000e86 <MSS_UART_set_tx_handler+0x82>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->tx_handler = handler;
20000e3e:	6201      	str	r1, [r0, #32]

        /* Make TX buffer info invalid */
        this_uart->tx_buffer = (const uint8_t *)0;
20000e40:	f04f 0300 	mov.w	r3, #0
20000e44:	60c3      	str	r3, [r0, #12]
        this_uart->tx_buff_size = 0U;
20000e46:	6103      	str	r3, [r0, #16]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000e48:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000e4a:	b219      	sxth	r1, r3
20000e4c:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000e50:	f003 031f 	and.w	r3, r3, #31
20000e54:	f04f 0201 	mov.w	r2, #1
20000e58:	fa02 f403 	lsl.w	r4, r2, r3
20000e5c:	f24e 1300 	movw	r3, #57600	; 0xe100
20000e60:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000e64:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000e68:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable transmitter holding register Empty interrupt. */
        this_uart->hw_reg_bit->IER_ETBEI = 1U;
20000e6c:	6841      	ldr	r1, [r0, #4]
20000e6e:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000e72:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000e74:	b208      	sxth	r0, r1
20000e76:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000e7a:	f001 011f 	and.w	r1, r1, #31
20000e7e:	fa02 f201 	lsl.w	r2, r2, r1
20000e82:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000e86:	bc10      	pop	{r4}
20000e88:	4770      	bx	lr
20000e8a:	bf00      	nop

20000e8c <MSS_UART_set_modemstatus_handler>:
MSS_UART_set_modemstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000e8c:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e8e:	f641 0354 	movw	r3, #6228	; 0x1854
20000e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e96:	4298      	cmp	r0, r3
20000e98:	d006      	beq.n	20000ea8 <MSS_UART_set_modemstatus_handler+0x1c>
20000e9a:	f641 032c 	movw	r3, #6188	; 0x182c
20000e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ea2:	4298      	cmp	r0, r3
20000ea4:	d000      	beq.n	20000ea8 <MSS_UART_set_modemstatus_handler+0x1c>
20000ea6:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20000ea8:	b901      	cbnz	r1, 20000eac <MSS_UART_set_modemstatus_handler+0x20>
20000eaa:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000eac:	f641 0354 	movw	r3, #6228	; 0x1854
20000eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eb4:	4298      	cmp	r0, r3
20000eb6:	d005      	beq.n	20000ec4 <MSS_UART_set_modemstatus_handler+0x38>
20000eb8:	f641 032c 	movw	r3, #6188	; 0x182c
20000ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec0:	4298      	cmp	r0, r3
20000ec2:	d120      	bne.n	20000f06 <MSS_UART_set_modemstatus_handler+0x7a>
20000ec4:	b1f9      	cbz	r1, 20000f06 <MSS_UART_set_modemstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->modemsts_handler = handler;
20000ec6:	6241      	str	r1, [r0, #36]	; 0x24

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000ec8:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000eca:	b219      	sxth	r1, r3
20000ecc:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000ed0:	f003 031f 	and.w	r3, r3, #31
20000ed4:	f04f 0201 	mov.w	r2, #1
20000ed8:	fa02 f403 	lsl.w	r4, r2, r3
20000edc:	f24e 1300 	movw	r3, #57600	; 0xe100
20000ee0:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000ee4:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000ee8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable modem status interrupt. */
        this_uart->hw_reg_bit->IER_EDSSI = 1U;
20000eec:	6841      	ldr	r1, [r0, #4]
20000eee:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000ef2:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000ef4:	b208      	sxth	r0, r1
20000ef6:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000efa:	f001 011f 	and.w	r1, r1, #31
20000efe:	fa02 f201 	lsl.w	r2, r2, r1
20000f02:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000f06:	bc10      	pop	{r4}
20000f08:	4770      	bx	lr
20000f0a:	bf00      	nop

20000f0c <MSS_UART_fill_tx_fifo>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
20000f0c:	b410      	push	{r4}
20000f0e:	4603      	mov	r3, r0
    uint8_t status = 0U;
    size_t size_sent = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000f10:	f641 0054 	movw	r0, #6228	; 0x1854
20000f14:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f18:	4283      	cmp	r3, r0
20000f1a:	d006      	beq.n	20000f2a <MSS_UART_fill_tx_fifo+0x1e>
20000f1c:	f641 002c 	movw	r0, #6188	; 0x182c
20000f20:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f24:	4283      	cmp	r3, r0
20000f26:	d000      	beq.n	20000f2a <MSS_UART_fill_tx_fifo+0x1e>
20000f28:	be00      	bkpt	0x0000
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
20000f2a:	b901      	cbnz	r1, 20000f2e <MSS_UART_fill_tx_fifo+0x22>
20000f2c:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0 );
20000f2e:	b902      	cbnz	r2, 20000f32 <MSS_UART_fill_tx_fifo+0x26>
20000f30:	be00      	bkpt	0x0000

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
20000f32:	f641 0054 	movw	r0, #6228	; 0x1854
20000f36:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f3a:	4283      	cmp	r3, r0
20000f3c:	d005      	beq.n	20000f4a <MSS_UART_fill_tx_fifo+0x3e>
20000f3e:	f641 002c 	movw	r0, #6188	; 0x182c
20000f42:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f46:	4283      	cmp	r3, r0
20000f48:	d126      	bne.n	20000f98 <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
20000f4a:	1e10      	subs	r0, r2, #0
20000f4c:	bf18      	it	ne
20000f4e:	2001      	movne	r0, #1
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
    ASSERT( tx_size > 0 );

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
20000f50:	2900      	cmp	r1, #0
20000f52:	bf0c      	ite	eq
20000f54:	2400      	moveq	r4, #0
20000f56:	f000 0401 	andne.w	r4, r0, #1
20000f5a:	b1ec      	cbz	r4, 20000f98 <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
    {
        status = this_uart->hw_reg->LSR;
20000f5c:	681c      	ldr	r4, [r3, #0]
20000f5e:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20000f62:	7a9c      	ldrb	r4, [r3, #10]
20000f64:	ea4c 0404 	orr.w	r4, ip, r4
20000f68:	729c      	strb	r4, [r3, #10]

        if( status & MSS_UART_THRE )
20000f6a:	f01c 0f20 	tst.w	ip, #32
20000f6e:	d013      	beq.n	20000f98 <MSS_UART_fill_tx_fifo+0x8c>
        {
            uint32_t fill_size = TX_FIFO_SIZE;

            if ( tx_size < TX_FIFO_SIZE )
20000f70:	2a0f      	cmp	r2, #15
20000f72:	d904      	bls.n	20000f7e <MSS_UART_fill_tx_fifo+0x72>
20000f74:	f04f 0410 	mov.w	r4, #16
20000f78:	f04f 0000 	mov.w	r0, #0
20000f7c:	e002      	b.n	20000f84 <MSS_UART_fill_tx_fifo+0x78>
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000f7e:	b158      	cbz	r0, 20000f98 <MSS_UART_fill_tx_fifo+0x8c>
20000f80:	4614      	mov	r4, r2
20000f82:	e7f9      	b.n	20000f78 <MSS_UART_fill_tx_fifo+0x6c>
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
20000f84:	681a      	ldr	r2, [r3, #0]
20000f86:	f811 c000 	ldrb.w	ip, [r1, r0]
20000f8a:	f882 c000 	strb.w	ip, [r2]
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000f8e:	f100 0001 	add.w	r0, r0, #1
20000f92:	42a0      	cmp	r0, r4
20000f94:	d3f6      	bcc.n	20000f84 <MSS_UART_fill_tx_fifo+0x78>
20000f96:	e001      	b.n	20000f9c <MSS_UART_fill_tx_fifo+0x90>
20000f98:	f04f 0000 	mov.w	r0, #0
                this_uart->hw_reg->THR = tx_buffer[size_sent];
            }
        }
    }
    return size_sent;
}
20000f9c:	bc10      	pop	{r4}
20000f9e:	4770      	bx	lr

20000fa0 <MSS_UART_get_rx_status>:
uint8_t
MSS_UART_get_rx_status
(
    mss_uart_instance_t * this_uart
)
{
20000fa0:	4602      	mov	r2, r0
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000fa2:	f641 0354 	movw	r3, #6228	; 0x1854
20000fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000faa:	4298      	cmp	r0, r3
20000fac:	d009      	beq.n	20000fc2 <MSS_UART_get_rx_status+0x22>
20000fae:	f641 032c 	movw	r3, #6188	; 0x182c
20000fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fb6:	4298      	cmp	r0, r3
20000fb8:	d003      	beq.n	20000fc2 <MSS_UART_get_rx_status+0x22>
20000fba:	be00      	bkpt	0x0000
20000fbc:	f04f 00ff 	mov.w	r0, #255	; 0xff
20000fc0:	4770      	bx	lr
         * Bit 2 - Parity error status
         * Bit 3 - Frame error status
         * Bit 4 - Break interrupt indicator
         * Bit 7 - FIFO data error status
         */
        this_uart->status |= (this_uart->hw_reg->LSR);
20000fc2:	6813      	ldr	r3, [r2, #0]
20000fc4:	7d18      	ldrb	r0, [r3, #20]
        status = (this_uart->status & STATUS_ERROR_MASK );
20000fc6:	7a93      	ldrb	r3, [r2, #10]
20000fc8:	ea40 0003 	orr.w	r0, r0, r3
20000fcc:	f000 009e 	and.w	r0, r0, #158	; 0x9e
        /* Clear the sticky status after reading */
        this_uart->status = 0U;
20000fd0:	f04f 0300 	mov.w	r3, #0
20000fd4:	7293      	strb	r3, [r2, #10]
    }
    return status;
}
20000fd6:	4770      	bx	lr

20000fd8 <MSS_UART_get_modem_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000fd8:	f641 0354 	movw	r3, #6228	; 0x1854
20000fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fe0:	4298      	cmp	r0, r3
20000fe2:	d009      	beq.n	20000ff8 <MSS_UART_get_modem_status+0x20>
20000fe4:	f641 032c 	movw	r3, #6188	; 0x182c
20000fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fec:	4298      	cmp	r0, r3
20000fee:	d003      	beq.n	20000ff8 <MSS_UART_get_modem_status+0x20>
20000ff0:	be00      	bkpt	0x0000
20000ff2:	f04f 00ff 	mov.w	r0, #255	; 0xff
20000ff6:	4770      	bx	lr
         * Bit 4 - Clear To Send
         * Bit 5 - Data Set Ready
         * Bit 6 - Ring Indicator
         * Bit 7 - Data Carrier Detect
         */
        status = this_uart->hw_reg->MSR;
20000ff8:	6803      	ldr	r3, [r0, #0]
20000ffa:	7e18      	ldrb	r0, [r3, #24]
    }
    return status;
}
20000ffc:	4770      	bx	lr
20000ffe:	bf00      	nop

20001000 <MSS_UART_get_tx_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_TX_BUSY;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001000:	f641 0354 	movw	r3, #6228	; 0x1854
20001004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001008:	4298      	cmp	r0, r3
2000100a:	d009      	beq.n	20001020 <MSS_UART_get_tx_status+0x20>
2000100c:	f641 032c 	movw	r3, #6188	; 0x182c
20001010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001014:	4298      	cmp	r0, r3
20001016:	d003      	beq.n	20001020 <MSS_UART_get_tx_status+0x20>
20001018:	be00      	bkpt	0x0000
2000101a:	f04f 0000 	mov.w	r0, #0
2000101e:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20001020:	6803      	ldr	r3, [r0, #0]
20001022:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20001024:	7a82      	ldrb	r2, [r0, #10]
20001026:	ea43 0202 	orr.w	r2, r3, r2
2000102a:	7282      	strb	r2, [r0, #10]
        /*
         * Extract the transmit status bits from the UART's Line Status Register.
         * Bit 5 - Transmitter Holding Register/FIFO Empty (THRE) status. (If = 1, TX FIFO is empty)
         * Bit 6 - Transmitter Empty (TEMT) status. (If = 1, both TX FIFO and shift register are empty)
         */
        status &= ( MSS_UART_THRE | MSS_UART_TEMT );
2000102c:	f003 0060 	and.w	r0, r3, #96	; 0x60
    }
    return status;
}
20001030:	4770      	bx	lr
20001032:	bf00      	nop

20001034 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001034:	b570      	push	{r4, r5, r6, lr}
20001036:	4604      	mov	r4, r0
20001038:	460d      	mov	r5, r1
2000103a:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000103c:	f641 0354 	movw	r3, #6228	; 0x1854
20001040:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001044:	4298      	cmp	r0, r3
20001046:	d006      	beq.n	20001056 <MSS_UART_init+0x22>
20001048:	f641 032c 	movw	r3, #6188	; 0x182c
2000104c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001050:	4298      	cmp	r0, r3
20001052:	d000      	beq.n	20001056 <MSS_UART_init+0x22>
20001054:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20001056:	b905      	cbnz	r5, 2000105a <MSS_UART_init+0x26>
20001058:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
2000105a:	f000 f895 	bl	20001188 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
2000105e:	f641 0354 	movw	r3, #6228	; 0x1854
20001062:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001066:	429c      	cmp	r4, r3
20001068:	d126      	bne.n	200010b8 <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
2000106a:	f641 0354 	movw	r3, #6228	; 0x1854
2000106e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20001076:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20001078:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
2000107c:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
2000107e:	f04f 020a 	mov.w	r2, #10
20001082:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20001084:	f641 0314 	movw	r3, #6164	; 0x1814
20001088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000108c:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
2000108e:	f242 0300 	movw	r3, #8192	; 0x2000
20001092:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000109c:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000109e:	f24e 1200 	movw	r2, #57600	; 0xe100
200010a2:	f2ce 0200 	movt	r2, #57344	; 0xe000
200010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
200010aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
200010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200010b4:	631a      	str	r2, [r3, #48]	; 0x30
200010b6:	e025      	b.n	20001104 <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
200010b8:	f240 0300 	movw	r3, #0
200010bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
200010c0:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
200010c2:	f240 0300 	movw	r3, #0
200010c6:	f2c4 2320 	movt	r3, #16928	; 0x4220
200010ca:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
200010cc:	f04f 030b 	mov.w	r3, #11
200010d0:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
200010d2:	f641 0318 	movw	r3, #6168	; 0x1818
200010d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010da:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
200010dc:	f242 0300 	movw	r3, #8192	; 0x2000
200010e0:	f2ce 0304 	movt	r3, #57348	; 0xe004
200010e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200010ea:	631a      	str	r2, [r3, #48]	; 0x30
200010ec:	f24e 1200 	movw	r2, #57600	; 0xe100
200010f0:	f2ce 0200 	movt	r2, #57344	; 0xe000
200010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
200010f8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
200010fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20001102:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20001104:	6823      	ldr	r3, [r4, #0]
20001106:	f04f 0200 	mov.w	r2, #0
2000110a:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
2000110c:	b915      	cbnz	r5, 20001114 <MSS_UART_init+0xe0>
2000110e:	f04f 0501 	mov.w	r5, #1
20001112:	e00f      	b.n	20001134 <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20001114:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
20001118:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
2000111c:	ea4f 1515 	mov.w	r5, r5, lsr #4
20001120:	bf18      	it	ne
20001122:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20001124:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
20001128:	bf38      	it	cc
2000112a:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
2000112c:	d302      	bcc.n	20001134 <MSS_UART_init+0x100>
2000112e:	be00      	bkpt	0x0000
20001130:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20001134:	6863      	ldr	r3, [r4, #4]
20001136:	f04f 0201 	mov.w	r2, #1
2000113a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
2000113e:	6823      	ldr	r3, [r4, #0]
20001140:	ea4f 2215 	mov.w	r2, r5, lsr #8
20001144:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001146:	6823      	ldr	r3, [r4, #0]
20001148:	b2ed      	uxtb	r5, r5
2000114a:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
2000114c:	6862      	ldr	r2, [r4, #4]
2000114e:	f04f 0300 	mov.w	r3, #0
20001152:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20001156:	6822      	ldr	r2, [r4, #0]
20001158:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
2000115a:	6822      	ldr	r2, [r4, #0]
2000115c:	f04f 010e 	mov.w	r1, #14
20001160:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
20001162:	6862      	ldr	r2, [r4, #4]
20001164:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20001168:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
2000116a:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
2000116c:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
2000116e:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
20001170:	f640 32a1 	movw	r2, #2977	; 0xba1
20001174:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001178:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
2000117a:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
2000117c:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
2000117e:	72a3      	strb	r3, [r4, #10]
}
20001180:	bd70      	pop	{r4, r5, r6, pc}
20001182:	bf00      	nop

20001184 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001184:	4770      	bx	lr
20001186:	bf00      	nop

20001188 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20001188:	b430      	push	{r4, r5}
2000118a:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
2000118c:	f241 73dc 	movw	r3, #6108	; 0x17dc
20001190:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001194:	46ec      	mov	ip, sp
20001196:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20001198:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
2000119c:	f242 0300 	movw	r3, #8192	; 0x2000
200011a0:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200011a6:	f002 020c 	and.w	r2, r2, #12
200011aa:	a904      	add	r1, sp, #16
200011ac:	440a      	add	r2, r1
200011ae:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
200011b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200011b4:	f3c2 1201 	ubfx	r2, r2, #4, #2
200011b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
200011bc:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
200011c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200011c2:	f3c2 1281 	ubfx	r2, r2, #6, #2
200011c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
200011ca:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
200011ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
200011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
200011d2:	f3c1 2104 	ubfx	r1, r1, #8, #5
200011d6:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
200011da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
200011de:	bf18      	it	ne
200011e0:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
200011e2:	f240 2330 	movw	r3, #560	; 0x230
200011e6:	f2c6 0308 	movt	r3, #24584	; 0x6008
200011ea:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
200011ec:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
200011f0:	f241 13cf 	movw	r3, #4559	; 0x11cf
200011f4:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
200011f8:	429a      	cmp	r2, r3
200011fa:	d105      	bne.n	20001208 <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
200011fc:	f64e 732c 	movw	r3, #61228	; 0xef2c
20001200:	f2c6 0301 	movt	r3, #24577	; 0x6001
20001204:	681a      	ldr	r2, [r3, #0]
20001206:	e028      	b.n	2000125a <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
20001208:	f640 031c 	movw	r3, #2076	; 0x81c
2000120c:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001210:	681a      	ldr	r2, [r3, #0]
20001212:	f244 3341 	movw	r3, #17217	; 0x4341
20001216:	f6c4 4354 	movt	r3, #19540	; 0x4c54
2000121a:	429a      	cmp	r2, r3
2000121c:	d11e      	bne.n	2000125c <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
2000121e:	f640 0340 	movw	r3, #2112	; 0x840
20001222:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001226:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
20001228:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
2000122c:	f240 3300 	movw	r3, #768	; 0x300
20001230:	f2c0 0301 	movt	r3, #1
20001234:	429a      	cmp	r2, r3
20001236:	d911      	bls.n	2000125c <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
20001238:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
2000123c:	d205      	bcs.n	2000124a <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
2000123e:	f241 632c 	movw	r3, #5676	; 0x162c
20001242:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001246:	681a      	ldr	r2, [r3, #0]
20001248:	e007      	b.n	2000125a <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
2000124a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
2000124e:	d205      	bcs.n	2000125c <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
20001250:	f641 63ac 	movw	r3, #7852	; 0x1eac
20001254:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001258:	681a      	ldr	r2, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
2000125a:	b922      	cbnz	r2, 20001266 <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
2000125c:	be00      	bkpt	0x0000
2000125e:	f647 0240 	movw	r2, #30784	; 0x7840
20001262:	f2c0 127d 	movt	r2, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
20001266:	f641 0310 	movw	r3, #6160	; 0x1810
2000126a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000126e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
20001270:	fbb2 f5f5 	udiv	r5, r2, r5
20001274:	605d      	str	r5, [r3, #4]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
20001276:	fbb2 f4f4 	udiv	r4, r2, r4
2000127a:	609c      	str	r4, [r3, #8]
    g_FrequencyACE = SystemCoreClock / AceDiv;
2000127c:	fbb2 f0f0 	udiv	r0, r2, r0
20001280:	60d8      	str	r0, [r3, #12]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
20001282:	fbb2 f1f1 	udiv	r1, r2, r1
20001286:	6119      	str	r1, [r3, #16]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20001288:	615a      	str	r2, [r3, #20]
}
2000128a:	b004      	add	sp, #16
2000128c:	bc30      	pop	{r4, r5}
2000128e:	4770      	bx	lr

20001290 <__aeabi_frsub>:
20001290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20001294:	e002      	b.n	2000129c <__addsf3>
20001296:	bf00      	nop

20001298 <__aeabi_fsub>:
20001298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

2000129c <__addsf3>:
2000129c:	0042      	lsls	r2, r0, #1
2000129e:	bf1f      	itttt	ne
200012a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
200012a4:	ea92 0f03 	teqne	r2, r3
200012a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
200012ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
200012b0:	d06a      	beq.n	20001388 <__addsf3+0xec>
200012b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
200012b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
200012ba:	bfc1      	itttt	gt
200012bc:	18d2      	addgt	r2, r2, r3
200012be:	4041      	eorgt	r1, r0
200012c0:	4048      	eorgt	r0, r1
200012c2:	4041      	eorgt	r1, r0
200012c4:	bfb8      	it	lt
200012c6:	425b      	neglt	r3, r3
200012c8:	2b19      	cmp	r3, #25
200012ca:	bf88      	it	hi
200012cc:	4770      	bxhi	lr
200012ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
200012d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200012d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
200012da:	bf18      	it	ne
200012dc:	4240      	negne	r0, r0
200012de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200012e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
200012e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
200012ea:	bf18      	it	ne
200012ec:	4249      	negne	r1, r1
200012ee:	ea92 0f03 	teq	r2, r3
200012f2:	d03f      	beq.n	20001374 <__addsf3+0xd8>
200012f4:	f1a2 0201 	sub.w	r2, r2, #1
200012f8:	fa41 fc03 	asr.w	ip, r1, r3
200012fc:	eb10 000c 	adds.w	r0, r0, ip
20001300:	f1c3 0320 	rsb	r3, r3, #32
20001304:	fa01 f103 	lsl.w	r1, r1, r3
20001308:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
2000130c:	d502      	bpl.n	20001314 <__addsf3+0x78>
2000130e:	4249      	negs	r1, r1
20001310:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20001314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
20001318:	d313      	bcc.n	20001342 <__addsf3+0xa6>
2000131a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
2000131e:	d306      	bcc.n	2000132e <__addsf3+0x92>
20001320:	0840      	lsrs	r0, r0, #1
20001322:	ea4f 0131 	mov.w	r1, r1, rrx
20001326:	f102 0201 	add.w	r2, r2, #1
2000132a:	2afe      	cmp	r2, #254	; 0xfe
2000132c:	d251      	bcs.n	200013d2 <__addsf3+0x136>
2000132e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20001332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20001336:	bf08      	it	eq
20001338:	f020 0001 	biceq.w	r0, r0, #1
2000133c:	ea40 0003 	orr.w	r0, r0, r3
20001340:	4770      	bx	lr
20001342:	0049      	lsls	r1, r1, #1
20001344:	eb40 0000 	adc.w	r0, r0, r0
20001348:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
2000134c:	f1a2 0201 	sub.w	r2, r2, #1
20001350:	d1ed      	bne.n	2000132e <__addsf3+0x92>
20001352:	fab0 fc80 	clz	ip, r0
20001356:	f1ac 0c08 	sub.w	ip, ip, #8
2000135a:	ebb2 020c 	subs.w	r2, r2, ip
2000135e:	fa00 f00c 	lsl.w	r0, r0, ip
20001362:	bfaa      	itet	ge
20001364:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20001368:	4252      	neglt	r2, r2
2000136a:	4318      	orrge	r0, r3
2000136c:	bfbc      	itt	lt
2000136e:	40d0      	lsrlt	r0, r2
20001370:	4318      	orrlt	r0, r3
20001372:	4770      	bx	lr
20001374:	f092 0f00 	teq	r2, #0
20001378:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
2000137c:	bf06      	itte	eq
2000137e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20001382:	3201      	addeq	r2, #1
20001384:	3b01      	subne	r3, #1
20001386:	e7b5      	b.n	200012f4 <__addsf3+0x58>
20001388:	ea4f 0341 	mov.w	r3, r1, lsl #1
2000138c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20001390:	bf18      	it	ne
20001392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20001396:	d021      	beq.n	200013dc <__addsf3+0x140>
20001398:	ea92 0f03 	teq	r2, r3
2000139c:	d004      	beq.n	200013a8 <__addsf3+0x10c>
2000139e:	f092 0f00 	teq	r2, #0
200013a2:	bf08      	it	eq
200013a4:	4608      	moveq	r0, r1
200013a6:	4770      	bx	lr
200013a8:	ea90 0f01 	teq	r0, r1
200013ac:	bf1c      	itt	ne
200013ae:	2000      	movne	r0, #0
200013b0:	4770      	bxne	lr
200013b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
200013b6:	d104      	bne.n	200013c2 <__addsf3+0x126>
200013b8:	0040      	lsls	r0, r0, #1
200013ba:	bf28      	it	cs
200013bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
200013c0:	4770      	bx	lr
200013c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
200013c6:	bf3c      	itt	cc
200013c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
200013cc:	4770      	bxcc	lr
200013ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200013d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
200013d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200013da:	4770      	bx	lr
200013dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
200013e0:	bf16      	itet	ne
200013e2:	4608      	movne	r0, r1
200013e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
200013e8:	4601      	movne	r1, r0
200013ea:	0242      	lsls	r2, r0, #9
200013ec:	bf06      	itte	eq
200013ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
200013f2:	ea90 0f01 	teqeq	r0, r1
200013f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
200013fa:	4770      	bx	lr

200013fc <__aeabi_ui2f>:
200013fc:	f04f 0300 	mov.w	r3, #0
20001400:	e004      	b.n	2000140c <__aeabi_i2f+0x8>
20001402:	bf00      	nop

20001404 <__aeabi_i2f>:
20001404:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20001408:	bf48      	it	mi
2000140a:	4240      	negmi	r0, r0
2000140c:	ea5f 0c00 	movs.w	ip, r0
20001410:	bf08      	it	eq
20001412:	4770      	bxeq	lr
20001414:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
20001418:	4601      	mov	r1, r0
2000141a:	f04f 0000 	mov.w	r0, #0
2000141e:	e01c      	b.n	2000145a <__aeabi_l2f+0x2a>

20001420 <__aeabi_ul2f>:
20001420:	ea50 0201 	orrs.w	r2, r0, r1
20001424:	bf08      	it	eq
20001426:	4770      	bxeq	lr
20001428:	f04f 0300 	mov.w	r3, #0
2000142c:	e00a      	b.n	20001444 <__aeabi_l2f+0x14>
2000142e:	bf00      	nop

20001430 <__aeabi_l2f>:
20001430:	ea50 0201 	orrs.w	r2, r0, r1
20001434:	bf08      	it	eq
20001436:	4770      	bxeq	lr
20001438:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
2000143c:	d502      	bpl.n	20001444 <__aeabi_l2f+0x14>
2000143e:	4240      	negs	r0, r0
20001440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001444:	ea5f 0c01 	movs.w	ip, r1
20001448:	bf02      	ittt	eq
2000144a:	4684      	moveq	ip, r0
2000144c:	4601      	moveq	r1, r0
2000144e:	2000      	moveq	r0, #0
20001450:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20001454:	bf08      	it	eq
20001456:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
2000145a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
2000145e:	fabc f28c 	clz	r2, ip
20001462:	3a08      	subs	r2, #8
20001464:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20001468:	db10      	blt.n	2000148c <__aeabi_l2f+0x5c>
2000146a:	fa01 fc02 	lsl.w	ip, r1, r2
2000146e:	4463      	add	r3, ip
20001470:	fa00 fc02 	lsl.w	ip, r0, r2
20001474:	f1c2 0220 	rsb	r2, r2, #32
20001478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000147c:	fa20 f202 	lsr.w	r2, r0, r2
20001480:	eb43 0002 	adc.w	r0, r3, r2
20001484:	bf08      	it	eq
20001486:	f020 0001 	biceq.w	r0, r0, #1
2000148a:	4770      	bx	lr
2000148c:	f102 0220 	add.w	r2, r2, #32
20001490:	fa01 fc02 	lsl.w	ip, r1, r2
20001494:	f1c2 0220 	rsb	r2, r2, #32
20001498:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
2000149c:	fa21 f202 	lsr.w	r2, r1, r2
200014a0:	eb43 0002 	adc.w	r0, r3, r2
200014a4:	bf08      	it	eq
200014a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
200014aa:	4770      	bx	lr

200014ac <__aeabi_fmul>:
200014ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
200014b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200014b4:	bf1e      	ittt	ne
200014b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200014ba:	ea92 0f0c 	teqne	r2, ip
200014be:	ea93 0f0c 	teqne	r3, ip
200014c2:	d06f      	beq.n	200015a4 <__aeabi_fmul+0xf8>
200014c4:	441a      	add	r2, r3
200014c6:	ea80 0c01 	eor.w	ip, r0, r1
200014ca:	0240      	lsls	r0, r0, #9
200014cc:	bf18      	it	ne
200014ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
200014d2:	d01e      	beq.n	20001512 <__aeabi_fmul+0x66>
200014d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200014d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
200014dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
200014e0:	fba0 3101 	umull	r3, r1, r0, r1
200014e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200014e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
200014ec:	bf3e      	ittt	cc
200014ee:	0049      	lslcc	r1, r1, #1
200014f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
200014f4:	005b      	lslcc	r3, r3, #1
200014f6:	ea40 0001 	orr.w	r0, r0, r1
200014fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
200014fe:	2afd      	cmp	r2, #253	; 0xfd
20001500:	d81d      	bhi.n	2000153e <__aeabi_fmul+0x92>
20001502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20001506:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
2000150a:	bf08      	it	eq
2000150c:	f020 0001 	biceq.w	r0, r0, #1
20001510:	4770      	bx	lr
20001512:	f090 0f00 	teq	r0, #0
20001516:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
2000151a:	bf08      	it	eq
2000151c:	0249      	lsleq	r1, r1, #9
2000151e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20001522:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
20001526:	3a7f      	subs	r2, #127	; 0x7f
20001528:	bfc2      	ittt	gt
2000152a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
2000152e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20001532:	4770      	bxgt	lr
20001534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20001538:	f04f 0300 	mov.w	r3, #0
2000153c:	3a01      	subs	r2, #1
2000153e:	dc5d      	bgt.n	200015fc <__aeabi_fmul+0x150>
20001540:	f112 0f19 	cmn.w	r2, #25
20001544:	bfdc      	itt	le
20001546:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
2000154a:	4770      	bxle	lr
2000154c:	f1c2 0200 	rsb	r2, r2, #0
20001550:	0041      	lsls	r1, r0, #1
20001552:	fa21 f102 	lsr.w	r1, r1, r2
20001556:	f1c2 0220 	rsb	r2, r2, #32
2000155a:	fa00 fc02 	lsl.w	ip, r0, r2
2000155e:	ea5f 0031 	movs.w	r0, r1, rrx
20001562:	f140 0000 	adc.w	r0, r0, #0
20001566:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
2000156a:	bf08      	it	eq
2000156c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20001570:	4770      	bx	lr
20001572:	f092 0f00 	teq	r2, #0
20001576:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
2000157a:	bf02      	ittt	eq
2000157c:	0040      	lsleq	r0, r0, #1
2000157e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20001582:	3a01      	subeq	r2, #1
20001584:	d0f9      	beq.n	2000157a <__aeabi_fmul+0xce>
20001586:	ea40 000c 	orr.w	r0, r0, ip
2000158a:	f093 0f00 	teq	r3, #0
2000158e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20001592:	bf02      	ittt	eq
20001594:	0049      	lsleq	r1, r1, #1
20001596:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
2000159a:	3b01      	subeq	r3, #1
2000159c:	d0f9      	beq.n	20001592 <__aeabi_fmul+0xe6>
2000159e:	ea41 010c 	orr.w	r1, r1, ip
200015a2:	e78f      	b.n	200014c4 <__aeabi_fmul+0x18>
200015a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200015a8:	ea92 0f0c 	teq	r2, ip
200015ac:	bf18      	it	ne
200015ae:	ea93 0f0c 	teqne	r3, ip
200015b2:	d00a      	beq.n	200015ca <__aeabi_fmul+0x11e>
200015b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200015b8:	bf18      	it	ne
200015ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200015be:	d1d8      	bne.n	20001572 <__aeabi_fmul+0xc6>
200015c0:	ea80 0001 	eor.w	r0, r0, r1
200015c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200015c8:	4770      	bx	lr
200015ca:	f090 0f00 	teq	r0, #0
200015ce:	bf17      	itett	ne
200015d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200015d4:	4608      	moveq	r0, r1
200015d6:	f091 0f00 	teqne	r1, #0
200015da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
200015de:	d014      	beq.n	2000160a <__aeabi_fmul+0x15e>
200015e0:	ea92 0f0c 	teq	r2, ip
200015e4:	d101      	bne.n	200015ea <__aeabi_fmul+0x13e>
200015e6:	0242      	lsls	r2, r0, #9
200015e8:	d10f      	bne.n	2000160a <__aeabi_fmul+0x15e>
200015ea:	ea93 0f0c 	teq	r3, ip
200015ee:	d103      	bne.n	200015f8 <__aeabi_fmul+0x14c>
200015f0:	024b      	lsls	r3, r1, #9
200015f2:	bf18      	it	ne
200015f4:	4608      	movne	r0, r1
200015f6:	d108      	bne.n	2000160a <__aeabi_fmul+0x15e>
200015f8:	ea80 0001 	eor.w	r0, r0, r1
200015fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20001600:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20001604:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20001608:	4770      	bx	lr
2000160a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
2000160e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
20001612:	4770      	bx	lr

20001614 <__aeabi_fdiv>:
20001614:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001618:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
2000161c:	bf1e      	ittt	ne
2000161e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20001622:	ea92 0f0c 	teqne	r2, ip
20001626:	ea93 0f0c 	teqne	r3, ip
2000162a:	d069      	beq.n	20001700 <__aeabi_fdiv+0xec>
2000162c:	eba2 0203 	sub.w	r2, r2, r3
20001630:	ea80 0c01 	eor.w	ip, r0, r1
20001634:	0249      	lsls	r1, r1, #9
20001636:	ea4f 2040 	mov.w	r0, r0, lsl #9
2000163a:	d037      	beq.n	200016ac <__aeabi_fdiv+0x98>
2000163c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20001640:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20001644:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20001648:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
2000164c:	428b      	cmp	r3, r1
2000164e:	bf38      	it	cc
20001650:	005b      	lslcc	r3, r3, #1
20001652:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20001656:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
2000165a:	428b      	cmp	r3, r1
2000165c:	bf24      	itt	cs
2000165e:	1a5b      	subcs	r3, r3, r1
20001660:	ea40 000c 	orrcs.w	r0, r0, ip
20001664:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20001668:	bf24      	itt	cs
2000166a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
2000166e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20001672:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20001676:	bf24      	itt	cs
20001678:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
2000167c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20001680:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20001684:	bf24      	itt	cs
20001686:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
2000168a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000168e:	011b      	lsls	r3, r3, #4
20001690:	bf18      	it	ne
20001692:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20001696:	d1e0      	bne.n	2000165a <__aeabi_fdiv+0x46>
20001698:	2afd      	cmp	r2, #253	; 0xfd
2000169a:	f63f af50 	bhi.w	2000153e <__aeabi_fmul+0x92>
2000169e:	428b      	cmp	r3, r1
200016a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200016a4:	bf08      	it	eq
200016a6:	f020 0001 	biceq.w	r0, r0, #1
200016aa:	4770      	bx	lr
200016ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200016b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200016b4:	327f      	adds	r2, #127	; 0x7f
200016b6:	bfc2      	ittt	gt
200016b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200016bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200016c0:	4770      	bxgt	lr
200016c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200016c6:	f04f 0300 	mov.w	r3, #0
200016ca:	3a01      	subs	r2, #1
200016cc:	e737      	b.n	2000153e <__aeabi_fmul+0x92>
200016ce:	f092 0f00 	teq	r2, #0
200016d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200016d6:	bf02      	ittt	eq
200016d8:	0040      	lsleq	r0, r0, #1
200016da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200016de:	3a01      	subeq	r2, #1
200016e0:	d0f9      	beq.n	200016d6 <__aeabi_fdiv+0xc2>
200016e2:	ea40 000c 	orr.w	r0, r0, ip
200016e6:	f093 0f00 	teq	r3, #0
200016ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200016ee:	bf02      	ittt	eq
200016f0:	0049      	lsleq	r1, r1, #1
200016f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200016f6:	3b01      	subeq	r3, #1
200016f8:	d0f9      	beq.n	200016ee <__aeabi_fdiv+0xda>
200016fa:	ea41 010c 	orr.w	r1, r1, ip
200016fe:	e795      	b.n	2000162c <__aeabi_fdiv+0x18>
20001700:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20001704:	ea92 0f0c 	teq	r2, ip
20001708:	d108      	bne.n	2000171c <__aeabi_fdiv+0x108>
2000170a:	0242      	lsls	r2, r0, #9
2000170c:	f47f af7d 	bne.w	2000160a <__aeabi_fmul+0x15e>
20001710:	ea93 0f0c 	teq	r3, ip
20001714:	f47f af70 	bne.w	200015f8 <__aeabi_fmul+0x14c>
20001718:	4608      	mov	r0, r1
2000171a:	e776      	b.n	2000160a <__aeabi_fmul+0x15e>
2000171c:	ea93 0f0c 	teq	r3, ip
20001720:	d104      	bne.n	2000172c <__aeabi_fdiv+0x118>
20001722:	024b      	lsls	r3, r1, #9
20001724:	f43f af4c 	beq.w	200015c0 <__aeabi_fmul+0x114>
20001728:	4608      	mov	r0, r1
2000172a:	e76e      	b.n	2000160a <__aeabi_fmul+0x15e>
2000172c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20001730:	bf18      	it	ne
20001732:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20001736:	d1ca      	bne.n	200016ce <__aeabi_fdiv+0xba>
20001738:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
2000173c:	f47f af5c 	bne.w	200015f8 <__aeabi_fmul+0x14c>
20001740:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20001744:	f47f af3c 	bne.w	200015c0 <__aeabi_fmul+0x114>
20001748:	e75f      	b.n	2000160a <__aeabi_fmul+0x15e>
2000174a:	bf00      	nop

2000174c <__aeabi_f2uiz>:
2000174c:	0042      	lsls	r2, r0, #1
2000174e:	d20e      	bcs.n	2000176e <__aeabi_f2uiz+0x22>
20001750:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
20001754:	d30b      	bcc.n	2000176e <__aeabi_f2uiz+0x22>
20001756:	f04f 039e 	mov.w	r3, #158	; 0x9e
2000175a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
2000175e:	d409      	bmi.n	20001774 <__aeabi_f2uiz+0x28>
20001760:	ea4f 2300 	mov.w	r3, r0, lsl #8
20001764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20001768:	fa23 f002 	lsr.w	r0, r3, r2
2000176c:	4770      	bx	lr
2000176e:	f04f 0000 	mov.w	r0, #0
20001772:	4770      	bx	lr
20001774:	f112 0f61 	cmn.w	r2, #97	; 0x61
20001778:	d101      	bne.n	2000177e <__aeabi_f2uiz+0x32>
2000177a:	0242      	lsls	r2, r0, #9
2000177c:	d102      	bne.n	20001784 <__aeabi_f2uiz+0x38>
2000177e:	f04f 30ff 	mov.w	r0, #4294967295
20001782:	4770      	bx	lr
20001784:	f04f 0000 	mov.w	r0, #0
20001788:	4770      	bx	lr
2000178a:	bf00      	nop

2000178c <__libc_init_array>:
2000178c:	b570      	push	{r4, r5, r6, lr}
2000178e:	f641 0604 	movw	r6, #6148	; 0x1804
20001792:	f641 0504 	movw	r5, #6148	; 0x1804
20001796:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000179a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000179e:	1b76      	subs	r6, r6, r5
200017a0:	10b6      	asrs	r6, r6, #2
200017a2:	d006      	beq.n	200017b2 <__libc_init_array+0x26>
200017a4:	2400      	movs	r4, #0
200017a6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200017aa:	3401      	adds	r4, #1
200017ac:	4798      	blx	r3
200017ae:	42a6      	cmp	r6, r4
200017b0:	d8f9      	bhi.n	200017a6 <__libc_init_array+0x1a>
200017b2:	f641 0504 	movw	r5, #6148	; 0x1804
200017b6:	f641 0608 	movw	r6, #6152	; 0x1808
200017ba:	f2c2 0500 	movt	r5, #8192	; 0x2000
200017be:	f2c2 0600 	movt	r6, #8192	; 0x2000
200017c2:	1b76      	subs	r6, r6, r5
200017c4:	f000 f812 	bl	200017ec <_init>
200017c8:	10b6      	asrs	r6, r6, #2
200017ca:	d006      	beq.n	200017da <__libc_init_array+0x4e>
200017cc:	2400      	movs	r4, #0
200017ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200017d2:	3401      	adds	r4, #1
200017d4:	4798      	blx	r3
200017d6:	42a6      	cmp	r6, r4
200017d8:	d8f9      	bhi.n	200017ce <__libc_init_array+0x42>
200017da:	bd70      	pop	{r4, r5, r6, pc}

200017dc <C.16.2565>:
200017dc:	0001 0000 0002 0000 0004 0000 0001 0000     ................

200017ec <_init>:
200017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200017ee:	bf00      	nop
200017f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
200017f2:	bc08      	pop	{r3}
200017f4:	469e      	mov	lr, r3
200017f6:	4770      	bx	lr

200017f8 <_fini>:
200017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200017fa:	bf00      	nop
200017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200017fe:	bc08      	pop	{r3}
20001800:	469e      	mov	lr, r3
20001802:	4770      	bx	lr

20001804 <__frame_dummy_init_array_entry>:
20001804:	0485 2000                                   ... 

20001808 <__do_global_dtors_aux_fini_array_entry>:
20001808:	0471 2000                                   q.. 
