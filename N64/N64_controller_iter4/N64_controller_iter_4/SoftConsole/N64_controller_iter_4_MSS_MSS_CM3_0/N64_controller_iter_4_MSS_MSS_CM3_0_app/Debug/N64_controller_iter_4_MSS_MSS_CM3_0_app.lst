
N64_controller_iter_4_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001184  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  20001184  20001184  00009184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  200011a0  200011a0  000091a0  2**2
                  ALLOC
  3 .stack        00003000  200011f8  200011f8  000091a0  2**0
                  ALLOC
  4 .comment      000000ac  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003d6  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003943  00000000  00000000  000096a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000081e  00000000  00000000  0000cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f28  00000000  00000000  0000d803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000424  00000000  00000000  0000e72c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000188e  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ca3  00000000  00000000  000103de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0001c582  00000000  00000000  00011081  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0002d603  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000030  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000b99 	.word	0x20000b99
2000006c:	20000bc9 	.word	0x20000bc9
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20000337 	.word	0x20000337
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	2000033d 	.word	0x2000033d
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>

20000336 <I2C0_IRQHandler>:
20000336:	e7fe      	b.n	20000336 <I2C0_IRQHandler>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>

2000033c <I2C1_IRQHandler>:
2000033c:	e7fe      	b.n	2000033c <I2C1_IRQHandler>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20000ff9 	.word	0x20000ff9
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20001184 	.word	0x20001184
20000450:	20001184 	.word	0x20001184
20000454:	20001184 	.word	0x20001184
20000458:	200011a0 	.word	0x200011a0
2000045c:	00000000 	.word	0x00000000
20000460:	200011a0 	.word	0x200011a0
20000464:	200011f8 	.word	0x200011f8
20000468:	20001105 	.word	0x20001105
2000046c:	200004a1 	.word	0x200004a1

20000470 <__do_global_dtors_aux>:
20000470:	f241 13a0 	movw	r3, #4512	; 0x11a0
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f241 1084 	movw	r0, #4484	; 0x1184
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <main>:
#include "inttypes.h"

#define CONTROLLER_DATA_REG ((uint32_t *) FPGA_FABRIC_BASE)

int main(void)
{
200004a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
200004a4:	b08f      	sub	sp, #60	; 0x3c
200004a6:	af00      	add	r7, sp, #0
	uint8_t up; //1 or 0
	uint8_t down; //1 or 0
	uint8_t left; //1 or 0
	uint8_t right; //1 or 0

	uint32_t y_mask = 0xFF000000;
200004a8:	f04f 4c7f 	mov.w	ip, #4278190080	; 0xff000000
200004ac:	f8c7 c018 	str.w	ip, [r7, #24]
	uint32_t x_mask = 0x00FF0000;
200004b0:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
200004b4:	f8c7 c01c 	str.w	ip, [r7, #28]
	uint32_t up_mask = 0x00000010;
200004b8:	f04f 0c10 	mov.w	ip, #16
200004bc:	f8c7 c020 	str.w	ip, [r7, #32]
	uint32_t down_mask = 0x00000020;
200004c0:	f04f 0c20 	mov.w	ip, #32
200004c4:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
	uint32_t left_mask = 0x00000040;
200004c8:	f04f 0c40 	mov.w	ip, #64	; 0x40
200004cc:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
	uint32_t right_mask = 0x00000080;
200004d0:	f04f 0c80 	mov.w	ip, #128	; 0x80
200004d4:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c

	int relevant_data_bytes = 6;
200004d8:	f04f 0c06 	mov.w	ip, #6
200004dc:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
	uint8_t tx_buff[relevant_data_bytes];
200004e0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
200004e2:	f106 3cff 	add.w	ip, r6, #4294967295
200004e6:	f8c7 c004 	str.w	ip, [r7, #4]
200004ea:	46b4      	mov	ip, r6
200004ec:	4664      	mov	r4, ip
200004ee:	f04f 0500 	mov.w	r5, #0
200004f2:	f04f 38ff 	mov.w	r8, #4294967295
200004f6:	f04f 090f 	mov.w	r9, #15
200004fa:	ea04 0408 	and.w	r4, r4, r8
200004fe:	ea05 0509 	and.w	r5, r5, r9
20000502:	ea4f 7c54 	mov.w	ip, r4, lsr #29
20000506:	ea4f 01c5 	mov.w	r1, r5, lsl #3
2000050a:	ea4c 0101 	orr.w	r1, ip, r1
2000050e:	ea4f 00c4 	mov.w	r0, r4, lsl #3
20000512:	f04f 34ff 	mov.w	r4, #4294967295
20000516:	f04f 050f 	mov.w	r5, #15
2000051a:	ea00 0004 	and.w	r0, r0, r4
2000051e:	ea01 0105 	and.w	r1, r1, r5
20000522:	4631      	mov	r1, r6
20000524:	4608      	mov	r0, r1
20000526:	f04f 0100 	mov.w	r1, #0
2000052a:	f04f 34ff 	mov.w	r4, #4294967295
2000052e:	f04f 050f 	mov.w	r5, #15
20000532:	ea00 0004 	and.w	r0, r0, r4
20000536:	ea01 0105 	and.w	r1, r1, r5
2000053a:	ea4f 7c50 	mov.w	ip, r0, lsr #29
2000053e:	ea4f 03c1 	mov.w	r3, r1, lsl #3
20000542:	ea4c 0303 	orr.w	r3, ip, r3
20000546:	ea4f 02c0 	mov.w	r2, r0, lsl #3
2000054a:	f04f 30ff 	mov.w	r0, #4294967295
2000054e:	f04f 010f 	mov.w	r1, #15
20000552:	ea02 0200 	and.w	r2, r2, r0
20000556:	ea03 0301 	and.w	r3, r3, r1
2000055a:	4633      	mov	r3, r6
2000055c:	f103 0307 	add.w	r3, r3, #7
20000560:	f103 0307 	add.w	r3, r3, #7
20000564:	ea4f 03d3 	mov.w	r3, r3, lsr #3
20000568:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000056c:	ebad 0d03 	sub.w	sp, sp, r3
20000570:	466b      	mov	r3, sp
20000572:	f103 0307 	add.w	r3, r3, #7
20000576:	ea4f 03d3 	mov.w	r3, r3, lsr #3
2000057a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000057e:	60bb      	str	r3, [r7, #8]
	int i;

	MSS_UART_init(
20000580:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000584:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000588:	f44f 4161 	mov.w	r1, #57600	; 0xe100
2000058c:	f04f 0203 	mov.w	r2, #3
20000590:	f000 fc8a 	bl	20000ea8 <MSS_UART_init>
			MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
	);

	while( 1 )
	{
		controller_buff = *CONTROLLER_DATA_REG;
20000594:	f240 0300 	movw	r3, #0
20000598:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000059c:	681b      	ldr	r3, [r3, #0]
2000059e:	60fb      	str	r3, [r7, #12]

		y_axis = (uint8_t)((controller_buff & y_mask) >> 24);
200005a0:	68fa      	ldr	r2, [r7, #12]
200005a2:	69bb      	ldr	r3, [r7, #24]
200005a4:	ea02 0303 	and.w	r3, r2, r3
200005a8:	ea4f 6313 	mov.w	r3, r3, lsr #24
200005ac:	74bb      	strb	r3, [r7, #18]
		x_axis = (uint8_t)((controller_buff & x_mask) >> 16);
200005ae:	68fa      	ldr	r2, [r7, #12]
200005b0:	69fb      	ldr	r3, [r7, #28]
200005b2:	ea02 0303 	and.w	r3, r2, r3
200005b6:	ea4f 4313 	mov.w	r3, r3, lsr #16
200005ba:	74fb      	strb	r3, [r7, #19]
		up = (uint8_t)((controller_buff & up_mask) >> 4);
200005bc:	68fa      	ldr	r2, [r7, #12]
200005be:	6a3b      	ldr	r3, [r7, #32]
200005c0:	ea02 0303 	and.w	r3, r2, r3
200005c4:	ea4f 1313 	mov.w	r3, r3, lsr #4
200005c8:	753b      	strb	r3, [r7, #20]
		down = (uint8_t)((controller_buff & down_mask) >> 5);
200005ca:	68fa      	ldr	r2, [r7, #12]
200005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200005ce:	ea02 0303 	and.w	r3, r2, r3
200005d2:	ea4f 1353 	mov.w	r3, r3, lsr #5
200005d6:	757b      	strb	r3, [r7, #21]
		left = (uint8_t)((controller_buff & left_mask) >> 6);
200005d8:	68fa      	ldr	r2, [r7, #12]
200005da:	6abb      	ldr	r3, [r7, #40]	; 0x28
200005dc:	ea02 0303 	and.w	r3, r2, r3
200005e0:	ea4f 1393 	mov.w	r3, r3, lsr #6
200005e4:	75bb      	strb	r3, [r7, #22]
		right =(uint8_t)((controller_buff & right_mask) >> 7);
200005e6:	68fa      	ldr	r2, [r7, #12]
200005e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200005ea:	ea02 0303 	and.w	r3, r2, r3
200005ee:	ea4f 13d3 	mov.w	r3, r3, lsr #7
200005f2:	75fb      	strb	r3, [r7, #23]

		tx_buff[0] = y_axis;
200005f4:	68bb      	ldr	r3, [r7, #8]
200005f6:	7cba      	ldrb	r2, [r7, #18]
200005f8:	701a      	strb	r2, [r3, #0]
		tx_buff[1] = x_axis;
200005fa:	68bb      	ldr	r3, [r7, #8]
200005fc:	7cfa      	ldrb	r2, [r7, #19]
200005fe:	705a      	strb	r2, [r3, #1]
		tx_buff[2] = up;
20000600:	68bb      	ldr	r3, [r7, #8]
20000602:	7d3a      	ldrb	r2, [r7, #20]
20000604:	709a      	strb	r2, [r3, #2]
		tx_buff[3] = down;
20000606:	68bb      	ldr	r3, [r7, #8]
20000608:	7d7a      	ldrb	r2, [r7, #21]
2000060a:	70da      	strb	r2, [r3, #3]
		tx_buff[4] = left;
2000060c:	68bb      	ldr	r3, [r7, #8]
2000060e:	7dba      	ldrb	r2, [r7, #22]
20000610:	711a      	strb	r2, [r3, #4]
		tx_buff[5] = right;
20000612:	68bb      	ldr	r3, [r7, #8]
20000614:	7dfa      	ldrb	r2, [r7, #23]
20000616:	715a      	strb	r2, [r3, #5]

		MSS_UART_polled_tx(&g_mss_uart1, tx_buff, sizeof(tx_buff));
20000618:	68ba      	ldr	r2, [r7, #8]
2000061a:	4633      	mov	r3, r6
2000061c:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000620:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000624:	4611      	mov	r1, r2
20000626:	461a      	mov	r2, r3
20000628:	f000 f802 	bl	20000630 <MSS_UART_polled_tx>

		//printf("Controller Data: %" PRIu32 "\n",controller_buff);

	}
2000062c:	e7b2      	b.n	20000594 <main+0xf4>
2000062e:	bf00      	nop

20000630 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000630:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
    uint32_t char_idx = 0U;
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000634:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000063c:	4298      	cmp	r0, r3
2000063e:	d006      	beq.n	2000064e <MSS_UART_polled_tx+0x1e>
20000640:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000644:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000648:	4298      	cmp	r0, r3
2000064a:	d000      	beq.n	2000064e <MSS_UART_polled_tx+0x1e>
2000064c:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
2000064e:	b901      	cbnz	r1, 20000652 <MSS_UART_polled_tx+0x22>
20000650:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000652:	b902      	cbnz	r2, 20000656 <MSS_UART_polled_tx+0x26>
20000654:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000656:	f241 13cc 	movw	r3, #4556	; 0x11cc
2000065a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000065e:	4298      	cmp	r0, r3
20000660:	d005      	beq.n	2000066e <MSS_UART_polled_tx+0x3e>
20000662:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000666:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000066a:	4298      	cmp	r0, r3
2000066c:	d133      	bne.n	200006d6 <MSS_UART_polled_tx+0xa6>
2000066e:	1e13      	subs	r3, r2, #0
20000670:	bf18      	it	ne
20000672:	2301      	movne	r3, #1
20000674:	2900      	cmp	r1, #0
20000676:	bf0c      	ite	eq
20000678:	2300      	moveq	r3, #0
2000067a:	f003 0301 	andne.w	r3, r3, #1
2000067e:	2b00      	cmp	r3, #0
20000680:	d029      	beq.n	200006d6 <MSS_UART_polled_tx+0xa6>
20000682:	f04f 0700 	mov.w	r7, #0
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000686:	46b8      	mov	r8, r7
            if( status & MSS_UART_THRE )
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20000688:	f04f 0a10 	mov.w	sl, #16
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
2000068c:	6803      	ldr	r3, [r0, #0]
2000068e:	7d1b      	ldrb	r3, [r3, #20]
            this_uart->status |= status;
20000690:	f890 c00a 	ldrb.w	ip, [r0, #10]
20000694:	ea43 0c0c 	orr.w	ip, r3, ip
20000698:	f880 c00a 	strb.w	ip, [r0, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
2000069c:	f013 0f20 	tst.w	r3, #32
200006a0:	d017      	beq.n	200006d2 <MSS_UART_polled_tx+0xa2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
200006a2:	2a0f      	cmp	r2, #15
200006a4:	d904      	bls.n	200006b0 <MSS_UART_polled_tx+0x80>
200006a6:	4656      	mov	r6, sl
200006a8:	46bc      	mov	ip, r7
200006aa:	4643      	mov	r3, r8

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200006ac:	440f      	add	r7, r1
200006ae:	e004      	b.n	200006ba <MSS_UART_polled_tx+0x8a>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200006b0:	b90a      	cbnz	r2, 200006b6 <MSS_UART_polled_tx+0x86>
200006b2:	4643      	mov	r3, r8
200006b4:	e00b      	b.n	200006ce <MSS_UART_polled_tx+0x9e>
200006b6:	4616      	mov	r6, r2
200006b8:	e7f6      	b.n	200006a8 <MSS_UART_polled_tx+0x78>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
200006ba:	6804      	ldr	r4, [r0, #0]
200006bc:	5cfd      	ldrb	r5, [r7, r3]
200006be:	7025      	strb	r5, [r4, #0]
200006c0:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
200006c4:	f103 0301 	add.w	r3, r3, #1
200006c8:	429e      	cmp	r6, r3
200006ca:	d8f6      	bhi.n	200006ba <MSS_UART_polled_tx+0x8a>
200006cc:	4667      	mov	r7, ip
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
200006ce:	ebc3 0202 	rsb	r2, r3, r2
            }
        }while( tx_size );
200006d2:	2a00      	cmp	r2, #0
200006d4:	d1da      	bne.n	2000068c <MSS_UART_polled_tx+0x5c>
    }
}
200006d6:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
200006da:	4770      	bx	lr

200006dc <MSS_UART_polled_tx_string>:
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
200006dc:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t char_idx = 0U;
    uint32_t fill_size;
    uint_fast8_t data_byte;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200006de:	f241 13cc 	movw	r3, #4556	; 0x11cc
200006e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006e6:	4298      	cmp	r0, r3
200006e8:	d006      	beq.n	200006f8 <MSS_UART_polled_tx_string+0x1c>
200006ea:	f241 13a4 	movw	r3, #4516	; 0x11a4
200006ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006f2:	4298      	cmp	r0, r3
200006f4:	d000      	beq.n	200006f8 <MSS_UART_polled_tx_string+0x1c>
200006f6:	be00      	bkpt	0x0000
    ASSERT( p_sz_string != ( (uint8_t *)0 ) );
200006f8:	b901      	cbnz	r1, 200006fc <MSS_UART_polled_tx_string+0x20>
200006fa:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
200006fc:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000700:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000704:	4298      	cmp	r0, r3
20000706:	d005      	beq.n	20000714 <MSS_UART_polled_tx_string+0x38>
20000708:	f241 13a4 	movw	r3, #4516	; 0x11a4
2000070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000710:	4298      	cmp	r0, r3
20000712:	d128      	bne.n	20000766 <MSS_UART_polled_tx_string+0x8a>
20000714:	b339      	cbz	r1, 20000766 <MSS_UART_polled_tx_string+0x8a>
          ( p_sz_string != ( (uint8_t *)0 ) ) )
    {
        /* Get the first data byte from the input buffer */
        data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000716:	780d      	ldrb	r5, [r1, #0]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
20000718:	b32d      	cbz	r5, 20000766 <MSS_UART_polled_tx_string+0x8a>
2000071a:	f04f 0c00 	mov.w	ip, #0

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
2000071e:	4666      	mov	r6, ip
         */
        while ( 0U != data_byte )
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
20000720:	6804      	ldr	r4, [r0, #0]
20000722:	7d23      	ldrb	r3, [r4, #20]
                this_uart->status |= status;
20000724:	7a82      	ldrb	r2, [r0, #10]
20000726:	ea43 0202 	orr.w	r2, r3, r2
2000072a:	7282      	strb	r2, [r0, #10]
            } while ( !( status & MSS_UART_THRE ) );
2000072c:	f013 0f20 	tst.w	r3, #32
20000730:	d0f7      	beq.n	20000722 <MSS_UART_polled_tx_string+0x46>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
20000732:	b1c5      	cbz	r5, 20000766 <MSS_UART_polled_tx_string+0x8a>
20000734:	4633      	mov	r3, r6
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000736:	eb01 070c 	add.w	r7, r1, ip
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
2000073a:	6802      	ldr	r2, [r0, #0]
2000073c:	b2ed      	uxtb	r5, r5
2000073e:	7015      	strb	r5, [r2, #0]
                ++fill_size;
20000740:	f103 0301 	add.w	r3, r3, #1
20000744:	eb03 040c 	add.w	r4, r3, ip
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
20000748:	5cfd      	ldrb	r5, [r7, r3]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
2000074a:	2b0f      	cmp	r3, #15
2000074c:	bf8c      	ite	hi
2000074e:	2200      	movhi	r2, #0
20000750:	2201      	movls	r2, #1
20000752:	2d00      	cmp	r5, #0
20000754:	bf0c      	ite	eq
20000756:	2200      	moveq	r2, #0
20000758:	f002 0201 	andne.w	r2, r2, #1
2000075c:	2a00      	cmp	r2, #0
2000075e:	d1ec      	bne.n	2000073a <MSS_UART_polled_tx_string+0x5e>

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
20000760:	b10d      	cbz	r5, 20000766 <MSS_UART_polled_tx_string+0x8a>
20000762:	46a4      	mov	ip, r4
20000764:	e7dc      	b.n	20000720 <MSS_UART_polled_tx_string+0x44>
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
            }
        }
    }
}
20000766:	bcf0      	pop	{r4, r5, r6, r7}
20000768:	4770      	bx	lr
2000076a:	bf00      	nop

2000076c <MSS_UART_irq_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
2000076c:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000076e:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000772:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000776:	4298      	cmp	r0, r3
20000778:	d006      	beq.n	20000788 <MSS_UART_irq_tx+0x1c>
2000077a:	f241 13a4 	movw	r3, #4516	; 0x11a4
2000077e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000782:	4298      	cmp	r0, r3
20000784:	d000      	beq.n	20000788 <MSS_UART_irq_tx+0x1c>
20000786:	be00      	bkpt	0x0000
    ASSERT( pbuff != ((uint8_t *)0) );
20000788:	b901      	cbnz	r1, 2000078c <MSS_UART_irq_tx+0x20>
2000078a:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
2000078c:	b90a      	cbnz	r2, 20000792 <MSS_UART_irq_tx+0x26>
2000078e:	be00      	bkpt	0x0000
20000790:	e036      	b.n	20000800 <MSS_UART_irq_tx+0x94>

    if ( ( tx_size > 0U ) && ( pbuff != ((uint8_t *)0) ) &&
20000792:	2900      	cmp	r1, #0
20000794:	d034      	beq.n	20000800 <MSS_UART_irq_tx+0x94>
       ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) )
20000796:	f241 13cc 	movw	r3, #4556	; 0x11cc
2000079a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000079e:	4298      	cmp	r0, r3
200007a0:	d005      	beq.n	200007ae <MSS_UART_irq_tx+0x42>
200007a2:	f241 13a4 	movw	r3, #4516	; 0x11a4
200007a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007aa:	4298      	cmp	r0, r3
200007ac:	d128      	bne.n	20000800 <MSS_UART_irq_tx+0x94>
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
200007ae:	60c1      	str	r1, [r0, #12]
        this_uart->tx_buff_size = tx_size;
200007b0:	6102      	str	r2, [r0, #16]
        this_uart->tx_idx = (uint16_t)0;
200007b2:	f04f 0300 	mov.w	r3, #0
200007b6:	6143      	str	r3, [r0, #20]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
200007b8:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200007ba:	b219      	sxth	r1, r3
200007bc:	ea4f 1151 	mov.w	r1, r1, lsr #5
200007c0:	f003 031f 	and.w	r3, r3, #31
200007c4:	f04f 0201 	mov.w	r2, #1
200007c8:	fa02 f403 	lsl.w	r4, r2, r3
200007cc:	f24e 1300 	movw	r3, #57600	; 0xe100
200007d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200007d4:	f101 0160 	add.w	r1, r1, #96	; 0x60
200007d8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
200007dc:	f640 2115 	movw	r1, #2581	; 0xa15
200007e0:	f2c2 0100 	movt	r1, #8192	; 0x2000
200007e4:	6201      	str	r1, [r0, #32]

        /* enables TX interrupt */
        this_uart->hw_reg_bit->IER_ETBEI = (uint32_t)1;
200007e6:	6841      	ldr	r1, [r0, #4]
200007e8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
200007ec:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200007ee:	b208      	sxth	r0, r1
200007f0:	ea4f 1050 	mov.w	r0, r0, lsr #5
200007f4:	f001 011f 	and.w	r1, r1, #31
200007f8:	fa02 f201 	lsl.w	r2, r2, r1
200007fc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000800:	bc10      	pop	{r4}
20000802:	4770      	bx	lr

20000804 <MSS_UART_tx_complete>:
)
{
    int8_t ret_value = 0;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000804:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000808:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000080c:	4298      	cmp	r0, r3
2000080e:	d009      	beq.n	20000824 <MSS_UART_tx_complete+0x20>
20000810:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000814:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000818:	4298      	cmp	r0, r3
2000081a:	d003      	beq.n	20000824 <MSS_UART_tx_complete+0x20>
2000081c:	be00      	bkpt	0x0000
2000081e:	f04f 0000 	mov.w	r0, #0
20000822:	4770      	bx	lr

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000824:	6803      	ldr	r3, [r0, #0]
20000826:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000828:	7a82      	ldrb	r2, [r0, #10]
2000082a:	ea43 0202 	orr.w	r2, r3, r2
2000082e:	7282      	strb	r2, [r0, #10]

        if ( ( TX_COMPLETE == this_uart->tx_buff_size ) &&
20000830:	6902      	ldr	r2, [r0, #16]
20000832:	b112      	cbz	r2, 2000083a <MSS_UART_tx_complete+0x36>
20000834:	f04f 0000 	mov.w	r0, #0
20000838:	4770      	bx	lr
2000083a:	f3c3 1080 	ubfx	r0, r3, #6, #1
        {
            ret_value = (int8_t)1;
        }
    }
    return ret_value;
}
2000083e:	4770      	bx	lr

20000840 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20000840:	b410      	push	{r4}
20000842:	4603      	mov	r3, r0
    size_t rx_size = 0U;
    uint8_t status = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000844:	f241 10cc 	movw	r0, #4556	; 0x11cc
20000848:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000084c:	4283      	cmp	r3, r0
2000084e:	d006      	beq.n	2000085e <MSS_UART_get_rx+0x1e>
20000850:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000854:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000858:	4283      	cmp	r3, r0
2000085a:	d000      	beq.n	2000085e <MSS_UART_get_rx+0x1e>
2000085c:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
2000085e:	b901      	cbnz	r1, 20000862 <MSS_UART_get_rx+0x22>
20000860:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
20000862:	b902      	cbnz	r2, 20000866 <MSS_UART_get_rx+0x26>
20000864:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000866:	f241 10cc 	movw	r0, #4556	; 0x11cc
2000086a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086e:	4283      	cmp	r3, r0
20000870:	d005      	beq.n	2000087e <MSS_UART_get_rx+0x3e>
20000872:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000876:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000087a:	4283      	cmp	r3, r0
2000087c:	d12a      	bne.n	200008d4 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
2000087e:	1e10      	subs	r0, r2, #0
20000880:	bf18      	it	ne
20000882:	2001      	movne	r0, #1

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( rx_buff != ((uint8_t *)0) );
    ASSERT( buff_size > 0U );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000884:	2900      	cmp	r1, #0
20000886:	bf0c      	ite	eq
20000888:	2400      	moveq	r4, #0
2000088a:	f000 0401 	andne.w	r4, r0, #1
2000088e:	b30c      	cbz	r4, 200008d4 <MSS_UART_get_rx+0x94>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20000890:	681c      	ldr	r4, [r3, #0]
20000892:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20000896:	7a9c      	ldrb	r4, [r3, #10]
20000898:	ea4c 0404 	orr.w	r4, ip, r4
2000089c:	729c      	strb	r4, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
2000089e:	ea1c 0f00 	tst.w	ip, r0
200008a2:	d017      	beq.n	200008d4 <MSS_UART_get_rx+0x94>
200008a4:	f04f 0000 	mov.w	r0, #0
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
200008a8:	681c      	ldr	r4, [r3, #0]
200008aa:	f894 c000 	ldrb.w	ip, [r4]
200008ae:	f801 c000 	strb.w	ip, [r1, r0]
            ++rx_size;
200008b2:	f100 0001 	add.w	r0, r0, #1
            status = this_uart->hw_reg->LSR;
200008b6:	681c      	ldr	r4, [r3, #0]
200008b8:	f894 c014 	ldrb.w	ip, [r4, #20]
            this_uart->status |= status;
200008bc:	7a9c      	ldrb	r4, [r3, #10]
200008be:	ea4c 0404 	orr.w	r4, ip, r4
200008c2:	729c      	strb	r4, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
200008c4:	4282      	cmp	r2, r0
200008c6:	bf94      	ite	ls
200008c8:	2400      	movls	r4, #0
200008ca:	f00c 0401 	andhi.w	r4, ip, #1
200008ce:	2c00      	cmp	r4, #0
200008d0:	d1ea      	bne.n	200008a8 <MSS_UART_get_rx+0x68>
200008d2:	e001      	b.n	200008d8 <MSS_UART_get_rx+0x98>
200008d4:	f04f 0000 	mov.w	r0, #0
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
}
200008d8:	bc10      	pop	{r4}
200008da:	4770      	bx	lr

200008dc <MSS_UART_enable_irq>:
MSS_UART_enable_irq
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
200008dc:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200008de:	f241 13cc 	movw	r3, #4556	; 0x11cc
200008e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008e6:	4298      	cmp	r0, r3
200008e8:	d007      	beq.n	200008fa <MSS_UART_enable_irq+0x1e>
200008ea:	f241 13a4 	movw	r3, #4516	; 0x11a4
200008ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008f2:	4298      	cmp	r0, r3
200008f4:	d001      	beq.n	200008fa <MSS_UART_enable_irq+0x1e>
200008f6:	be00      	bkpt	0x0000
200008f8:	e022      	b.n	20000940 <MSS_UART_enable_irq+0x64>

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
200008fa:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200008fc:	fa0f fc83 	sxth.w	ip, r3
20000900:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
20000904:	f003 031f 	and.w	r3, r3, #31
20000908:	f04f 0201 	mov.w	r2, #1
2000090c:	fa02 f403 	lsl.w	r4, r2, r3
20000910:	f24e 1300 	movw	r3, #57600	; 0xe100
20000914:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000918:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
2000091c:	f843 402c 	str.w	r4, [r3, ip, lsl #2]
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER |= irq_mask;
20000920:	6804      	ldr	r4, [r0, #0]
20000922:	f894 c004 	ldrb.w	ip, [r4, #4]
20000926:	ea41 010c 	orr.w	r1, r1, ip
2000092a:	7121      	strb	r1, [r4, #4]

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
2000092c:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000092e:	b208      	sxth	r0, r1
20000930:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000934:	f001 011f 	and.w	r1, r1, #31
20000938:	fa02 f201 	lsl.w	r2, r2, r1
2000093c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000940:	bc10      	pop	{r4}
20000942:	4770      	bx	lr

20000944 <MSS_UART_disable_irq>:
(
    mss_uart_instance_t * this_uart,
    uint8_t irq_mask
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000944:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000948:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000094c:	4298      	cmp	r0, r3
2000094e:	d007      	beq.n	20000960 <MSS_UART_disable_irq+0x1c>
20000950:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000958:	4298      	cmp	r0, r3
2000095a:	d001      	beq.n	20000960 <MSS_UART_disable_irq+0x1c>
2000095c:	be00      	bkpt	0x0000
2000095e:	4770      	bx	lr
         * bit 0 - Receive Data Available Interrupt
         * bit 1 - Transmitter Holding  Register Empty Interrupt
         * bit 2 - Receiver Line Status Interrupt
         * bit 3 - Modem Status Interrupt
         */
        this_uart->hw_reg->IER &= ( (uint8_t)~irq_mask );
20000960:	6803      	ldr	r3, [r0, #0]
20000962:	791a      	ldrb	r2, [r3, #4]
20000964:	ea22 0201 	bic.w	r2, r2, r1
20000968:	711a      	strb	r2, [r3, #4]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
2000096a:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000096c:	b218      	sxth	r0, r3
2000096e:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000972:	f003 031f 	and.w	r3, r3, #31
20000976:	f04f 0201 	mov.w	r2, #1
2000097a:	fa02 f203 	lsl.w	r2, r2, r3
2000097e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000982:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000986:	f100 0c60 	add.w	ip, r0, #96	; 0x60
2000098a:	f843 202c 	str.w	r2, [r3, ip, lsl #2]

        if( irq_mask == IIRF_MASK )
2000098e:	290f      	cmp	r1, #15
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000990:	bf01      	itttt	eq
20000992:	f24e 1300 	movweq	r3, #57600	; 0xe100
20000996:	f2ce 0300 	movteq	r3, #57344	; 0xe000
2000099a:	3020      	addeq	r0, #32
2000099c:	f843 2020 	streq.w	r2, [r3, r0, lsl #2]
200009a0:	4770      	bx	lr
200009a2:	bf00      	nop

200009a4 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
200009a4:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200009a6:	f241 13cc 	movw	r3, #4556	; 0x11cc
200009aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009ae:	4298      	cmp	r0, r3
200009b0:	d007      	beq.n	200009c2 <MSS_UART_isr+0x1e>
200009b2:	f241 13a4 	movw	r3, #4516	; 0x11a4
200009b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009ba:	4298      	cmp	r0, r3
200009bc:	d001      	beq.n	200009c2 <MSS_UART_isr+0x1e>
200009be:	be00      	bkpt	0x0000
200009c0:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
200009c2:	6803      	ldr	r3, [r0, #0]
200009c4:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
200009c6:	f003 030f 	and.w	r3, r3, #15
200009ca:	2b0c      	cmp	r3, #12
200009cc:	d820      	bhi.n	20000a10 <MSS_UART_isr+0x6c>
200009ce:	e8df f003 	tbb	[pc, r3]
200009d2:	1f07      	.short	0x1f07
200009d4:	1f131f0d 	.word	0x1f131f0d
200009d8:	1f1f1f19 	.word	0x1f1f1f19
200009dc:	1f1f      	.short	0x1f1f
200009de:	13          	.byte	0x13
200009df:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
200009e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
200009e2:	b90b      	cbnz	r3, 200009e8 <MSS_UART_isr+0x44>
200009e4:	be00      	bkpt	0x0000
200009e6:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
200009e8:	4798      	blx	r3
200009ea:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
200009ec:	6a03      	ldr	r3, [r0, #32]
200009ee:	b90b      	cbnz	r3, 200009f4 <MSS_UART_isr+0x50>
200009f0:	be00      	bkpt	0x0000
200009f2:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
200009f4:	4798      	blx	r3
200009f6:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
200009f8:	69c3      	ldr	r3, [r0, #28]
200009fa:	b90b      	cbnz	r3, 20000a00 <MSS_UART_isr+0x5c>
200009fc:	be00      	bkpt	0x0000
200009fe:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
20000a00:	4798      	blx	r3
20000a02:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000a04:	6983      	ldr	r3, [r0, #24]
20000a06:	b90b      	cbnz	r3, 20000a0c <MSS_UART_isr+0x68>
20000a08:	be00      	bkpt	0x0000
20000a0a:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
20000a0c:	4798      	blx	r3
20000a0e:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000a10:	be00      	bkpt	0x0000
20000a12:	bd08      	pop	{r3, pc}

20000a14 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000a14:	b410      	push	{r4}
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000a16:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a1e:	4298      	cmp	r0, r3
20000a20:	d006      	beq.n	20000a30 <default_tx_handler+0x1c>
20000a22:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a2a:	4298      	cmp	r0, r3
20000a2c:	d000      	beq.n	20000a30 <default_tx_handler+0x1c>
20000a2e:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20000a30:	68c2      	ldr	r2, [r0, #12]
20000a32:	b902      	cbnz	r2, 20000a36 <default_tx_handler+0x22>
20000a34:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20000a36:	6901      	ldr	r1, [r0, #16]
20000a38:	b901      	cbnz	r1, 20000a3c <default_tx_handler+0x28>
20000a3a:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000a3c:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a44:	4298      	cmp	r0, r3
20000a46:	d005      	beq.n	20000a54 <default_tx_handler+0x40>
20000a48:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a50:	4298      	cmp	r0, r3
20000a52:	d130      	bne.n	20000ab6 <default_tx_handler+0xa2>
20000a54:	2a00      	cmp	r2, #0
20000a56:	d02e      	beq.n	20000ab6 <default_tx_handler+0xa2>
20000a58:	2900      	cmp	r1, #0
20000a5a:	d02c      	beq.n	20000ab6 <default_tx_handler+0xa2>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000a5c:	6803      	ldr	r3, [r0, #0]
20000a5e:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000a60:	7a82      	ldrb	r2, [r0, #10]
20000a62:	ea43 0202 	orr.w	r2, r3, r2
20000a66:	7282      	strb	r2, [r0, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20000a68:	f013 0f20 	tst.w	r3, #32
20000a6c:	d01a      	beq.n	20000aa4 <default_tx_handler+0x90>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20000a6e:	6902      	ldr	r2, [r0, #16]
20000a70:	6943      	ldr	r3, [r0, #20]
20000a72:	ebc3 0302 	rsb	r3, r3, r2

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20000a76:	2b0f      	cmp	r3, #15
20000a78:	d904      	bls.n	20000a84 <default_tx_handler+0x70>
20000a7a:	f04f 0c10 	mov.w	ip, #16
20000a7e:	f04f 0300 	mov.w	r3, #0
20000a82:	e002      	b.n	20000a8a <default_tx_handler+0x76>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000a84:	b173      	cbz	r3, 20000aa4 <default_tx_handler+0x90>
20000a86:	469c      	mov	ip, r3
20000a88:	e7f9      	b.n	20000a7e <default_tx_handler+0x6a>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20000a8a:	6802      	ldr	r2, [r0, #0]
20000a8c:	68c4      	ldr	r4, [r0, #12]
20000a8e:	6941      	ldr	r1, [r0, #20]
20000a90:	5c61      	ldrb	r1, [r4, r1]
20000a92:	7011      	strb	r1, [r2, #0]
                ++this_uart->tx_idx;
20000a94:	6942      	ldr	r2, [r0, #20]
20000a96:	f102 0201 	add.w	r2, r2, #1
20000a9a:	6142      	str	r2, [r0, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000a9c:	f103 0301 	add.w	r3, r3, #1
20000aa0:	4563      	cmp	r3, ip
20000aa2:	d3f2      	bcc.n	20000a8a <default_tx_handler+0x76>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20000aa4:	6942      	ldr	r2, [r0, #20]
20000aa6:	6903      	ldr	r3, [r0, #16]
20000aa8:	429a      	cmp	r2, r3
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20000aaa:	bf01      	itttt	eq
20000aac:	2300      	moveq	r3, #0
20000aae:	6103      	streq	r3, [r0, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
20000ab0:	6842      	ldreq	r2, [r0, #4]
20000ab2:	f8c2 3084 	streq.w	r3, [r2, #132]	; 0x84
        }
    }
}
20000ab6:	bc10      	pop	{r4}
20000ab8:	4770      	bx	lr
20000aba:	bf00      	nop

20000abc <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20000abc:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000abe:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ac6:	4298      	cmp	r0, r3
20000ac8:	d006      	beq.n	20000ad8 <MSS_UART_set_rx_handler+0x1c>
20000aca:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad2:	4298      	cmp	r0, r3
20000ad4:	d000      	beq.n	20000ad8 <MSS_UART_set_rx_handler+0x1c>
20000ad6:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20000ad8:	b901      	cbnz	r1, 20000adc <MSS_UART_set_rx_handler+0x20>
20000ada:	be00      	bkpt	0x0000
    ASSERT( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL );
20000adc:	2ac0      	cmp	r2, #192	; 0xc0
20000ade:	d900      	bls.n	20000ae2 <MSS_UART_set_rx_handler+0x26>
20000ae0:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000ae2:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aea:	4298      	cmp	r0, r3
20000aec:	d005      	beq.n	20000afa <MSS_UART_set_rx_handler+0x3e>
20000aee:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af6:	4298      	cmp	r0, r3
20000af8:	d12f      	bne.n	20000b5a <MSS_UART_set_rx_handler+0x9e>
20000afa:	2ac0      	cmp	r2, #192	; 0xc0
20000afc:	bf8c      	ite	hi
20000afe:	2300      	movhi	r3, #0
20000b00:	2301      	movls	r3, #1
20000b02:	2900      	cmp	r1, #0
20000b04:	bf0c      	ite	eq
20000b06:	2300      	moveq	r3, #0
20000b08:	f003 0301 	andne.w	r3, r3, #1
20000b0c:	b32b      	cbz	r3, 20000b5a <MSS_UART_set_rx_handler+0x9e>
        ( handler != INVALID_IRQ_HANDLER) &&
        ( trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL) )
    {
        this_uart->rx_handler = handler;
20000b0e:	61c1      	str	r1, [r0, #28]

        /* Set the receive interrupt trigger level. */
        /* Clear RX FIFO; Enable TXRDY and RXRDY for PDMA */
        this_uart->hw_reg->FCR = (uint8_t)(FCR_TRIG_LEVEL_MASK & (uint8_t)trigger_level) |
20000b10:	6803      	ldr	r3, [r0, #0]
20000b12:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
20000b16:	f042 020a 	orr.w	r2, r2, #10
20000b1a:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_ENABLE_TXRDY_RXRDY_MASK;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000b1c:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000b1e:	b219      	sxth	r1, r3
20000b20:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000b24:	f003 031f 	and.w	r3, r3, #31
20000b28:	f04f 0201 	mov.w	r2, #1
20000b2c:	fa02 f403 	lsl.w	r4, r2, r3
20000b30:	f24e 1300 	movw	r3, #57600	; 0xe100
20000b34:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000b38:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000b3c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;
20000b40:	6841      	ldr	r1, [r0, #4]
20000b42:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000b46:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000b48:	b208      	sxth	r0, r1
20000b4a:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000b4e:	f001 011f 	and.w	r1, r1, #31
20000b52:	fa02 f201 	lsl.w	r2, r2, r1
20000b56:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000b5a:	bc10      	pop	{r4}
20000b5c:	4770      	bx	lr
20000b5e:	bf00      	nop

20000b60 <MSS_UART_set_loopback>:
(
    mss_uart_instance_t *   this_uart,
    mss_uart_loopback_t     loopback
)
{
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000b60:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b68:	4298      	cmp	r0, r3
20000b6a:	d007      	beq.n	20000b7c <MSS_UART_set_loopback+0x1c>
20000b6c:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b74:	4298      	cmp	r0, r3
20000b76:	d001      	beq.n	20000b7c <MSS_UART_set_loopback+0x1c>
20000b78:	be00      	bkpt	0x0000
20000b7a:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        if ( loopback == MSS_UART_LOOPBACK_OFF )
20000b7c:	b929      	cbnz	r1, 20000b8a <MSS_UART_set_loopback+0x2a>
        {
            this_uart->hw_reg_bit->MCR_LOOP = 0U;
20000b7e:	6843      	ldr	r3, [r0, #4]
20000b80:	f04f 0200 	mov.w	r2, #0
20000b84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000b88:	4770      	bx	lr
        }
        else
        {
            this_uart->hw_reg_bit->MCR_LOOP = 1U;
20000b8a:	6843      	ldr	r3, [r0, #4]
20000b8c:	f04f 0201 	mov.w	r2, #1
20000b90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
20000b94:	4770      	bx	lr
20000b96:	bf00      	nop

20000b98 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000b98:	4668      	mov	r0, sp
20000b9a:	f020 0107 	bic.w	r1, r0, #7
20000b9e:	468d      	mov	sp, r1
20000ba0:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
20000ba2:	f241 10cc 	movw	r0, #4556	; 0x11cc
20000ba6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000baa:	f7ff fefb 	bl	200009a4 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000bae:	f24e 1300 	movw	r3, #57600	; 0xe100
20000bb2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000bba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
20000bbe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000bc2:	4685      	mov	sp, r0
20000bc4:	4770      	bx	lr
20000bc6:	bf00      	nop

20000bc8 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000bc8:	4668      	mov	r0, sp
20000bca:	f020 0107 	bic.w	r1, r0, #7
20000bce:	468d      	mov	sp, r1
20000bd0:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
20000bd2:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000bd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bda:	f7ff fee3 	bl	200009a4 <MSS_UART_isr>
20000bde:	f24e 1300 	movw	r3, #57600	; 0xe100
20000be2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
20000bea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
20000bee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20000bf2:	4685      	mov	sp, r0
20000bf4:	4770      	bx	lr
20000bf6:	bf00      	nop

20000bf8 <MSS_UART_set_rxstatus_handler>:
MSS_UART_set_rxstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000bf8:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000bfa:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c02:	4298      	cmp	r0, r3
20000c04:	d006      	beq.n	20000c14 <MSS_UART_set_rxstatus_handler+0x1c>
20000c06:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c0e:	4298      	cmp	r0, r3
20000c10:	d000      	beq.n	20000c14 <MSS_UART_set_rxstatus_handler+0x1c>
20000c12:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000c14:	b901      	cbnz	r1, 20000c18 <MSS_UART_set_rxstatus_handler+0x20>
20000c16:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000c18:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c20:	4298      	cmp	r0, r3
20000c22:	d005      	beq.n	20000c30 <MSS_UART_set_rxstatus_handler+0x38>
20000c24:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c2c:	4298      	cmp	r0, r3
20000c2e:	d120      	bne.n	20000c72 <MSS_UART_set_rxstatus_handler+0x7a>
20000c30:	b1f9      	cbz	r1, 20000c72 <MSS_UART_set_rxstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->linests_handler = handler;
20000c32:	6181      	str	r1, [r0, #24]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000c34:	8903      	ldrh	r3, [r0, #8]
20000c36:	b219      	sxth	r1, r3
20000c38:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000c3c:	f003 031f 	and.w	r3, r3, #31
20000c40:	f04f 0201 	mov.w	r2, #1
20000c44:	fa02 f403 	lsl.w	r4, r2, r3
20000c48:	f24e 1300 	movw	r3, #57600	; 0xe100
20000c4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000c50:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000c54:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable receiver line status interrupt. */
        this_uart->hw_reg_bit->IER_ELSI = 1U;
20000c58:	6841      	ldr	r1, [r0, #4]
20000c5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000c5e:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000c60:	b208      	sxth	r0, r1
20000c62:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000c66:	f001 011f 	and.w	r1, r1, #31
20000c6a:	fa02 f201 	lsl.w	r2, r2, r1
20000c6e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000c72:	bc10      	pop	{r4}
20000c74:	4770      	bx	lr
20000c76:	bf00      	nop

20000c78 <MSS_UART_set_tx_handler>:
MSS_UART_set_tx_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000c78:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c7a:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c82:	4298      	cmp	r0, r3
20000c84:	d006      	beq.n	20000c94 <MSS_UART_set_tx_handler+0x1c>
20000c86:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c8e:	4298      	cmp	r0, r3
20000c90:	d000      	beq.n	20000c94 <MSS_UART_set_tx_handler+0x1c>
20000c92:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER);
20000c94:	b901      	cbnz	r1, 20000c98 <MSS_UART_set_tx_handler+0x20>
20000c96:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000c98:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca0:	4298      	cmp	r0, r3
20000ca2:	d005      	beq.n	20000cb0 <MSS_UART_set_tx_handler+0x38>
20000ca4:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cac:	4298      	cmp	r0, r3
20000cae:	d124      	bne.n	20000cfa <MSS_UART_set_tx_handler+0x82>
20000cb0:	b319      	cbz	r1, 20000cfa <MSS_UART_set_tx_handler+0x82>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->tx_handler = handler;
20000cb2:	6201      	str	r1, [r0, #32]

        /* Make TX buffer info invalid */
        this_uart->tx_buffer = (const uint8_t *)0;
20000cb4:	f04f 0300 	mov.w	r3, #0
20000cb8:	60c3      	str	r3, [r0, #12]
        this_uart->tx_buff_size = 0U;
20000cba:	6103      	str	r3, [r0, #16]

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000cbc:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000cbe:	b219      	sxth	r1, r3
20000cc0:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000cc4:	f003 031f 	and.w	r3, r3, #31
20000cc8:	f04f 0201 	mov.w	r2, #1
20000ccc:	fa02 f403 	lsl.w	r4, r2, r3
20000cd0:	f24e 1300 	movw	r3, #57600	; 0xe100
20000cd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000cd8:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000cdc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable transmitter holding register Empty interrupt. */
        this_uart->hw_reg_bit->IER_ETBEI = 1U;
20000ce0:	6841      	ldr	r1, [r0, #4]
20000ce2:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000ce6:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000ce8:	b208      	sxth	r0, r1
20000cea:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000cee:	f001 011f 	and.w	r1, r1, #31
20000cf2:	fa02 f201 	lsl.w	r2, r2, r1
20000cf6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000cfa:	bc10      	pop	{r4}
20000cfc:	4770      	bx	lr
20000cfe:	bf00      	nop

20000d00 <MSS_UART_set_modemstatus_handler>:
MSS_UART_set_modemstatus_handler
(
    mss_uart_instance_t * this_uart,
    mss_uart_irq_handler_t handler
)
{
20000d00:	b410      	push	{r4}
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d02:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d0a:	4298      	cmp	r0, r3
20000d0c:	d006      	beq.n	20000d1c <MSS_UART_set_modemstatus_handler+0x1c>
20000d0e:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d16:	4298      	cmp	r0, r3
20000d18:	d000      	beq.n	20000d1c <MSS_UART_set_modemstatus_handler+0x1c>
20000d1a:	be00      	bkpt	0x0000
    ASSERT( handler != INVALID_IRQ_HANDLER );
20000d1c:	b901      	cbnz	r1, 20000d20 <MSS_UART_set_modemstatus_handler+0x20>
20000d1e:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000d20:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d28:	4298      	cmp	r0, r3
20000d2a:	d005      	beq.n	20000d38 <MSS_UART_set_modemstatus_handler+0x38>
20000d2c:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d34:	4298      	cmp	r0, r3
20000d36:	d120      	bne.n	20000d7a <MSS_UART_set_modemstatus_handler+0x7a>
20000d38:	b1f9      	cbz	r1, 20000d7a <MSS_UART_set_modemstatus_handler+0x7a>
        ( handler != INVALID_IRQ_HANDLER) )
    {
        this_uart->modemsts_handler = handler;
20000d3a:	6241      	str	r1, [r0, #36]	; 0x24

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ( this_uart->irqn );
20000d3c:	8903      	ldrh	r3, [r0, #8]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000d3e:	b219      	sxth	r1, r3
20000d40:	ea4f 1151 	mov.w	r1, r1, lsr #5
20000d44:	f003 031f 	and.w	r3, r3, #31
20000d48:	f04f 0201 	mov.w	r2, #1
20000d4c:	fa02 f403 	lsl.w	r4, r2, r3
20000d50:	f24e 1300 	movw	r3, #57600	; 0xe100
20000d54:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000d58:	f101 0160 	add.w	r1, r1, #96	; 0x60
20000d5c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

        /* Enable modem status interrupt. */
        this_uart->hw_reg_bit->IER_EDSSI = 1U;
20000d60:	6841      	ldr	r1, [r0, #4]
20000d62:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
20000d66:	8901      	ldrh	r1, [r0, #8]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000d68:	b208      	sxth	r0, r1
20000d6a:	ea4f 1050 	mov.w	r0, r0, lsr #5
20000d6e:	f001 011f 	and.w	r1, r1, #31
20000d72:	fa02 f201 	lsl.w	r2, r2, r1
20000d76:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }
}
20000d7a:	bc10      	pop	{r4}
20000d7c:	4770      	bx	lr
20000d7e:	bf00      	nop

20000d80 <MSS_UART_fill_tx_fifo>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
20000d80:	b410      	push	{r4}
20000d82:	4603      	mov	r3, r0
    uint8_t status = 0U;
    size_t size_sent = 0U;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d84:	f241 10cc 	movw	r0, #4556	; 0x11cc
20000d88:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d8c:	4283      	cmp	r3, r0
20000d8e:	d006      	beq.n	20000d9e <MSS_UART_fill_tx_fifo+0x1e>
20000d90:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000d94:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000d98:	4283      	cmp	r3, r0
20000d9a:	d000      	beq.n	20000d9e <MSS_UART_fill_tx_fifo+0x1e>
20000d9c:	be00      	bkpt	0x0000
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
20000d9e:	b901      	cbnz	r1, 20000da2 <MSS_UART_fill_tx_fifo+0x22>
20000da0:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0 );
20000da2:	b902      	cbnz	r2, 20000da6 <MSS_UART_fill_tx_fifo+0x26>
20000da4:	be00      	bkpt	0x0000

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
20000da6:	f241 10cc 	movw	r0, #4556	; 0x11cc
20000daa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000dae:	4283      	cmp	r3, r0
20000db0:	d005      	beq.n	20000dbe <MSS_UART_fill_tx_fifo+0x3e>
20000db2:	f241 10a4 	movw	r0, #4516	; 0x11a4
20000db6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000dba:	4283      	cmp	r3, r0
20000dbc:	d126      	bne.n	20000e0c <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
20000dbe:	1e10      	subs	r0, r2, #0
20000dc0:	bf18      	it	ne
20000dc2:	2001      	movne	r0, #1
    ASSERT( tx_buffer != ( (uint8_t *)0 ) );
    ASSERT( tx_size > 0 );

    /* Fill the UART's Tx FIFO until the FIFO is full or the complete input
     * buffer has been written. */
    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1 ) ) &&
20000dc4:	2900      	cmp	r1, #0
20000dc6:	bf0c      	ite	eq
20000dc8:	2400      	moveq	r4, #0
20000dca:	f000 0401 	andne.w	r4, r0, #1
20000dce:	b1ec      	cbz	r4, 20000e0c <MSS_UART_fill_tx_fifo+0x8c>
        (tx_buffer != ( (uint8_t *)0 ))   &&
        (tx_size > 0u) )
    {
        status = this_uart->hw_reg->LSR;
20000dd0:	681c      	ldr	r4, [r3, #0]
20000dd2:	f894 c014 	ldrb.w	ip, [r4, #20]
        this_uart->status |= status;
20000dd6:	7a9c      	ldrb	r4, [r3, #10]
20000dd8:	ea4c 0404 	orr.w	r4, ip, r4
20000ddc:	729c      	strb	r4, [r3, #10]

        if( status & MSS_UART_THRE )
20000dde:	f01c 0f20 	tst.w	ip, #32
20000de2:	d013      	beq.n	20000e0c <MSS_UART_fill_tx_fifo+0x8c>
        {
            uint32_t fill_size = TX_FIFO_SIZE;

            if ( tx_size < TX_FIFO_SIZE )
20000de4:	2a0f      	cmp	r2, #15
20000de6:	d904      	bls.n	20000df2 <MSS_UART_fill_tx_fifo+0x72>
20000de8:	f04f 0410 	mov.w	r4, #16
20000dec:	f04f 0000 	mov.w	r0, #0
20000df0:	e002      	b.n	20000df8 <MSS_UART_fill_tx_fifo+0x78>
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000df2:	b158      	cbz	r0, 20000e0c <MSS_UART_fill_tx_fifo+0x8c>
20000df4:	4614      	mov	r4, r2
20000df6:	e7f9      	b.n	20000dec <MSS_UART_fill_tx_fifo+0x6c>
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
20000df8:	681a      	ldr	r2, [r3, #0]
20000dfa:	f811 c000 	ldrb.w	ip, [r1, r0]
20000dfe:	f882 c000 	strb.w	ip, [r2]
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000e02:	f100 0001 	add.w	r0, r0, #1
20000e06:	42a0      	cmp	r0, r4
20000e08:	d3f6      	bcc.n	20000df8 <MSS_UART_fill_tx_fifo+0x78>
20000e0a:	e001      	b.n	20000e10 <MSS_UART_fill_tx_fifo+0x90>
20000e0c:	f04f 0000 	mov.w	r0, #0
                this_uart->hw_reg->THR = tx_buffer[size_sent];
            }
        }
    }
    return size_sent;
}
20000e10:	bc10      	pop	{r4}
20000e12:	4770      	bx	lr

20000e14 <MSS_UART_get_rx_status>:
uint8_t
MSS_UART_get_rx_status
(
    mss_uart_instance_t * this_uart
)
{
20000e14:	4602      	mov	r2, r0
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e16:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1e:	4298      	cmp	r0, r3
20000e20:	d009      	beq.n	20000e36 <MSS_UART_get_rx_status+0x22>
20000e22:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2a:	4298      	cmp	r0, r3
20000e2c:	d003      	beq.n	20000e36 <MSS_UART_get_rx_status+0x22>
20000e2e:	be00      	bkpt	0x0000
20000e30:	f04f 00ff 	mov.w	r0, #255	; 0xff
20000e34:	4770      	bx	lr
         * Bit 2 - Parity error status
         * Bit 3 - Frame error status
         * Bit 4 - Break interrupt indicator
         * Bit 7 - FIFO data error status
         */
        this_uart->status |= (this_uart->hw_reg->LSR);
20000e36:	6813      	ldr	r3, [r2, #0]
20000e38:	7d18      	ldrb	r0, [r3, #20]
        status = (this_uart->status & STATUS_ERROR_MASK );
20000e3a:	7a93      	ldrb	r3, [r2, #10]
20000e3c:	ea40 0003 	orr.w	r0, r0, r3
20000e40:	f000 009e 	and.w	r0, r0, #158	; 0x9e
        /* Clear the sticky status after reading */
        this_uart->status = 0U;
20000e44:	f04f 0300 	mov.w	r3, #0
20000e48:	7293      	strb	r3, [r2, #10]
    }
    return status;
}
20000e4a:	4770      	bx	lr

20000e4c <MSS_UART_get_modem_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_INVALID_PARAM;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e4c:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e54:	4298      	cmp	r0, r3
20000e56:	d009      	beq.n	20000e6c <MSS_UART_get_modem_status+0x20>
20000e58:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e60:	4298      	cmp	r0, r3
20000e62:	d003      	beq.n	20000e6c <MSS_UART_get_modem_status+0x20>
20000e64:	be00      	bkpt	0x0000
20000e66:	f04f 00ff 	mov.w	r0, #255	; 0xff
20000e6a:	4770      	bx	lr
         * Bit 4 - Clear To Send
         * Bit 5 - Data Set Ready
         * Bit 6 - Ring Indicator
         * Bit 7 - Data Carrier Detect
         */
        status = this_uart->hw_reg->MSR;
20000e6c:	6803      	ldr	r3, [r0, #0]
20000e6e:	7e18      	ldrb	r0, [r3, #24]
    }
    return status;
}
20000e70:	4770      	bx	lr
20000e72:	bf00      	nop

20000e74 <MSS_UART_get_tx_status>:
    mss_uart_instance_t * this_uart
)
{
    uint8_t status = MSS_UART_TX_BUSY;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e74:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e7c:	4298      	cmp	r0, r3
20000e7e:	d009      	beq.n	20000e94 <MSS_UART_get_tx_status+0x20>
20000e80:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e88:	4298      	cmp	r0, r3
20000e8a:	d003      	beq.n	20000e94 <MSS_UART_get_tx_status+0x20>
20000e8c:	be00      	bkpt	0x0000
20000e8e:	f04f 0000 	mov.w	r0, #0
20000e92:	4770      	bx	lr

    if( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000e94:	6803      	ldr	r3, [r0, #0]
20000e96:	7d1b      	ldrb	r3, [r3, #20]
        this_uart->status |= status;
20000e98:	7a82      	ldrb	r2, [r0, #10]
20000e9a:	ea43 0202 	orr.w	r2, r3, r2
20000e9e:	7282      	strb	r2, [r0, #10]
        /*
         * Extract the transmit status bits from the UART's Line Status Register.
         * Bit 5 - Transmitter Holding Register/FIFO Empty (THRE) status. (If = 1, TX FIFO is empty)
         * Bit 6 - Transmitter Empty (TEMT) status. (If = 1, both TX FIFO and shift register are empty)
         */
        status &= ( MSS_UART_THRE | MSS_UART_TEMT );
20000ea0:	f003 0060 	and.w	r0, r3, #96	; 0x60
    }
    return status;
}
20000ea4:	4770      	bx	lr
20000ea6:	bf00      	nop

20000ea8 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20000ea8:	b570      	push	{r4, r5, r6, lr}
20000eaa:	4604      	mov	r4, r0
20000eac:	460d      	mov	r5, r1
20000eae:	4616      	mov	r6, r2
    uint32_t pclk_freq = 0U;
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000eb0:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eb8:	4298      	cmp	r0, r3
20000eba:	d006      	beq.n	20000eca <MSS_UART_init+0x22>
20000ebc:	f241 13a4 	movw	r3, #4516	; 0x11a4
20000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec4:	4298      	cmp	r0, r3
20000ec6:	d000      	beq.n	20000eca <MSS_UART_init+0x22>
20000ec8:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20000eca:	b905      	cbnz	r5, 20000ece <MSS_UART_init+0x26>
20000ecc:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20000ece:	f000 f895 	bl	20000ffc <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20000ed2:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eda:	429c      	cmp	r4, r3
20000edc:	d126      	bne.n	20000f2c <MSS_UART_init+0x84>
    {
        this_uart->hw_reg = UART0;
20000ede:	f241 13cc 	movw	r3, #4556	; 0x11cc
20000ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20000eea:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20000eec:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20000ef0:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20000ef2:	f04f 020a 	mov.w	r2, #10
20000ef6:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20000ef8:	f241 138c 	movw	r3, #4492	; 0x118c
20000efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f00:	6818      	ldr	r0, [r3, #0]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
20000f02:	f242 0300 	movw	r3, #8192	; 0x2000
20000f06:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20000f10:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000f12:	f24e 1200 	movw	r2, #57600	; 0xe100
20000f16:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
20000f1e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
20000f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20000f28:	631a      	str	r2, [r3, #48]	; 0x30
20000f2a:	e025      	b.n	20000f78 <MSS_UART_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20000f2c:	f240 0300 	movw	r3, #0
20000f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000f34:	6023      	str	r3, [r4, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
20000f36:	f240 0300 	movw	r3, #0
20000f3a:	f2c4 2320 	movt	r3, #16928	; 0x4220
20000f3e:	6063      	str	r3, [r4, #4]
        this_uart->irqn = UART1_IRQn;
20000f40:	f04f 030b 	mov.w	r3, #11
20000f44:	8123      	strh	r3, [r4, #8]

        pclk_freq = g_FrequencyPCLK1;
20000f46:	f241 1390 	movw	r3, #4496	; 0x1190
20000f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f4e:	6818      	ldr	r0, [r3, #0]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
20000f50:	f242 0300 	movw	r3, #8192	; 0x2000
20000f54:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20000f5e:	631a      	str	r2, [r3, #48]	; 0x30
20000f60:	f24e 1200 	movw	r2, #57600	; 0xe100
20000f64:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
20000f6c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20000f76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20000f78:	6823      	ldr	r3, [r4, #0]
20000f7a:	f04f 0200 	mov.w	r2, #0
20000f7e:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20000f80:	b915      	cbnz	r5, 20000f88 <MSS_UART_init+0xe0>
20000f82:	f04f 0501 	mov.w	r5, #1
20000f86:	e00f      	b.n	20000fa8 <MSS_UART_init+0x100>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20000f88:	fbb0 f5f5 	udiv	r5, r0, r5
        if( baud_value_l & 0x00000008U )
20000f8c:	f015 0f08 	tst.w	r5, #8
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
20000f90:	ea4f 1515 	mov.w	r5, r5, lsr #4
20000f94:	bf18      	it	ne
20000f96:	3501      	addne	r5, #1
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20000f98:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
        {
            baud_value = (uint16_t)baud_value_l;
20000f9c:	bf38      	it	cc
20000f9e:	b2ad      	uxthcc	r5, r5
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20000fa0:	d302      	bcc.n	20000fa8 <MSS_UART_init+0x100>
20000fa2:	be00      	bkpt	0x0000
20000fa4:	f04f 0501 	mov.w	r5, #1
            baud_value = (uint16_t)baud_value_l;
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20000fa8:	6863      	ldr	r3, [r4, #4]
20000faa:	f04f 0201 	mov.w	r2, #1
20000fae:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20000fb2:	6823      	ldr	r3, [r4, #0]
20000fb4:	ea4f 2215 	mov.w	r2, r5, lsr #8
20000fb8:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20000fba:	6823      	ldr	r3, [r4, #0]
20000fbc:	b2ed      	uxtb	r5, r5
20000fbe:	701d      	strb	r5, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20000fc0:	6862      	ldr	r2, [r4, #4]
20000fc2:	f04f 0300 	mov.w	r3, #0
20000fc6:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20000fca:	6822      	ldr	r2, [r4, #0]
20000fcc:	7316      	strb	r6, [r2, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
20000fce:	6822      	ldr	r2, [r4, #0]
20000fd0:	f04f 010e 	mov.w	r1, #14
20000fd4:	7211      	strb	r1, [r2, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
20000fd6:	6862      	ldr	r2, [r4, #4]
20000fd8:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20000fdc:	6123      	str	r3, [r4, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
20000fde:	60e3      	str	r3, [r4, #12]
    this_uart->tx_idx = 0U;
20000fe0:	6163      	str	r3, [r4, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20000fe2:	61e3      	str	r3, [r4, #28]
    this_uart->tx_handler       = default_tx_handler;
20000fe4:	f640 2215 	movw	r2, #2581	; 0xa15
20000fe8:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000fec:	6222      	str	r2, [r4, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20000fee:	61a3      	str	r3, [r4, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20000ff0:	6263      	str	r3, [r4, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
20000ff2:	72a3      	strb	r3, [r4, #10]
}
20000ff4:	bd70      	pop	{r4, r5, r6, pc}
20000ff6:	bf00      	nop

20000ff8 <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20000ff8:	4770      	bx	lr
20000ffa:	bf00      	nop

20000ffc <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
20000ffc:	b430      	push	{r4, r5}
20000ffe:	b084      	sub	sp, #16
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20001000:	f241 1354 	movw	r3, #4436	; 0x1154
20001004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001008:	46ec      	mov	ip, sp
2000100a:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
2000100c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
20001010:	f242 0300 	movw	r3, #8192	; 0x2000
20001014:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000101a:	f002 020c 	and.w	r2, r2, #12
2000101e:	a904      	add	r1, sp, #16
20001020:	440a      	add	r2, r1
20001022:	f852 5c10 	ldr.w	r5, [r2, #-16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
20001026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20001028:	f3c2 1201 	ubfx	r2, r2, #4, #2
2000102c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20001030:	f852 4c10 	ldr.w	r4, [r2, #-16]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
20001034:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20001036:	f3c2 1281 	ubfx	r2, r2, #6, #2
2000103a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
2000103e:	f852 0c10 	ldr.w	r0, [r2, #-16]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20001042:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        FabDiv = obdiv + 1uL;
20001046:	f3c1 2104 	ubfx	r1, r1, #8, #5
2000104a:	f101 0101 	add.w	r1, r1, #1
        if ( obdivhalf != 0uL )
2000104e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
        {
            FabDiv = FabDiv * 2uL;
20001052:	bf18      	it	ne
20001054:	0049      	lslne	r1, r1, #1
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    uint32_t * p_idcode = IDCODE_LOCATION;
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
20001056:	f240 2330 	movw	r3, #560	; 0x230
2000105a:	f2c6 0308 	movt	r3, #24584	; 0x6008
2000105e:	681a      	ldr	r2, [r3, #0]
	
    if ( A2F060IFX_ID == idcode )
20001060:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
20001064:	f241 13cf 	movw	r3, #4559	; 0x11cf
20001068:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
2000106c:	429a      	cmp	r2, r3
2000106e:	d105      	bne.n	2000107c <SystemCoreClockUpdate+0x80>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
        fclk = *p_fclk;
20001070:	f64e 732c 	movw	r3, #61228	; 0xef2c
20001074:	f2c6 0301 	movt	r3, #24577	; 0x6001
20001078:	681a      	ldr	r2, [r3, #0]
2000107a:	e028      	b.n	200010ce <SystemCoreClockUpdate+0xd2>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
2000107c:	f640 031c 	movw	r3, #2076	; 0x81c
20001080:	f2c6 0308 	movt	r3, #24584	; 0x6008
20001084:	681a      	ldr	r2, [r3, #0]
20001086:	f244 3341 	movw	r3, #17217	; 0x4341
2000108a:	f6c4 4354 	movt	r3, #19540	; 0x4c54
2000108e:	429a      	cmp	r2, r3
20001090:	d11e      	bne.n	200010d0 <SystemCoreClockUpdate+0xd4>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
        uint32_t sysboot_version = *p_sysboot_version;
20001092:	f640 0340 	movw	r3, #2112	; 0x840
20001096:	f2c6 0308 	movt	r3, #24584	; 0x6008
2000109a:	681a      	ldr	r2, [r3, #0]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
2000109c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
200010a0:	f240 3300 	movw	r3, #768	; 0x300
200010a4:	f2c0 0301 	movt	r3, #1
200010a8:	429a      	cmp	r2, r3
200010aa:	d911      	bls.n	200010d0 <SystemCoreClockUpdate+0xd4>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
200010ac:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
200010b0:	d205      	bcs.n	200010be <SystemCoreClockUpdate+0xc2>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
                fclk = *p_fclk;
200010b2:	f241 632c 	movw	r3, #5676	; 0x162c
200010b6:	f2c6 0308 	movt	r3, #24584	; 0x6008
200010ba:	681a      	ldr	r2, [r3, #0]
200010bc:	e007      	b.n	200010ce <SystemCoreClockUpdate+0xd2>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
200010be:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
200010c2:	d205      	bcs.n	200010d0 <SystemCoreClockUpdate+0xd4>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
                fclk = *p_fclk;
200010c4:	f641 63ac 	movw	r3, #7852	; 0x1eac
200010c8:	f2c6 0308 	movt	r3, #24584	; 0x6008
200010cc:	681a      	ldr	r2, [r3, #0]
                fclk = 0uL;
            }
        }
    }
    
    if ( 0uL == fclk )
200010ce:	b922      	cbnz	r2, 200010da <SystemCoreClockUpdate+0xde>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
200010d0:	be00      	bkpt	0x0000
200010d2:	f647 0240 	movw	r2, #30784	; 0x7840
200010d6:	f2c0 127d 	movt	r2, #381	; 0x17d
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
200010da:	f241 1388 	movw	r3, #4488	; 0x1188
200010de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010e2:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
200010e4:	fbb2 f5f5 	udiv	r5, r2, r5
200010e8:	605d      	str	r5, [r3, #4]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
200010ea:	fbb2 f4f4 	udiv	r4, r2, r4
200010ee:	609c      	str	r4, [r3, #8]
    g_FrequencyACE = SystemCoreClock / AceDiv;
200010f0:	fbb2 f0f0 	udiv	r0, r2, r0
200010f4:	60d8      	str	r0, [r3, #12]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
200010f6:	fbb2 f1f1 	udiv	r1, r2, r1
200010fa:	6119      	str	r1, [r3, #16]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
200010fc:	615a      	str	r2, [r3, #20]
}
200010fe:	b004      	add	sp, #16
20001100:	bc30      	pop	{r4, r5}
20001102:	4770      	bx	lr

20001104 <__libc_init_array>:
20001104:	b570      	push	{r4, r5, r6, lr}
20001106:	f241 167c 	movw	r6, #4476	; 0x117c
2000110a:	f241 157c 	movw	r5, #4476	; 0x117c
2000110e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001112:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001116:	1b76      	subs	r6, r6, r5
20001118:	10b6      	asrs	r6, r6, #2
2000111a:	d006      	beq.n	2000112a <__libc_init_array+0x26>
2000111c:	2400      	movs	r4, #0
2000111e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001122:	3401      	adds	r4, #1
20001124:	4798      	blx	r3
20001126:	42a6      	cmp	r6, r4
20001128:	d8f9      	bhi.n	2000111e <__libc_init_array+0x1a>
2000112a:	f241 157c 	movw	r5, #4476	; 0x117c
2000112e:	f241 1680 	movw	r6, #4480	; 0x1180
20001132:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001136:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000113a:	1b76      	subs	r6, r6, r5
2000113c:	f000 f812 	bl	20001164 <_init>
20001140:	10b6      	asrs	r6, r6, #2
20001142:	d006      	beq.n	20001152 <__libc_init_array+0x4e>
20001144:	2400      	movs	r4, #0
20001146:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000114a:	3401      	adds	r4, #1
2000114c:	4798      	blx	r3
2000114e:	42a6      	cmp	r6, r4
20001150:	d8f9      	bhi.n	20001146 <__libc_init_array+0x42>
20001152:	bd70      	pop	{r4, r5, r6, pc}

20001154 <C.16.2565>:
20001154:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20001164 <_init>:
20001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001166:	bf00      	nop
20001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000116a:	bc08      	pop	{r3}
2000116c:	469e      	mov	lr, r3
2000116e:	4770      	bx	lr

20001170 <_fini>:
20001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001172:	bf00      	nop
20001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001176:	bc08      	pop	{r3}
20001178:	469e      	mov	lr, r3
2000117a:	4770      	bx	lr

2000117c <__frame_dummy_init_array_entry>:
2000117c:	0485 2000                                   ... 

20001180 <__do_global_dtors_aux_fini_array_entry>:
20001180:	0471 2000                                   q.. 
