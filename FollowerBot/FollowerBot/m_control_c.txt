#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_gpio/mss_gpio.h"

int * MOTOR_INPUTS = (int*) 0x40050004;
int * LEFT_MOTOR = (int*) 0x40050008;
int * RIGHT_MOTOR = (int*) 0x4005000c;
int * ENCODERS = (int*) 0x40050010;
int * TIME = (int*) 0x40050014;

const int PERIOD = 2000000;
const double SECOND = 25000000.0;

int main(void)
{
	float left_Kp = 1.1;
	float left_Ki = 0;
	float left_Kd = 0;

	float right_Kp = 1.1;
	float right_Ki = 0;
	float right_Kd = 0;

	int left_wheel_tot = 0;
	int right_wheel_tot = 0;
	int left_encoder_val = 0;
	int right_encoder_val = 0;

	int prev_left_encoder_val = 0;
	int prev_right_encoder_val = 0;
	int left_rotating = 0;
	int right_rotating = 0;

	int start_time_left = 0;
	int curr_time_left = 0;
	int start_time_right = 0;
	int curr_time_right = 0;

	double curr_left_speed = 0.0;
	double curr_right_speed = 0.0;

	double previous_error_left = 0;
	double previous_error_right = 0;
	double current_error_left = 0;
	double current_error_right = 0;
	double total_error_left = 0;
	double total_error_right = 0;

	int left_time = 0;
	int right_time = 0;

	double left_PID = 0;
	double right_PID = 0;

	int command = 0;
	int tempmode = 0;
	double left_speed = 0;
	double right_speed = 0;

	int left_ds_100 = 0;
	int	left_ds_10 = 0;
	int	left_ds_1 = 0;

	int right_ds_100 = 0;
	int	right_ds_10 = 0;
	int	right_ds_1 = 0;

	uint32_t counter = 0;
	uint32_t gpio_inputs = 0;
	uint32_t count0 = 0;
	uint32_t count1 = 0;
	uint32_t count2 = 0;
	uint32_t count3 = 0;
	uint32_t count4 = 0;
	uint32_t count5 = 0;
	uint32_t count6 = 0;
	uint32_t count7 = 0;
	//*direction = 7;

	uint8_t rx_buff[8];
	MSS_UART_init(&g_mss_uart1, MSS_UART_57600_BAUD, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);

	MSS_GPIO_init();
	MSS_GPIO_config(MSS_GPIO_0, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_2, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_3, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_4, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_5, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_6, MSS_GPIO_INOUT_MODE);
	MSS_GPIO_config(MSS_GPIO_7, MSS_GPIO_INOUT_MODE);

	while( 1 )
	{
		// Get command from control module
		if(MSS_UART_get_rx(&g_mss_uart1, rx_buff, sizeof(rx_buff)))
		{
			tempmode = rx_buff[0];
			command = rx_buff[1];

			left_ds_100 = 100*((char)rx_buff[2] -'0');
			left_ds_10 = 10*((char)rx_buff[3] - '0');
			left_ds_1 = (char)rx_buff[4] - '0';

			right_ds_100 = 100*((char)rx_buff[5] -'0');
			right_ds_10 = 10*((char)rx_buff[6] - '0');
			right_ds_1 = (char)rx_buff[7] - '0';
		}

		left_speed = (left_ds_100 + left_ds_10 + left_ds_1);
		right_speed = (right_ds_100 + right_ds_10 + right_ds_1);

		prev_left_encoder_val = left_encoder_val;
		prev_right_encoder_val = right_encoder_val;

		if(*ENCODERS == 1 || *ENCODERS == 3)
			left_encoder_val = 1;
		else
			left_encoder_val = 0;

		if(*ENCODERS == 2 || *ENCODERS == 3)
			right_encoder_val = 1;
		else
			right_encoder_val = 0;

		// increment totals only when encoder is rotating
		if((prev_left_encoder_val == 0 && left_encoder_val == 1) || (prev_left_encoder_val == 1 && left_encoder_val == 0))
		{
			curr_time_left = *TIME;
			left_wheel_tot += left_encoder_val;
			left_rotating = 1;

		}
		else
		{
			left_rotating = 0;
		}

		if((prev_right_encoder_val == 0 && right_encoder_val == 1) || (prev_right_encoder_val == 1 && right_encoder_val == 0))
		{
			curr_time_right = *TIME;
			right_wheel_tot += right_encoder_val;
			right_rotating = 1;
		}
		else
		{
			right_rotating = 0;
		}

		previous_error_left = current_error_left;
		previous_error_right = current_error_right;

		if(curr_time_left>start_time_left)
			left_time = curr_time_left-start_time_left;
		else if(curr_time_left<start_time_left)
			left_time = SECOND + (curr_time_left-start_time_left) ;

		if(curr_time_right>start_time_right)
			right_time = curr_time_right-start_time_right;
		else if(curr_time_right<start_time_right)
			right_time = SECOND + (curr_time_right-start_time_right) ;

		curr_left_speed = left_wheel_tot/(left_time/SECOND);
		curr_right_speed = right_wheel_tot/(right_time/SECOND);

		current_error_left = (left_speed - curr_left_speed)/0.2;
		current_error_right = (right_speed - curr_right_speed)/0.2;

		if(left_rotating)
		{
			if(current_error_left == 0)
				total_error_left = 0;
			else
				total_error_left += current_error_left;
		}

		if(right_rotating)
		{
			if(current_error_right == 0)
				total_error_right = 0;
			else
				total_error_right += current_error_right;
		}

		left_PID = left_Kp*current_error_left + left_Ki*total_error_left + left_Kd*(current_error_left-previous_error_left);
		right_PID = right_Kp*current_error_right + right_Ki*total_error_right + right_Kd*(current_error_right-previous_error_right);

		printf("tempmode: %d\r\n", tempmode);
		printf("command: %d\r\n", command);

		if(tempmode == 49)
		{
			if(command == 49)
			{
				*MOTOR_INPUTS = 0x5;
			}
			else if(command == 50)
			{
				*MOTOR_INPUTS = 0xA;
			}
			else if(command == 48)
			{
				left_speed = 0;
				right_speed = 0;
				*MOTOR_INPUTS = 0x0;
			}
			else
			{
				left_speed = 0;
				right_speed = 0;
				*MOTOR_INPUTS = 0x0;
			}
			*LEFT_MOTOR = *LEFT_MOTOR + (left_PID*PERIOD);
			*RIGHT_MOTOR = *RIGHT_MOTOR + (right_PID*PERIOD);
		}
		else if (tempmode == 48)
		{
			*MOTOR_INPUTS = 0x5;
			while(tempmode == 48)
			{
				while(counter <= 1000)
				{
					MSS_GPIO_drive_inout(MSS_GPIO_0, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_1, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_2, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_3, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_4, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_5, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_6, MSS_GPIO_DRIVE_HIGH);
					MSS_GPIO_drive_inout(MSS_GPIO_7, MSS_GPIO_DRIVE_HIGH);
					counter = counter + 1;
				}
				MSS_GPIO_drive_inout(MSS_GPIO_0, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_1, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_2, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_3, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_4, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_5, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_6, MSS_GPIO_HIGH_Z);
				MSS_GPIO_drive_inout(MSS_GPIO_7, MSS_GPIO_HIGH_Z);

				while(counter <= 100000)
				{
					gpio_inputs = MSS_GPIO_get_inputs();
					if (gpio_inputs & 0x1) count0 = count0 + 1;
					if (gpio_inputs & 0x2) count1 = count1 + 1;
					if (gpio_inputs & 0x4) count2 = count2 + 1;
					if (gpio_inputs & 0x8) count3 = count3 + 1;
					if (gpio_inputs & 0x10) count4 = count4 + 1;
					if (gpio_inputs & 0x20) count5 = count5 + 1;
					if (gpio_inputs & 0x40) count6 = count6 + 1;
					if (gpio_inputs & 0x80) count7 = count7 + 1;
					counter = counter + 1;
				}

				/*if ((count3 > 200) && (count4 > 200)) *direction = 3;
				else if ((count2 > 200) && (count3 > 200)) *direction = 2;
				else if ((count4 > 200) && (count5 > 200)) *direction = 4;
				else if ((count1 > 200) && (count2 > 200)) *direction = 1;
				else if ((count5 > 200) && (count6 > 200)) *direction = 5;
				else if ((count0 > 200) && (count1 > 200)) *direction = 0;
				else if  ((count6 > 200) && (count7 > 200)) *direction = 6;
				else *direction = 7;*/

				printf("count0: %u\r\n", (unsigned)count0);
				printf("count1: %u\r\n", (unsigned)count1);
				printf("count2: %u\r\n", (unsigned)count2);
				printf("count3: %u\r\n", (unsigned)count3);
				printf("count4: %u\r\n", (unsigned)count4);
				printf("count5: %u\r\n", (unsigned)count5);
				printf("count6: %u\r\n", (unsigned)count6);
				printf("count7: %u\r\n\n", (unsigned)count7);
				//printf("result: %d\r\n", *direction);

				count0 = 0;
				count1 = 0;
				count2 = 0;
				count3 = 0;
				count4 = 0;
				count5 = 0;
				count6 = 0;
				count7 = 0;
				counter = 0;
				if(MSS_UART_get_rx(&g_mss_uart1, rx_buff, sizeof(rx_buff)))
				{
					tempmode = rx_buff[0];
					//*mode = tempmode;
					command = rx_buff[1];

					left_ds_100 = 100*((char)rx_buff[2] -'0');
					left_ds_10 = 10*((char)rx_buff[3] - '0');
					left_ds_1 = (char)rx_buff[4] - '0';

					right_ds_100 = 100*((char)rx_buff[5] -'0');
					right_ds_10 = 10*((char)rx_buff[6] - '0');
					right_ds_1 = (char)rx_buff[7] - '0';
				}
			}
		}
		else
		{
			*LEFT_MOTOR = 0;
			*RIGHT_MOTOR = 0;
		}
		if(left_wheel_tot == 20)
		{
			left_wheel_tot = 0;
			start_time_left = curr_time_left;
		}

		if(right_wheel_tot == 20)
		{
			right_wheel_tot = 0;
			start_time_right = curr_time_right;
		}
	}
}
